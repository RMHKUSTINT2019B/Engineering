
build/RMInternalDev.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000249 	.word	0x08000249
 8000008:	0800024b 	.word	0x0800024b
 800000c:	0800024a 	.word	0x0800024a
 8000010:	0800024a 	.word	0x0800024a
 8000014:	0800024a 	.word	0x0800024a
 8000018:	0800024a 	.word	0x0800024a
 800001c:	0800024a 	.word	0x0800024a
 8000020:	0800024a 	.word	0x0800024a
 8000024:	0800024a 	.word	0x0800024a
 8000028:	0800024a 	.word	0x0800024a
 800002c:	08002b41 	.word	0x08002b41
 8000030:	0800024a 	.word	0x0800024a
 8000034:	0800024a 	.word	0x0800024a
 8000038:	0800024a 	.word	0x0800024a
 800003c:	0800024a 	.word	0x0800024a
 8000040:	0800024a 	.word	0x0800024a
 8000044:	0800024a 	.word	0x0800024a
 8000048:	0800024a 	.word	0x0800024a
 800004c:	0800024a 	.word	0x0800024a
 8000050:	0800024a 	.word	0x0800024a
 8000054:	0800024a 	.word	0x0800024a
 8000058:	0800024a 	.word	0x0800024a
 800005c:	0800024a 	.word	0x0800024a
 8000060:	0800024a 	.word	0x0800024a
 8000064:	0800024a 	.word	0x0800024a
 8000068:	0800024a 	.word	0x0800024a
 800006c:	08001a51 	.word	0x08001a51
 8000070:	08001a91 	.word	0x08001a91
 8000074:	08001ad1 	.word	0x08001ad1
 8000078:	08001b11 	.word	0x08001b11
 800007c:	08001b51 	.word	0x08001b51
 8000080:	08001b91 	.word	0x08001b91
 8000084:	08001bd1 	.word	0x08001bd1
 8000088:	0800024a 	.word	0x0800024a
 800008c:	08001641 	.word	0x08001641
 8000090:	080016b1 	.word	0x080016b1
 8000094:	08001721 	.word	0x08001721
 8000098:	08001791 	.word	0x08001791
 800009c:	0800024a 	.word	0x0800024a
 80000a0:	0800024a 	.word	0x0800024a
 80000a4:	0800024a 	.word	0x0800024a
 80000a8:	0800024a 	.word	0x0800024a
 80000ac:	0800024a 	.word	0x0800024a
 80000b0:	08001dd1 	.word	0x08001dd1
 80000b4:	0800024a 	.word	0x0800024a
 80000b8:	0800024a 	.word	0x0800024a
 80000bc:	0800024a 	.word	0x0800024a
 80000c0:	0800024a 	.word	0x0800024a
 80000c4:	0800024a 	.word	0x0800024a
 80000c8:	0800024a 	.word	0x0800024a
 80000cc:	0800024a 	.word	0x0800024a
 80000d0:	0800024a 	.word	0x0800024a
 80000d4:	0800024a 	.word	0x0800024a
 80000d8:	08001f61 	.word	0x08001f61
 80000dc:	0800024a 	.word	0x0800024a
 80000e0:	0800024a 	.word	0x0800024a
 80000e4:	0800024a 	.word	0x0800024a
 80000e8:	0800024a 	.word	0x0800024a
 80000ec:	0800024a 	.word	0x0800024a
 80000f0:	0800024a 	.word	0x0800024a
 80000f4:	0800024a 	.word	0x0800024a
 80000f8:	0800024a 	.word	0x0800024a
 80000fc:	0800024a 	.word	0x0800024a
 8000100:	0800024a 	.word	0x0800024a
 8000104:	0800024a 	.word	0x0800024a
 8000108:	0800024a 	.word	0x0800024a
 800010c:	0800024a 	.word	0x0800024a
 8000110:	0800024a 	.word	0x0800024a
 8000114:	0800024a 	.word	0x0800024a
 8000118:	0800024a 	.word	0x0800024a
 800011c:	0800024a 	.word	0x0800024a
 8000120:	0800024a 	.word	0x0800024a
 8000124:	0800024a 	.word	0x0800024a
 8000128:	0800024a 	.word	0x0800024a
 800012c:	0800024a 	.word	0x0800024a
 8000130:	0800024a 	.word	0x0800024a
 8000134:	0800024a 	.word	0x0800024a
 8000138:	0800024a 	.word	0x0800024a
 800013c:	0800024a 	.word	0x0800024a
 8000140:	0800024a 	.word	0x0800024a
 8000144:	0800024a 	.word	0x0800024a
 8000148:	0800024a 	.word	0x0800024a
 800014c:	0800024a 	.word	0x0800024a
 8000150:	0800024a 	.word	0x0800024a
 8000154:	0800024a 	.word	0x0800024a
 8000158:	0800024a 	.word	0x0800024a
 800015c:	0800024a 	.word	0x0800024a

Disassembly of section .text:

08000170 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000170:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000172:	4827      	ldr	r0, [pc, #156]	; (8000210 <endfiniloop+0x4>)
                msr     MSP, r0
 8000174:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000178:	4826      	ldr	r0, [pc, #152]	; (8000214 <endfiniloop+0x8>)
                msr     PSP, r0
 800017a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800017e:	4826      	ldr	r0, [pc, #152]	; (8000218 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000180:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000184:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000188:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800018a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800018c:	f380 8814 	msr	CONTROL, r0
                isb
 8000190:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000194:	f000 ffb4 	bl	8001100 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000198:	f001 ffea 	bl	8002170 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800019c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80001a0:	491e      	ldr	r1, [pc, #120]	; (800021c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 80001a2:	4a1b      	ldr	r2, [pc, #108]	; (8000210 <endfiniloop+0x4>)

080001a4 <msloop>:
msloop:
                cmp     r1, r2
 80001a4:	4291      	cmp	r1, r2
                itt     lo
 80001a6:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a8:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80001ac:	e7fa      	bcc.n	80001a4 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80001ae:	491c      	ldr	r1, [pc, #112]	; (8000220 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001b0:	4a18      	ldr	r2, [pc, #96]	; (8000214 <endfiniloop+0x8>)

080001b2 <psloop>:
psloop:
                cmp     r1, r2
 80001b2:	4291      	cmp	r1, r2
                itt     lo
 80001b4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001b6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001ba:	e7fa      	bcc.n	80001b2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80001bc:	4919      	ldr	r1, [pc, #100]	; (8000224 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 80001be:	4a1a      	ldr	r2, [pc, #104]	; (8000228 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 80001c0:	4b1a      	ldr	r3, [pc, #104]	; (800022c <endfiniloop+0x20>)

080001c2 <dloop>:
dloop:
                cmp     r2, r3
 80001c2:	429a      	cmp	r2, r3
                ittt    lo
 80001c4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001c6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ca:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001ce:	e7f8      	bcc.n	80001c2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001d0:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 80001d2:	4917      	ldr	r1, [pc, #92]	; (8000230 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 80001d4:	4a17      	ldr	r2, [pc, #92]	; (8000234 <endfiniloop+0x28>)

080001d6 <bloop>:
bloop:
                cmp     r1, r2
 80001d6:	4291      	cmp	r1, r2
                itt     lo
 80001d8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001da:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001de:	e7fa      	bcc.n	80001d6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001e0:	f000 ffa6 	bl	8001130 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001e4:	f000 ff94 	bl	8001110 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80001e8:	4c13      	ldr	r4, [pc, #76]	; (8000238 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 80001ea:	4d14      	ldr	r5, [pc, #80]	; (800023c <endfiniloop+0x30>)

080001ec <initloop>:
initloop:
                cmp     r4, r5
 80001ec:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001ee:	da03      	bge.n	80001f8 <endinitloop>
                ldr     r1, [r4], #4
 80001f0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f4:	4788      	blx	r1
                b       initloop
 80001f6:	e7f9      	b.n	80001ec <initloop>

080001f8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001f8:	f002 fe1a 	bl	8002e30 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80001fc:	4c10      	ldr	r4, [pc, #64]	; (8000240 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 80001fe:	4d11      	ldr	r5, [pc, #68]	; (8000244 <endfiniloop+0x38>)

08000200 <finiloop>:
finiloop:
                cmp     r4, r5
 8000200:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000202:	da03      	bge.n	800020c <endfiniloop>
                ldr     r1, [r4], #4
 8000204:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000208:	4788      	blx	r1
                b       finiloop
 800020a:	e7f9      	b.n	8000200 <finiloop>

0800020c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800020c:	f000 bf88 	b.w	8001120 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000210:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000214:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000218:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800021c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000220:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 8000224:	08003768 	.word	0x08003768
                ldr     r2, =_data_start
 8000228:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800022c:	2000082c 	.word	0x2000082c
                ldr     r1, =_bss_start
 8000230:	20000830 	.word	0x20000830
                ldr     r2, =_bss_end
 8000234:	20001430 	.word	0x20001430
                ldr     r4, =__init_array_start
 8000238:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end
 800023c:	08000164 	.word	0x08000164
                ldr     r4, =__fini_array_start
 8000240:	08000164 	.word	0x08000164
                ldr     r5, =__fini_array_end
 8000244:	08000164 	.word	0x08000164

08000248 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000248:	e792      	b.n	8000170 <_crt0_entry>

0800024a <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 800024a:	f000 f800 	bl	800024e <_unhandled_exception>

0800024e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800024e:	e7fe      	b.n	800024e <_unhandled_exception>

08000250 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000254:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000258:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800025a:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000260 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000260:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000262:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000266:	4628      	mov	r0, r5
                blx     r4
 8000268:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800026a:	2000      	movs	r0, #0
                bl      chThdExit
 800026c:	f002 fad0 	bl	8002810 <chThdExit>

08000270 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000270:	f002 f9ee 	bl	8002650 <chSchDoReschedule>

08000274 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000274:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000276:	e7fe      	b.n	8000276 <_port_exit_from_isr+0x2>

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	; 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b6:	f1a4 0401 	sub.w	r4, r4, #1
 80003ba:	d1e9      	bne.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2iz>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a1c:	d215      	bcs.n	8000a4a <__aeabi_d2iz+0x36>
 8000a1e:	d511      	bpl.n	8000a44 <__aeabi_d2iz+0x30>
 8000a20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a28:	d912      	bls.n	8000a50 <__aeabi_d2iz+0x3c>
 8000a2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3e:	bf18      	it	ne
 8000a40:	4240      	negne	r0, r0
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d105      	bne.n	8000a5c <__aeabi_d2iz+0x48>
 8000a50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	bf08      	it	eq
 8000a56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_d2f>:
 8000a64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a6c:	bf24      	itt	cs
 8000a6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a76:	d90d      	bls.n	8000a94 <__aeabi_d2f+0x30>
 8000a78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a98:	d121      	bne.n	8000ade <__aeabi_d2f+0x7a>
 8000a9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9e:	bfbc      	itt	lt
 8000aa0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa4:	4770      	bxlt	lr
 8000aa6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aae:	f1c2 0218 	rsb	r2, r2, #24
 8000ab2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aba:	fa20 f002 	lsr.w	r0, r0, r2
 8000abe:	bf18      	it	ne
 8000ac0:	f040 0001 	orrne.w	r0, r0, #1
 8000ac4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000acc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad0:	ea40 000c 	orr.w	r0, r0, ip
 8000ad4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000adc:	e7cc      	b.n	8000a78 <__aeabi_d2f+0x14>
 8000ade:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae2:	d107      	bne.n	8000af4 <__aeabi_d2f+0x90>
 8000ae4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae8:	bf1e      	ittt	ne
 8000aea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af2:	4770      	bxne	lr
 8000af4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000afc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_frsub>:
 8000b04:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b08:	e002      	b.n	8000b10 <__addsf3>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_fsub>:
 8000b0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b10 <__addsf3>:
 8000b10:	0042      	lsls	r2, r0, #1
 8000b12:	bf1f      	itttt	ne
 8000b14:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b18:	ea92 0f03 	teqne	r2, r3
 8000b1c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b20:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b24:	d06a      	beq.n	8000bfc <__addsf3+0xec>
 8000b26:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2e:	bfc1      	itttt	gt
 8000b30:	18d2      	addgt	r2, r2, r3
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	4048      	eorgt	r0, r1
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	bfb8      	it	lt
 8000b3a:	425b      	neglt	r3, r3
 8000b3c:	2b19      	cmp	r3, #25
 8000b3e:	bf88      	it	hi
 8000b40:	4770      	bxhi	lr
 8000b42:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b56:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4249      	negne	r1, r1
 8000b62:	ea92 0f03 	teq	r2, r3
 8000b66:	d03f      	beq.n	8000be8 <__addsf3+0xd8>
 8000b68:	f1a2 0201 	sub.w	r2, r2, #1
 8000b6c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b70:	eb10 000c 	adds.w	r0, r0, ip
 8000b74:	f1c3 0320 	rsb	r3, r3, #32
 8000b78:	fa01 f103 	lsl.w	r1, r1, r3
 8000b7c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b80:	d502      	bpl.n	8000b88 <__addsf3+0x78>
 8000b82:	4249      	negs	r1, r1
 8000b84:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b8c:	d313      	bcc.n	8000bb6 <__addsf3+0xa6>
 8000b8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b92:	d306      	bcc.n	8000ba2 <__addsf3+0x92>
 8000b94:	0840      	lsrs	r0, r0, #1
 8000b96:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9a:	f102 0201 	add.w	r2, r2, #1
 8000b9e:	2afe      	cmp	r2, #254	; 0xfe
 8000ba0:	d251      	bcs.n	8000c46 <__addsf3+0x136>
 8000ba2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000baa:	bf08      	it	eq
 8000bac:	f020 0001 	biceq.w	r0, r0, #1
 8000bb0:	ea40 0003 	orr.w	r0, r0, r3
 8000bb4:	4770      	bx	lr
 8000bb6:	0049      	lsls	r1, r1, #1
 8000bb8:	eb40 0000 	adc.w	r0, r0, r0
 8000bbc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc4:	d1ed      	bne.n	8000ba2 <__addsf3+0x92>
 8000bc6:	fab0 fc80 	clz	ip, r0
 8000bca:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bce:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd6:	bfaa      	itet	ge
 8000bd8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bdc:	4252      	neglt	r2, r2
 8000bde:	4318      	orrge	r0, r3
 8000be0:	bfbc      	itt	lt
 8000be2:	40d0      	lsrlt	r0, r2
 8000be4:	4318      	orrlt	r0, r3
 8000be6:	4770      	bx	lr
 8000be8:	f092 0f00 	teq	r2, #0
 8000bec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bf0:	bf06      	itte	eq
 8000bf2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bf6:	3201      	addeq	r2, #1
 8000bf8:	3b01      	subne	r3, #1
 8000bfa:	e7b5      	b.n	8000b68 <__addsf3+0x58>
 8000bfc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c04:	bf18      	it	ne
 8000c06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0a:	d021      	beq.n	8000c50 <__addsf3+0x140>
 8000c0c:	ea92 0f03 	teq	r2, r3
 8000c10:	d004      	beq.n	8000c1c <__addsf3+0x10c>
 8000c12:	f092 0f00 	teq	r2, #0
 8000c16:	bf08      	it	eq
 8000c18:	4608      	moveq	r0, r1
 8000c1a:	4770      	bx	lr
 8000c1c:	ea90 0f01 	teq	r0, r1
 8000c20:	bf1c      	itt	ne
 8000c22:	2000      	movne	r0, #0
 8000c24:	4770      	bxne	lr
 8000c26:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c2a:	d104      	bne.n	8000c36 <__addsf3+0x126>
 8000c2c:	0040      	lsls	r0, r0, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	4770      	bx	lr
 8000c36:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c3a:	bf3c      	itt	cc
 8000c3c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c40:	4770      	bxcc	lr
 8000c42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c46:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4e:	4770      	bx	lr
 8000c50:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c54:	bf16      	itet	ne
 8000c56:	4608      	movne	r0, r1
 8000c58:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c5c:	4601      	movne	r1, r0
 8000c5e:	0242      	lsls	r2, r0, #9
 8000c60:	bf06      	itte	eq
 8000c62:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c66:	ea90 0f01 	teqeq	r0, r1
 8000c6a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_ui2f>:
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e004      	b.n	8000c80 <__aeabi_i2f+0x8>
 8000c76:	bf00      	nop

08000c78 <__aeabi_i2f>:
 8000c78:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	bf48      	it	mi
 8000c7e:	4240      	negmi	r0, r0
 8000c80:	ea5f 0c00 	movs.w	ip, r0
 8000c84:	bf08      	it	eq
 8000c86:	4770      	bxeq	lr
 8000c88:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c8c:	4601      	mov	r1, r0
 8000c8e:	f04f 0000 	mov.w	r0, #0
 8000c92:	e01c      	b.n	8000cce <__aeabi_l2f+0x2a>

08000c94 <__aeabi_ul2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e00a      	b.n	8000cb8 <__aeabi_l2f+0x14>
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_l2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cb0:	d502      	bpl.n	8000cb8 <__aeabi_l2f+0x14>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	ea5f 0c01 	movs.w	ip, r1
 8000cbc:	bf02      	ittt	eq
 8000cbe:	4684      	moveq	ip, r0
 8000cc0:	4601      	moveq	r1, r0
 8000cc2:	2000      	moveq	r0, #0
 8000cc4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc8:	bf08      	it	eq
 8000cca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cd2:	fabc f28c 	clz	r2, ip
 8000cd6:	3a08      	subs	r2, #8
 8000cd8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cdc:	db10      	blt.n	8000d00 <__aeabi_l2f+0x5c>
 8000cde:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce8:	f1c2 0220 	rsb	r2, r2, #32
 8000cec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf4:	eb43 0002 	adc.w	r0, r3, r2
 8000cf8:	bf08      	it	eq
 8000cfa:	f020 0001 	biceq.w	r0, r0, #1
 8000cfe:	4770      	bx	lr
 8000d00:	f102 0220 	add.w	r2, r2, #32
 8000d04:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d10:	fa21 f202 	lsr.w	r2, r1, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fmul>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d06f      	beq.n	8000e18 <__aeabi_fmul+0xf8>
 8000d38:	441a      	add	r2, r3
 8000d3a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3e:	0240      	lsls	r0, r0, #9
 8000d40:	bf18      	it	ne
 8000d42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d46:	d01e      	beq.n	8000d86 <__aeabi_fmul+0x66>
 8000d48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d54:	fba0 3101 	umull	r3, r1, r0, r1
 8000d58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d60:	bf3e      	ittt	cc
 8000d62:	0049      	lslcc	r1, r1, #1
 8000d64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d68:	005b      	lslcc	r3, r3, #1
 8000d6a:	ea40 0001 	orr.w	r0, r0, r1
 8000d6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d72:	2afd      	cmp	r2, #253	; 0xfd
 8000d74:	d81d      	bhi.n	8000db2 <__aeabi_fmul+0x92>
 8000d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	4770      	bx	lr
 8000d86:	f090 0f00 	teq	r0, #0
 8000d8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d8e:	bf08      	it	eq
 8000d90:	0249      	lsleq	r1, r1, #9
 8000d92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9a:	3a7f      	subs	r2, #127	; 0x7f
 8000d9c:	bfc2      	ittt	gt
 8000d9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000da6:	4770      	bxgt	lr
 8000da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	3a01      	subs	r2, #1
 8000db2:	dc5d      	bgt.n	8000e70 <__aeabi_fmul+0x150>
 8000db4:	f112 0f19 	cmn.w	r2, #25
 8000db8:	bfdc      	itt	le
 8000dba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dbe:	4770      	bxle	lr
 8000dc0:	f1c2 0200 	rsb	r2, r2, #0
 8000dc4:	0041      	lsls	r1, r0, #1
 8000dc6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dca:	f1c2 0220 	rsb	r2, r2, #32
 8000dce:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dd6:	f140 0000 	adc.w	r0, r0, #0
 8000dda:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dde:	bf08      	it	eq
 8000de0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de4:	4770      	bx	lr
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0040      	lsleq	r0, r0, #1
 8000df2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df6:	3a01      	subeq	r2, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xce>
 8000dfa:	ea40 000c 	orr.w	r0, r0, ip
 8000dfe:	f093 0f00 	teq	r3, #0
 8000e02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	bf02      	ittt	eq
 8000e08:	0049      	lsleq	r1, r1, #1
 8000e0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0e:	3b01      	subeq	r3, #1
 8000e10:	d0f9      	beq.n	8000e06 <__aeabi_fmul+0xe6>
 8000e12:	ea41 010c 	orr.w	r1, r1, ip
 8000e16:	e78f      	b.n	8000d38 <__aeabi_fmul+0x18>
 8000e18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e1c:	ea92 0f0c 	teq	r2, ip
 8000e20:	bf18      	it	ne
 8000e22:	ea93 0f0c 	teqne	r3, ip
 8000e26:	d00a      	beq.n	8000e3e <__aeabi_fmul+0x11e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1d8      	bne.n	8000de6 <__aeabi_fmul+0xc6>
 8000e34:	ea80 0001 	eor.w	r0, r0, r1
 8000e38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e3c:	4770      	bx	lr
 8000e3e:	f090 0f00 	teq	r0, #0
 8000e42:	bf17      	itett	ne
 8000e44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e48:	4608      	moveq	r0, r1
 8000e4a:	f091 0f00 	teqne	r1, #0
 8000e4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e52:	d014      	beq.n	8000e7e <__aeabi_fmul+0x15e>
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	d101      	bne.n	8000e5e <__aeabi_fmul+0x13e>
 8000e5a:	0242      	lsls	r2, r0, #9
 8000e5c:	d10f      	bne.n	8000e7e <__aeabi_fmul+0x15e>
 8000e5e:	ea93 0f0c 	teq	r3, ip
 8000e62:	d103      	bne.n	8000e6c <__aeabi_fmul+0x14c>
 8000e64:	024b      	lsls	r3, r1, #9
 8000e66:	bf18      	it	ne
 8000e68:	4608      	movne	r0, r1
 8000e6a:	d108      	bne.n	8000e7e <__aeabi_fmul+0x15e>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e7c:	4770      	bx	lr
 8000e7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e86:	4770      	bx	lr

08000e88 <__aeabi_fdiv>:
 8000e88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e90:	bf1e      	ittt	ne
 8000e92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e96:	ea92 0f0c 	teqne	r2, ip
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d069      	beq.n	8000f74 <__aeabi_fdiv+0xec>
 8000ea0:	eba2 0203 	sub.w	r2, r2, r3
 8000ea4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea8:	0249      	lsls	r1, r1, #9
 8000eaa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eae:	d037      	beq.n	8000f20 <__aeabi_fdiv+0x98>
 8000eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ebc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	bf38      	it	cc
 8000ec4:	005b      	lslcc	r3, r3, #1
 8000ec6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	bf24      	itt	cs
 8000ed2:	1a5b      	subcs	r3, r3, r1
 8000ed4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000edc:	bf24      	itt	cs
 8000ede:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ee6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eea:	bf24      	itt	cs
 8000eec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000efe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	bf18      	it	ne
 8000f06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0a:	d1e0      	bne.n	8000ece <__aeabi_fdiv+0x46>
 8000f0c:	2afd      	cmp	r2, #253	; 0xfd
 8000f0e:	f63f af50 	bhi.w	8000db2 <__aeabi_fmul+0x92>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f18:	bf08      	it	eq
 8000f1a:	f020 0001 	biceq.w	r0, r0, #1
 8000f1e:	4770      	bx	lr
 8000f20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f28:	327f      	adds	r2, #127	; 0x7f
 8000f2a:	bfc2      	ittt	gt
 8000f2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f34:	4770      	bxgt	lr
 8000f36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	3a01      	subs	r2, #1
 8000f40:	e737      	b.n	8000db2 <__aeabi_fmul+0x92>
 8000f42:	f092 0f00 	teq	r2, #0
 8000f46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0040      	lsleq	r0, r0, #1
 8000f4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f52:	3a01      	subeq	r2, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xc2>
 8000f56:	ea40 000c 	orr.w	r0, r0, ip
 8000f5a:	f093 0f00 	teq	r3, #0
 8000f5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f62:	bf02      	ittt	eq
 8000f64:	0049      	lsleq	r1, r1, #1
 8000f66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f6a:	3b01      	subeq	r3, #1
 8000f6c:	d0f9      	beq.n	8000f62 <__aeabi_fdiv+0xda>
 8000f6e:	ea41 010c 	orr.w	r1, r1, ip
 8000f72:	e795      	b.n	8000ea0 <__aeabi_fdiv+0x18>
 8000f74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f78:	ea92 0f0c 	teq	r2, ip
 8000f7c:	d108      	bne.n	8000f90 <__aeabi_fdiv+0x108>
 8000f7e:	0242      	lsls	r2, r0, #9
 8000f80:	f47f af7d 	bne.w	8000e7e <__aeabi_fmul+0x15e>
 8000f84:	ea93 0f0c 	teq	r3, ip
 8000f88:	f47f af70 	bne.w	8000e6c <__aeabi_fmul+0x14c>
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	e776      	b.n	8000e7e <__aeabi_fmul+0x15e>
 8000f90:	ea93 0f0c 	teq	r3, ip
 8000f94:	d104      	bne.n	8000fa0 <__aeabi_fdiv+0x118>
 8000f96:	024b      	lsls	r3, r1, #9
 8000f98:	f43f af4c 	beq.w	8000e34 <__aeabi_fmul+0x114>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e76e      	b.n	8000e7e <__aeabi_fmul+0x15e>
 8000fa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa4:	bf18      	it	ne
 8000fa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000faa:	d1ca      	bne.n	8000f42 <__aeabi_fdiv+0xba>
 8000fac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fb0:	f47f af5c 	bne.w	8000e6c <__aeabi_fmul+0x14c>
 8000fb4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb8:	f47f af3c 	bne.w	8000e34 <__aeabi_fmul+0x114>
 8000fbc:	e75f      	b.n	8000e7e <__aeabi_fmul+0x15e>
 8000fbe:	bf00      	nop

08000fc0 <__gesf2>:
 8000fc0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc4:	e006      	b.n	8000fd4 <__cmpsf2+0x4>
 8000fc6:	bf00      	nop

08000fc8 <__lesf2>:
 8000fc8:	f04f 0c01 	mov.w	ip, #1
 8000fcc:	e002      	b.n	8000fd4 <__cmpsf2+0x4>
 8000fce:	bf00      	nop

08000fd0 <__cmpsf2>:
 8000fd0:	f04f 0c01 	mov.w	ip, #1
 8000fd4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe4:	bf18      	it	ne
 8000fe6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fea:	d011      	beq.n	8001010 <__cmpsf2+0x40>
 8000fec:	b001      	add	sp, #4
 8000fee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff2:	bf18      	it	ne
 8000ff4:	ea90 0f01 	teqne	r0, r1
 8000ff8:	bf58      	it	pl
 8000ffa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ffe:	bf88      	it	hi
 8001000:	17c8      	asrhi	r0, r1, #31
 8001002:	bf38      	it	cc
 8001004:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001008:	bf18      	it	ne
 800100a:	f040 0001 	orrne.w	r0, r0, #1
 800100e:	4770      	bx	lr
 8001010:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001014:	d102      	bne.n	800101c <__cmpsf2+0x4c>
 8001016:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101a:	d105      	bne.n	8001028 <__cmpsf2+0x58>
 800101c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001020:	d1e4      	bne.n	8000fec <__cmpsf2+0x1c>
 8001022:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001026:	d0e1      	beq.n	8000fec <__cmpsf2+0x1c>
 8001028:	f85d 0b04 	ldr.w	r0, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <__aeabi_cfrcmple>:
 8001030:	4684      	mov	ip, r0
 8001032:	4608      	mov	r0, r1
 8001034:	4661      	mov	r1, ip
 8001036:	e7ff      	b.n	8001038 <__aeabi_cfcmpeq>

08001038 <__aeabi_cfcmpeq>:
 8001038:	b50f      	push	{r0, r1, r2, r3, lr}
 800103a:	f7ff ffc9 	bl	8000fd0 <__cmpsf2>
 800103e:	2800      	cmp	r0, #0
 8001040:	bf48      	it	mi
 8001042:	f110 0f00 	cmnmi.w	r0, #0
 8001046:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001048 <__aeabi_fcmpeq>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff fff4 	bl	8001038 <__aeabi_cfcmpeq>
 8001050:	bf0c      	ite	eq
 8001052:	2001      	moveq	r0, #1
 8001054:	2000      	movne	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmplt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffea 	bl	8001038 <__aeabi_cfcmpeq>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmple>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffe0 	bl	8001038 <__aeabi_cfcmpeq>
 8001078:	bf94      	ite	ls
 800107a:	2001      	movls	r0, #1
 800107c:	2000      	movhi	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmpge>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffd2 	bl	8001030 <__aeabi_cfrcmple>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpgt>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffc8 	bl	8001030 <__aeabi_cfrcmple>
 80010a0:	bf34      	ite	cc
 80010a2:	2001      	movcc	r0, #1
 80010a4:	2000      	movcs	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_f2iz>:
 80010ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b4:	d30f      	bcc.n	80010d6 <__aeabi_f2iz+0x2a>
 80010b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010be:	d90d      	bls.n	80010dc <__aeabi_f2iz+0x30>
 80010c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010cc:	fa23 f002 	lsr.w	r0, r3, r2
 80010d0:	bf18      	it	ne
 80010d2:	4240      	negne	r0, r0
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2iz+0x3a>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d105      	bne.n	80010f2 <__aeabi_f2iz+0x46>
 80010e6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ea:	bf08      	it	eq
 80010ec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
	...

08001100 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
	...

08001110 <__late_init>:
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
	...

08001120 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001120:	e7fe      	b.n	8001120 <__default_exit>
 8001122:	bf00      	nop
	...

08001130 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001130:	b4f0      	push	{r4, r5, r6, r7}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001132:	2700      	movs	r7, #0
 8001134:	4e13      	ldr	r6, [pc, #76]	; (8001184 <__init_ram_areas+0x54>)
void __init_ram_areas(void) {
 8001136:	4d14      	ldr	r5, [pc, #80]	; (8001188 <__init_ram_areas+0x58>)
 8001138:	4c14      	ldr	r4, [pc, #80]	; (800118c <__init_ram_areas+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <__init_ram_areas+0x60>)
 800113c:	4915      	ldr	r1, [pc, #84]	; (8001194 <__init_ram_areas+0x64>)
 800113e:	f106 0c70 	add.w	ip, r6, #112	; 0x70
    while (p < rap->clear_area) {
 8001142:	429c      	cmp	r4, r3
 8001144:	d911      	bls.n	800116a <__init_ram_areas+0x3a>
 8001146:	461a      	mov	r2, r3
 8001148:	3904      	subs	r1, #4
      *p = *tp;
 800114a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800114e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8001152:	4294      	cmp	r4, r2
 8001154:	d8f9      	bhi.n	800114a <__init_ram_areas+0x1a>
 8001156:	43da      	mvns	r2, r3
 8001158:	4414      	add	r4, r2
 800115a:	f024 0403 	bic.w	r4, r4, #3
 800115e:	3404      	adds	r4, #4
 8001160:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8001162:	429d      	cmp	r5, r3
 8001164:	d903      	bls.n	800116e <__init_ram_areas+0x3e>
      *p = 0;
 8001166:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 800116a:	429d      	cmp	r5, r3
 800116c:	d8fb      	bhi.n	8001166 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800116e:	4566      	cmp	r6, ip
 8001170:	d005      	beq.n	800117e <__init_ram_areas+0x4e>
 8001172:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 8001176:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 800117a:	3610      	adds	r6, #16
 800117c:	e7e1      	b.n	8001142 <__init_ram_areas+0x12>
#endif
}
 800117e:	bcf0      	pop	{r4, r5, r6, r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	080035c4 	.word	0x080035c4
 8001188:	20001430 	.word	0x20001430
 800118c:	20001430 	.word	0x20001430
 8001190:	20001430 	.word	0x20001430
 8001194:	08003794 	.word	0x08003794
	...

080011a0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 80011a0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 80011a2:	f000 f95d 	bl	8001460 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <halInit+0x20>)
 80011a8:	f000 fdda 	bl	8001d60 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 80011ac:	f000 f830 	bl	8001210 <canInit>
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 80011b0:	f000 f8b6 	bl	8001320 <uartInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80011b4:	f000 ffe4 	bl	8002180 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 80011b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stInit();
 80011bc:	f000 b808 	b.w	80011d0 <stInit>
 80011c0:	080036c0 	.word	0x080036c0
	...

080011d0 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 80011d0:	f000 be16 	b.w	8001e00 <st_lld_init>
	...

080011e0 <stStartAlarm>:
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80011e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->SR     = 0;
 80011e4:	2100      	movs	r1, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80011e6:	2202      	movs	r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80011e8:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80011ea:	6119      	str	r1, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80011ec:	60da      	str	r2, [r3, #12]
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
}
 80011ee:	4770      	bx	lr

080011f0 <stStopAlarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80011f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
 * @api
 */
void stStopAlarm(void) {

  st_lld_stop_alarm();
}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	0000      	movs	r0, r0
	...

08001200 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001204:	6358      	str	r0, [r3, #52]	; 0x34
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
}
 8001206:	4770      	bx	lr
	...

08001210 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 8001210:	f000 baee 	b.w	80017f0 <can_lld_init>
	...

08001220 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 8001220:	b430      	push	{r4, r5}

  canp->state       = CAN_STOP;
  canp->config      = NULL;
 8001222:	2100      	movs	r1, #0
  canp->state       = CAN_STOP;
 8001224:	2401      	movs	r4, #1
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
#if CAN_ENFORCE_USE_CALLBACKS == FALSE
  osalEventObjectInit(&canp->rxfull_event);
 8001226:	f100 0218 	add.w	r2, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800122a:	f100 031c 	add.w	r3, r0, #28
  osalEventObjectInit(&canp->error_event);
 800122e:	f100 0520 	add.w	r5, r0, #32
  canp->state       = CAN_STOP;
 8001232:	7004      	strb	r4, [r0, #0]
  canp->config      = NULL;
 8001234:	6041      	str	r1, [r0, #4]
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 8001236:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800123a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800123e:	6182      	str	r2, [r0, #24]
 8001240:	61c3      	str	r3, [r0, #28]
  osalThreadQueueObjectInit(&canp->txqueue);
 8001242:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 8001246:	f100 0310 	add.w	r3, r0, #16
 800124a:	e9c0 5408 	strd	r5, r4, [r0, #32]
  canp->error_cb    = NULL;
#if CAN_USE_SLEEP_MODE == TRUE
  canp->wakeup_cb   = NULL;
#endif
#endif /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
}
 800124e:	bc30      	pop	{r4, r5}
 8001250:	6281      	str	r1, [r0, #40]	; 0x28
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
  tqp->prev = (thread_t *)tqp;
 8001252:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8001256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800125a:	4770      	bx	lr
 800125c:	0000      	movs	r0, r0
	...

08001260 <canStart>:
 * @param[in] config    pointer to the @p CANConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void canStart(CANDriver *canp, const CANConfig *config) {
 8001260:	b510      	push	{r4, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001262:	2320      	movs	r3, #32
 8001264:	4604      	mov	r4, r0
 8001266:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
 800126a:	2302      	movs	r3, #2
  canp->config = config;
 800126c:	6041      	str	r1, [r0, #4]
  canp->state = CAN_STARTING;
 800126e:	7003      	strb	r3, [r0, #0]

  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
  can_lld_start(canp);
 8001270:	f000 fae6 	bl	8001840 <can_lld_start>

  /* The driver finally goes into the ready state.*/
  canp->state = CAN_READY;
 8001274:	2203      	movs	r2, #3
 8001276:	2300      	movs	r3, #0
 8001278:	7022      	strb	r2, [r4, #0]
 800127a:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800127e:	bd10      	pop	{r4, pc}

08001280 <canTransmitTimeout>:
 * @api
 */
msg_t canTransmitTimeout(CANDriver *canp,
                         canmbx_t mailbox,
                         const CANTxFrame *ctfp,
                         sysinterval_t timeout) {
 8001280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001284:	461e      	mov	r6, r3
 8001286:	4604      	mov	r4, r0
 8001288:	460f      	mov	r7, r1
 800128a:	4690      	mov	r8, r2
 800128c:	2320      	movs	r3, #32
 800128e:	f383 8811 	msr	BASEPRI, r3
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
  /*lint -restore*/
   msg_t msg = osalThreadEnqueueTimeoutS(&canp->txqueue, timeout);
 8001292:	f100 0508 	add.w	r5, r0, #8
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 8001296:	7823      	ldrb	r3, [r4, #0]
 8001298:	2b04      	cmp	r3, #4
 800129a:	d004      	beq.n	80012a6 <canTransmitTimeout+0x26>
 800129c:	4639      	mov	r1, r7
 800129e:	4620      	mov	r0, r4
 80012a0:	f000 faf6 	bl	8001890 <can_lld_is_tx_empty>
 80012a4:	b950      	cbnz	r0, 80012bc <canTransmitTimeout+0x3c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 80012a6:	4631      	mov	r1, r6
 80012a8:	4628      	mov	r0, r5
 80012aa:	f001 fae9 	bl	8002880 <chThdEnqueueTimeoutS>
    if (msg != MSG_OK) {
 80012ae:	2800      	cmp	r0, #0
 80012b0:	d0f1      	beq.n	8001296 <canTransmitTimeout+0x16>
 80012b2:	2300      	movs	r3, #0
 80012b4:	f383 8811 	msr	BASEPRI, r3
    }
  }
  can_lld_transmit(canp, mailbox, ctfp);
  osalSysUnlock();
  return MSG_OK;
}
 80012b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  can_lld_transmit(canp, mailbox, ctfp);
 80012bc:	4620      	mov	r0, r4
 80012be:	4642      	mov	r2, r8
 80012c0:	4639      	mov	r1, r7
 80012c2:	f000 fb05 	bl	80018d0 <can_lld_transmit>
 80012c6:	2000      	movs	r0, #0
 80012c8:	f380 8811 	msr	BASEPRI, r0
}
 80012cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080012d0 <canReceiveTimeout>:
 * @api
 */
msg_t canReceiveTimeout(CANDriver *canp,
                        canmbx_t mailbox,
                        CANRxFrame *crfp,
                        sysinterval_t timeout) {
 80012d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d4:	461e      	mov	r6, r3
 80012d6:	4604      	mov	r4, r0
 80012d8:	460f      	mov	r7, r1
 80012da:	4690      	mov	r8, r2
 80012dc:	2320      	movs	r3, #32
 80012de:	f383 8811 	msr	BASEPRI, r3
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
  /*lint -restore*/
    msg_t msg = osalThreadEnqueueTimeoutS(&canp->rxqueue, timeout);
 80012e2:	f100 0510 	add.w	r5, r0, #16
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 80012e6:	7823      	ldrb	r3, [r4, #0]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d004      	beq.n	80012f6 <canReceiveTimeout+0x26>
 80012ec:	4639      	mov	r1, r7
 80012ee:	4620      	mov	r0, r4
 80012f0:	f000 fb26 	bl	8001940 <can_lld_is_rx_nonempty>
 80012f4:	b950      	cbnz	r0, 800130c <canReceiveTimeout+0x3c>
 80012f6:	4631      	mov	r1, r6
 80012f8:	4628      	mov	r0, r5
 80012fa:	f001 fac1 	bl	8002880 <chThdEnqueueTimeoutS>
    if (msg != MSG_OK) {
 80012fe:	2800      	cmp	r0, #0
 8001300:	d0f1      	beq.n	80012e6 <canReceiveTimeout+0x16>
 8001302:	2300      	movs	r3, #0
 8001304:	f383 8811 	msr	BASEPRI, r3
    }
  }
  can_lld_receive(canp, mailbox, crfp);
  osalSysUnlock();
  return MSG_OK;
}
 8001308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  can_lld_receive(canp, mailbox, crfp);
 800130c:	4620      	mov	r0, r4
 800130e:	4642      	mov	r2, r8
 8001310:	4639      	mov	r1, r7
 8001312:	f000 fb35 	bl	8001980 <can_lld_receive>
 8001316:	2000      	movs	r0, #0
 8001318:	f380 8811 	msr	BASEPRI, r0
}
 800131c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001320 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 8001320:	f000 be5e 	b.w	8001fe0 <uart_lld_init>
	...

08001330 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
  uartp->txstate    = UART_TX_IDLE;
 8001330:	2300      	movs	r3, #0
  uartp->state      = UART_STOP;
 8001332:	2201      	movs	r2, #1
  uartp->txstate    = UART_TX_IDLE;
 8001334:	7043      	strb	r3, [r0, #1]
  uartp->state      = UART_STOP;
 8001336:	7002      	strb	r2, [r0, #0]
  uartp->rxstate    = UART_RX_IDLE;
 8001338:	7083      	strb	r3, [r0, #2]
  uartp->config     = NULL;
 800133a:	6043      	str	r3, [r0, #4]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <uartStart>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] config    pointer to the @p UARTConfig object
 *
 * @api
 */
void uartStart(UARTDriver *uartp, const UARTConfig *config) {
 8001340:	b510      	push	{r4, lr}
 8001342:	2320      	movs	r3, #32
 8001344:	4604      	mov	r4, r0
 8001346:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 800134a:	6041      	str	r1, [r0, #4]
  uart_lld_start(uartp);
 800134c:	f000 fe60 	bl	8002010 <uart_lld_start>
  uartp->state = UART_READY;
 8001350:	2202      	movs	r2, #2
 8001352:	2300      	movs	r3, #0
 8001354:	7022      	strb	r2, [r4, #0]
 8001356:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800135a:	bd10      	pop	{r4, pc}
 800135c:	0000      	movs	r0, r0
	...

08001360 <uartStartReceive>:
 * @param[in] n         number of data frames to receive
 * @param[in] rxbuf     the pointer to the receive buffer
 *
 * @api
 */
void uartStartReceive(UARTDriver *uartp, size_t n, void *rxbuf) {
 8001360:	b510      	push	{r4, lr}
 8001362:	2320      	movs	r3, #32
 8001364:	4604      	mov	r4, r0
 8001366:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "is active");
  osalDbgAssert(uartp->rxstate != UART_RX_ACTIVE, "rx active");

  uart_lld_start_receive(uartp, n, rxbuf);
 800136a:	f000 fec9 	bl	8002100 <uart_lld_start_receive>
  uartp->rxstate = UART_RX_ACTIVE;
 800136e:	2201      	movs	r2, #1
 8001370:	2300      	movs	r3, #0
 8001372:	70a2      	strb	r2, [r4, #2]
 8001374:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 8001378:	bd10      	pop	{r4, pc}
 800137a:	bf00      	nop
 800137c:	0000      	movs	r0, r0
	...

08001380 <uartStopReceive>:
 8001380:	2220      	movs	r2, #32
 8001382:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(uartp != NULL);

  osalSysLock();
  osalDbgAssert(uartp->state == UART_READY, "not active");

  if (uartp->rxstate == UART_RX_ACTIVE) {
 8001386:	7882      	ldrb	r2, [r0, #2]
 8001388:	2a01      	cmp	r2, #1
 800138a:	d005      	beq.n	8001398 <uartStopReceive+0x18>
    n = uart_lld_stop_receive(uartp);
    uartp->rxstate = UART_RX_IDLE;
  }
  else {
    n = UART_ERR_NOT_ACTIVE;
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	2300      	movs	r3, #0
 8001392:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();

  return n;
}
 8001396:	4770      	bx	lr
size_t uartStopReceive(UARTDriver *uartp) {
 8001398:	b510      	push	{r4, lr}
 800139a:	4604      	mov	r4, r0
    n = uart_lld_stop_receive(uartp);
 800139c:	f000 fec8 	bl	8002130 <uart_lld_stop_receive>
    uartp->rxstate = UART_RX_IDLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	70a3      	strb	r3, [r4, #2]
 80013a4:	2300      	movs	r3, #0
 80013a6:	f383 8811 	msr	BASEPRI, r3
}
 80013aa:	bd10      	pop	{r4, pc}
 80013ac:	0000      	movs	r0, r0
	...

080013b0 <nvicEnableVector>:
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013b0:	2201      	movs	r2, #1
 80013b2:	0943      	lsrs	r3, r0, #5
void nvicEnableVector(uint32_t n, uint32_t prio) {
 80013b4:	b410      	push	{r4}
 80013b6:	009b      	lsls	r3, r3, #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80013b8:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80013bc:	0109      	lsls	r1, r1, #4
 80013be:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 80013c2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013c6:	f000 001f 	and.w	r0, r0, #31
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80013ca:	b2c9      	uxtb	r1, r1
 80013cc:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
 80013d0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80013d4:	fa02 f000 	lsl.w	r0, r2, r0
 80013d8:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
}
 80013dc:	bc10      	pop	{r4}
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80013de:	6018      	str	r0, [r3, #0]
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
	...

080013f0 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80013f0:	2201      	movs	r2, #1
void nvicDisableVector(uint32_t n) {
 80013f2:	b430      	push	{r4, r5}
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80013f4:	2400      	movs	r4, #0
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80013f6:	4906      	ldr	r1, [pc, #24]	; (8001410 <nvicDisableVector+0x20>)
 80013f8:	f000 051f 	and.w	r5, r0, #31
 80013fc:	0943      	lsrs	r3, r0, #5
 80013fe:	40aa      	lsls	r2, r5
 8001400:	3320      	adds	r3, #32
  NVIC->IP[n] = 0U;
 8001402:	4408      	add	r0, r1
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->IP[n] = 0U;
 8001408:	f880 4300 	strb.w	r4, [r0, #768]	; 0x300
#endif
}
 800140c:	bc30      	pop	{r4, r5}
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
	...

08001420 <irqInit>:
 * @notapi
 */
void irqInit(void) {

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8001420:	2106      	movs	r1, #6
void irqInit(void) {
 8001422:	b508      	push	{r3, lr}
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8001424:	4608      	mov	r0, r1
 8001426:	f7ff ffc3 	bl	80013b0 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 800142a:	2106      	movs	r1, #6
 800142c:	2007      	movs	r0, #7
 800142e:	f7ff ffbf 	bl	80013b0 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8001432:	2106      	movs	r1, #6
 8001434:	2008      	movs	r0, #8
 8001436:	f7ff ffbb 	bl	80013b0 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 800143a:	2106      	movs	r1, #6
 800143c:	2009      	movs	r0, #9
 800143e:	f7ff ffb7 	bl	80013b0 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8001442:	2106      	movs	r1, #6
 8001444:	200a      	movs	r0, #10
 8001446:	f7ff ffb3 	bl	80013b0 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 800144a:	2106      	movs	r1, #6
 800144c:	2017      	movs	r0, #23
 800144e:	f7ff ffaf 	bl	80013b0 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
#endif
}
 8001452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8001456:	2106      	movs	r1, #6
 8001458:	2028      	movs	r0, #40	; 0x28
 800145a:	f7ff bfa9 	b.w	80013b0 <nvicEnableVector>
 800145e:	bf00      	nop

08001460 <hal_lld_init>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	2200      	movs	r2, #0
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <hal_lld_init+0x48>)
void hal_lld_init(void) {
 8001468:	b510      	push	{r4, lr}
  rccResetAPB1(0xFFFFFFFF);
 800146a:	691c      	ldr	r4, [r3, #16]
 800146c:	6118      	str	r0, [r3, #16]
 800146e:	691c      	ldr	r4, [r3, #16]
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	691c      	ldr	r4, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8001474:	68dc      	ldr	r4, [r3, #12]
 8001476:	60d8      	str	r0, [r3, #12]
 8001478:	68d8      	ldr	r0, [r3, #12]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	68da      	ldr	r2, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(true);
 800147e:	69da      	ldr	r2, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8001480:	490a      	ldr	r1, [pc, #40]	; (80014ac <hal_lld_init+0x4c>)
  rccEnablePWRInterface(true);
 8001482:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001486:	61da      	str	r2, [r3, #28]
 8001488:	69da      	ldr	r2, [r3, #28]
  rccEnableBKPInterface(true);
 800148a:	69da      	ldr	r2, [r3, #28]
 800148c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001490:	61da      	str	r2, [r3, #28]
 8001492:	69db      	ldr	r3, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 8001494:	680b      	ldr	r3, [r1, #0]
 8001496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149a:	600b      	str	r3, [r1, #0]
  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800149c:	f000 fbb8 	bl	8001c10 <dmaInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 80014a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  irqInit();
 80014a4:	f7ff bfbc 	b.w	8001420 <irqInit>
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40007000 	.word	0x40007000

080014b0 <stm32_clock_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <stm32_clock_init+0x70>)
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80014b2:	461a      	mov	r2, r3
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80014b4:	6819      	ldr	r1, [r3, #0]
 80014b6:	f041 0101 	orr.w	r1, r1, #1
 80014ba:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	0798      	lsls	r0, r3, #30
 80014c0:	d5fc      	bpl.n	80014bc <stm32_clock_init+0xc>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80014c2:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80014c4:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80014c6:	4916      	ldr	r1, [pc, #88]	; (8001520 <stm32_clock_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80014c8:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 80014cc:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80014ce:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80014d0:	684b      	ldr	r3, [r1, #4]
 80014d2:	f013 0f0c 	tst.w	r3, #12
 80014d6:	d1fb      	bne.n	80014d0 <stm32_clock_init+0x20>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80014d8:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80014da:	4a11      	ldr	r2, [pc, #68]	; (8001520 <stm32_clock_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	0399      	lsls	r1, r3, #14
 80014e6:	d5fc      	bpl.n	80014e2 <stm32_clock_init+0x32>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80014e8:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <stm32_clock_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 80014ec:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80014f0:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 80014f2:	6813      	ldr	r3, [r2, #0]
 80014f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014f8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80014fa:	680b      	ldr	r3, [r1, #0]
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	d5fc      	bpl.n	80014fa <stm32_clock_init+0x4a>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001500:	2212      	movs	r2, #18
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <stm32_clock_init+0x74>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8001504:	4808      	ldr	r0, [pc, #32]	; (8001528 <stm32_clock_init+0x78>)
 8001506:	6048      	str	r0, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8001508:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800150a:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <stm32_clock_init+0x70>)
  RCC->CFGR |= STM32_SW;
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001514:	6853      	ldr	r3, [r2, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d1fa      	bne.n	8001514 <stm32_clock_init+0x64>

#if !STM32_HSI_ENABLED
  RCC->CR &= ~RCC_CR_HSION;
#endif
#endif /* !STM32_NO_INIT */
}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000
 8001524:	40022000 	.word	0x40022000
 8001528:	001d6400 	.word	0x001d6400
 800152c:	00000000 	.word	0x00000000

08001530 <can_lld_set_filters.constprop.4>:
 * @param[in] cfp       pointer to the filters array, can be @p NULL if
 *                      (num == 0)
 *
 * @notapi
 */
static void can_lld_set_filters(CANDriver* canp,
 8001530:	b4f0      	push	{r4, r5, r6, r7}
#endif

  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if(canp == &CAND1) {
    rccEnableCAN1(true);
 8001532:	4c3f      	ldr	r4, [pc, #252]	; (8001630 <can_lld_set_filters.constprop.4+0x100>)
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8001534:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <can_lld_set_filters.constprop.4+0x104>)
    rccEnableCAN1(true);
 8001536:	69e5      	ldr	r5, [r4, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    rccEnableCAN1(true);
 800153a:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 800153e:	61e5      	str	r5, [r4, #28]
 8001540:	69e4      	ldr	r4, [r4, #28]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8001542:	4e3d      	ldr	r6, [pc, #244]	; (8001638 <can_lld_set_filters.constprop.4+0x108>)
 8001544:	f8d3 5200 	ldr.w	r5, [r3, #512]	; 0x200
 8001548:	4035      	ands	r5, r6
 800154a:	f045 0501 	orr.w	r5, r5, #1
 800154e:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8001552:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8001556:	4034      	ands	r4, r6
 8001558:	f044 0401 	orr.w	r4, r4, #1
 800155c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8001560:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    /* Filters initialization.*/
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  }
#endif

  if (num > 0) {
 8001564:	2900      	cmp	r1, #0
 8001566:	d047      	beq.n	80015f8 <can_lld_set_filters.constprop.4+0xc8>
    uint32_t i, fmask;

    /* All filters cleared.*/
    canp->can->FA1R = 0;
 8001568:	2400      	movs	r4, #0
    canp->can->FS1R = 0;
    canp->can->FFA1R = 0;

#if STM32_CAN_USE_CAN1
    if(canp == &CAND1) {
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800156a:	4620      	mov	r0, r4
        canp->can->sFilterRegister[i].FR1 = 0;
 800156c:	4625      	mov	r5, r4
    canp->can->FA1R = 0;
 800156e:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    canp->can->FM1R = 0;
 8001572:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    canp->can->FS1R = 0;
 8001576:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    canp->can->FFA1R = 0;
 800157a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
 800157e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 8001582:	3001      	adds	r0, #1
 8001584:	280e      	cmp	r0, #14
        canp->can->sFilterRegister[i].FR1 = 0;
 8001586:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
        canp->can->sFilterRegister[i].FR2 = 0;
 800158a:	f8c4 5244 	str.w	r5, [r4, #580]	; 0x244
      for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800158e:	d1f6      	bne.n	800157e <can_lld_set_filters.constprop.4+0x4e>
 8001590:	2600      	movs	r6, #0
    }
#endif

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
 8001592:	2701      	movs	r7, #1
      if (cfp->mode)
 8001594:	7894      	ldrb	r4, [r2, #2]
      fmask = 1 << cfp->filter;
 8001596:	8810      	ldrh	r0, [r2, #0]
      if (cfp->mode)
 8001598:	f014 0f01 	tst.w	r4, #1
 800159c:	eb03 05c0 	add.w	r5, r3, r0, lsl #3
    for (i = 0; i < num; i++) {
 80015a0:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 80015a4:	fa07 f000 	lsl.w	r0, r7, r0
      if (cfp->mode)
 80015a8:	d005      	beq.n	80015b6 <can_lld_set_filters.constprop.4+0x86>
        canp->can->FM1R |= fmask;
 80015aa:	f8d3 c204 	ldr.w	ip, [r3, #516]	; 0x204
 80015ae:	ea40 0c0c 	orr.w	ip, r0, ip
 80015b2:	f8c3 c204 	str.w	ip, [r3, #516]	; 0x204
      if (cfp->scale)
 80015b6:	f014 0f02 	tst.w	r4, #2
 80015ba:	d005      	beq.n	80015c8 <can_lld_set_filters.constprop.4+0x98>
        canp->can->FS1R |= fmask;
 80015bc:	f8d3 c20c 	ldr.w	ip, [r3, #524]	; 0x20c
 80015c0:	ea40 0c0c 	orr.w	ip, r0, ip
 80015c4:	f8c3 c20c 	str.w	ip, [r3, #524]	; 0x20c
      if (cfp->assignment)
 80015c8:	0764      	lsls	r4, r4, #29
 80015ca:	d504      	bpl.n	80015d6 <can_lld_set_filters.constprop.4+0xa6>
        canp->can->FFA1R |= fmask;
 80015cc:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 80015d0:	4304      	orrs	r4, r0
 80015d2:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      canp->can->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 80015d6:	6854      	ldr	r4, [r2, #4]
    for (i = 0; i < num; i++) {
 80015d8:	42b1      	cmp	r1, r6
      canp->can->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 80015da:	f8c5 4240 	str.w	r4, [r5, #576]	; 0x240
      canp->can->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 80015de:	6894      	ldr	r4, [r2, #8]
      canp->can->FA1R |= fmask;
      cfp++;
 80015e0:	f102 020c 	add.w	r2, r2, #12
      canp->can->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 80015e4:	f8c5 4244 	str.w	r4, [r5, #580]	; 0x244
      canp->can->FA1R |= fmask;
 80015e8:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 80015ec:	ea40 0004 	orr.w	r0, r0, r4
 80015f0:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
    for (i = 0; i < num; i++) {
 80015f4:	d1ce      	bne.n	8001594 <can_lld_set_filters.constprop.4+0x64>
 80015f6:	e00c      	b.n	8001612 <can_lld_set_filters.constprop.4+0xe2>
      canp->can->sFilterRegister[can2sb].FR2 = 0;
    }
#endif
    canp->can->FM1R = 0;
    canp->can->FFA1R = 0;
    canp->can->FS1R = 1;
 80015f8:	2201      	movs	r2, #1
    canp->can->sFilterRegister[0].FR1 = 0;
 80015fa:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
 80015fe:	f8c3 1244 	str.w	r1, [r3, #580]	; 0x244
    canp->can->FM1R = 0;
 8001602:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    canp->can->FFA1R = 0;
 8001606:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
    canp->can->FS1R = 1;
 800160a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    canp->can->FA1R = 1;
 800160e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
      canp->can->FS1R |= 1 << can2sb;
      canp->can->FA1R |= 1 << can2sb;
    }
#endif
  }
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8001612:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if(canp == &CAND1) {
    rccDisableCAN1();
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <can_lld_set_filters.constprop.4+0x100>)
  canp->can->FMR &= ~CAN_FMR_FINIT;
 8001618:	f021 0101 	bic.w	r1, r1, #1
 800161c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    rccDisableCAN1();
 8001620:	69d3      	ldr	r3, [r2, #28]
#if STM32_CAN_USE_CAN3
  if(canp == &CAND3) {
    rccDisableCAN3();
  }
#endif
}
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
    rccDisableCAN1();
 8001624:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	69d3      	ldr	r3, [r2, #28]
}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	20000830 	.word	0x20000830
 8001638:	ffff0000 	.word	0xffff0000
 800163c:	00000000 	.word	0x00000000

08001640 <Vector8C>:
static void can_lld_tx_handler(CANDriver *canp) {
  uint32_t tsr;
  eventflags_t flags;

  /* Clearing IRQ sources.*/
  tsr = canp->can->TSR;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <Vector8C+0x64>)
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8001642:	b510      	push	{r4, lr}
  tsr = canp->can->TSR;
 8001644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001646:	6893      	ldr	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 8001648:	f013 0401 	ands.w	r4, r3, #1
  canp->can->TSR = tsr;
 800164c:	6093      	str	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800164e:	d005      	beq.n	800165c <Vector8C+0x1c>
      flags |= CAN_MAILBOX_TO_MASK(1U);
 8001650:	f013 0f0c 	tst.w	r3, #12
 8001654:	bf14      	ite	ne
 8001656:	f44f 3480 	movne.w	r4, #65536	; 0x10000
 800165a:	2401      	moveq	r4, #1
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 800165c:	05d9      	lsls	r1, r3, #23
 800165e:	d506      	bpl.n	800166e <Vector8C+0x2e>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 8001660:	f413 6f40 	tst.w	r3, #3072	; 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8001664:	bf14      	ite	ne
 8001666:	f444 3400 	orrne.w	r4, r4, #131072	; 0x20000
      flags |= CAN_MAILBOX_TO_MASK(2U);
 800166a:	f044 0402 	orreq.w	r4, r4, #2
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 800166e:	03da      	lsls	r2, r3, #15
 8001670:	d506      	bpl.n	8001680 <Vector8C+0x40>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 8001672:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 8001676:	bf14      	ite	ne
 8001678:	f444 2480 	orrne.w	r4, r4, #262144	; 0x40000
      flags |= CAN_MAILBOX_TO_MASK(3U);
 800167c:	f044 0404 	orreq.w	r4, r4, #4
 8001680:	2320      	movs	r3, #32
 8001682:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8001686:	2100      	movs	r1, #0
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <Vector8C+0x68>)
 800168a:	f001 f911 	bl	80028b0 <chThdDequeueAllI>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800168e:	4621      	mov	r1, r4
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <Vector8C+0x6c>)
 8001692:	f001 f975 	bl	8002980 <chEvtBroadcastFlagsI>
 8001696:	2300      	movs	r3, #0
 8001698:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800169c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80016a0:	f001 ba5e 	b.w	8002b60 <_port_irq_epilogue>
 80016a4:	20000830 	.word	0x20000830
 80016a8:	20000838 	.word	0x20000838
 80016ac:	2000084c 	.word	0x2000084c

080016b0 <Vector90>:
/**
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 80016b0:	b538      	push	{r3, r4, r5, lr}
  rf0r = canp->can->RF0R;
 80016b2:	4c16      	ldr	r4, [pc, #88]	; (800170c <Vector90+0x5c>)
 80016b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016b6:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 80016b8:	07aa      	lsls	r2, r5, #30
 80016ba:	d111      	bne.n	80016e0 <Vector90+0x30>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 80016bc:	06eb      	lsls	r3, r5, #27
 80016be:	d50b      	bpl.n	80016d8 <Vector90+0x28>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 80016c0:	2110      	movs	r1, #16
 80016c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016c4:	2320      	movs	r3, #32
 80016c6:	60d1      	str	r1, [r2, #12]
 80016c8:	f383 8811 	msr	BASEPRI, r3
 80016cc:	4810      	ldr	r0, [pc, #64]	; (8001710 <Vector90+0x60>)
 80016ce:	f001 f957 	bl	8002980 <chEvtBroadcastFlagsI>
 80016d2:	2300      	movs	r3, #0
 80016d4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80016d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80016dc:	f001 ba40 	b.w	8002b60 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	2120      	movs	r1, #32
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	f381 8811 	msr	BASEPRI, r1
  chThdDequeueAllI(tqp, msg);
 80016ee:	2100      	movs	r1, #0
 80016f0:	f104 0010 	add.w	r0, r4, #16
 80016f4:	f001 f8dc 	bl	80028b0 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 80016f8:	f104 0018 	add.w	r0, r4, #24
 80016fc:	2101      	movs	r1, #1
 80016fe:	f001 f93f 	bl	8002980 <chEvtBroadcastFlagsI>
 8001702:	2300      	movs	r3, #0
 8001704:	f383 8811 	msr	BASEPRI, r3
 8001708:	e7d8      	b.n	80016bc <Vector90+0xc>
 800170a:	bf00      	nop
 800170c:	20000830 	.word	0x20000830
 8001710:	20000850 	.word	0x20000850
	...

08001720 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8001720:	b538      	push	{r3, r4, r5, lr}
  rf1r = canp->can->RF1R;
 8001722:	4c16      	ldr	r4, [pc, #88]	; (800177c <Vector94+0x5c>)
 8001724:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001726:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8001728:	07aa      	lsls	r2, r5, #30
 800172a:	d111      	bne.n	8001750 <Vector94+0x30>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800172c:	06eb      	lsls	r3, r5, #27
 800172e:	d50b      	bpl.n	8001748 <Vector94+0x28>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8001730:	2110      	movs	r1, #16
 8001732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001734:	2320      	movs	r3, #32
 8001736:	6111      	str	r1, [r2, #16]
 8001738:	f383 8811 	msr	BASEPRI, r3
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <Vector94+0x60>)
 800173e:	f001 f91f 	bl	8002980 <chEvtBroadcastFlagsI>
 8001742:	2300      	movs	r3, #0
 8001744:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 8001748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800174c:	f001 ba08 	b.w	8002b60 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	2120      	movs	r1, #32
 8001754:	f022 0210 	bic.w	r2, r2, #16
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	f381 8811 	msr	BASEPRI, r1
  chThdDequeueAllI(tqp, msg);
 800175e:	2100      	movs	r1, #0
 8001760:	f104 0010 	add.w	r0, r4, #16
 8001764:	f001 f8a4 	bl	80028b0 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 8001768:	f104 0018 	add.w	r0, r4, #24
 800176c:	2102      	movs	r1, #2
 800176e:	f001 f907 	bl	8002980 <chEvtBroadcastFlagsI>
 8001772:	2300      	movs	r3, #0
 8001774:	f383 8811 	msr	BASEPRI, r3
 8001778:	e7d8      	b.n	800172c <Vector94+0xc>
 800177a:	bf00      	nop
 800177c:	20000830 	.word	0x20000830
 8001780:	20000850 	.word	0x20000850
	...

08001790 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8001790:	b538      	push	{r3, r4, r5, lr}
  msr = canp->can->MSR;
 8001792:	4d15      	ldr	r5, [pc, #84]	; (80017e8 <Vector98+0x58>)
 8001794:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001796:	685c      	ldr	r4, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 8001798:	0722      	lsls	r2, r4, #28
  canp->can->MSR = msr;
 800179a:	605c      	str	r4, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 800179c:	d411      	bmi.n	80017c2 <Vector98+0x32>
  if (msr & CAN_MSR_ERRI) {
 800179e:	0763      	lsls	r3, r4, #29
 80017a0:	d50b      	bpl.n	80017ba <Vector98+0x2a>
    uint32_t esr = canp->can->ESR;
 80017a2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80017a4:	2320      	movs	r3, #32
 80017a6:	6991      	ldr	r1, [r2, #24]
 80017a8:	f383 8811 	msr	BASEPRI, r3
 80017ac:	480f      	ldr	r0, [pc, #60]	; (80017ec <Vector98+0x5c>)
 80017ae:	0409      	lsls	r1, r1, #16
 80017b0:	f001 f8e6 	bl	8002980 <chEvtBroadcastFlagsI>
 80017b4:	2300      	movs	r3, #0
 80017b6:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 80017ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 80017be:	f001 b9cf 	b.w	8002b60 <_port_irq_epilogue>
    canp->state = CAN_READY;
 80017c2:	2103      	movs	r1, #3
 80017c4:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80017c6:	681a      	ldr	r2, [r3, #0]
    canp->state = CAN_READY;
 80017c8:	f800 1b28 	strb.w	r1, [r0], #40
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80017cc:	f022 0202 	bic.w	r2, r2, #2
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	2320      	movs	r3, #32
 80017d4:	f383 8811 	msr	BASEPRI, r3
 80017d8:	2100      	movs	r1, #0
 80017da:	f001 f8d1 	bl	8002980 <chEvtBroadcastFlagsI>
 80017de:	2300      	movs	r3, #0
 80017e0:	f383 8811 	msr	BASEPRI, r3
 80017e4:	e7db      	b.n	800179e <Vector98+0xe>
 80017e6:	bf00      	nop
 80017e8:	20000830 	.word	0x20000830
 80017ec:	20000850 	.word	0x20000850

080017f0 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 80017f0:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 80017f2:	4c0e      	ldr	r4, [pc, #56]	; (800182c <can_lld_init+0x3c>)
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff fd13 	bl	8001220 <canObjectInit>
  CAND1.can = CAN1;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <can_lld_init+0x40>)
#if defined(STM32_CAN1_UNIFIED_NUMBER)
    nvicEnableVector(STM32_CAN1_UNIFIED_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
#else
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 80017fc:	210b      	movs	r1, #11
 80017fe:	2013      	movs	r0, #19
  CAND1.can = CAN1;
 8001800:	62e3      	str	r3, [r4, #44]	; 0x2c
    nvicEnableVector(STM32_CAN1_TX_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8001802:	f7ff fdd5 	bl	80013b0 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX0_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8001806:	210b      	movs	r1, #11
 8001808:	2014      	movs	r0, #20
 800180a:	f7ff fdd1 	bl	80013b0 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_RX1_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 800180e:	210b      	movs	r1, #11
 8001810:	2015      	movs	r0, #21
 8001812:	f7ff fdcd 	bl	80013b0 <nvicEnableVector>
    nvicEnableVector(STM32_CAN1_SCE_NUMBER, STM32_CAN_CAN1_IRQ_PRIORITY);
 8001816:	210b      	movs	r1, #11
 8001818:	2016      	movs	r0, #22
 800181a:	f7ff fdc9 	bl	80013b0 <nvicEnableVector>
#if STM32_HAS_CAN3
#if STM32_CAN_USE_CAN3
  can_lld_set_filters(&CAND3, STM32_CAN3_MAX_FILTERS, 0, NULL);
#endif
#endif
}
 800181e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  can_lld_set_filters(&CAND1, STM32_CAN_MAX_FILTERS, 0, NULL);
 8001822:	2200      	movs	r2, #0
 8001824:	200e      	movs	r0, #14
 8001826:	4611      	mov	r1, r2
 8001828:	f7ff be82 	b.w	8001530 <can_lld_set_filters.constprop.4>
 800182c:	20000830 	.word	0x20000830
 8001830:	40006400 	.word	0x40006400
	...

08001840 <can_lld_start>:
 */
void can_lld_start(CANDriver *canp) {

  /* Clock activation.*/
#if STM32_CAN_USE_CAN1
  if (&CAND1 == canp) {
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <can_lld_start+0x44>)
void can_lld_start(CANDriver *canp) {
 8001842:	b510      	push	{r4, lr}
  if (&CAND1 == canp) {
 8001844:	4298      	cmp	r0, r3
void can_lld_start(CANDriver *canp) {
 8001846:	4604      	mov	r4, r0
  if (&CAND1 == canp) {
 8001848:	d015      	beq.n	8001876 <can_lld_start+0x36>
    rccEnableCAN3(true);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
 800184a:	2201      	movs	r2, #1
 800184c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800184e:	601a      	str	r2, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	07d1      	lsls	r1, r2, #31
 8001854:	d407      	bmi.n	8001866 <can_lld_start+0x26>
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001856:	2101      	movs	r1, #1
 8001858:	2008      	movs	r0, #8
 800185a:	f000 fe71 	bl	8002540 <chSchGoSleepTimeoutS>
 800185e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	07d2      	lsls	r2, r2, #31
 8001864:	d5f7      	bpl.n	8001856 <can_lld_start+0x16>
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
 8001866:	6862      	ldr	r2, [r4, #4]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#else
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <can_lld_start+0x48>)
  canp->can->BTR = canp->config->btr;
 800186a:	6850      	ldr	r0, [r2, #4]
  canp->can->MCR = canp->config->mcr;
 800186c:	6812      	ldr	r2, [r2, #0]
  canp->can->BTR = canp->config->btr;
 800186e:	61d8      	str	r0, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 8001870:	601a      	str	r2, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8001872:	6159      	str	r1, [r3, #20]
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#endif
}
 8001874:	bd10      	pop	{r4, pc}
    rccEnableCAN1(true);
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <can_lld_start+0x4c>)
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800187e:	61da      	str	r2, [r3, #28]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	e7e2      	b.n	800184a <can_lld_start+0xa>
 8001884:	20000830 	.word	0x20000830
 8001888:	0001875b 	.word	0x0001875b
 800188c:	40021000 	.word	0x40021000

08001890 <can_lld_is_tx_empty>:
 *
 * @notapi
 */
bool can_lld_is_tx_empty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
 8001890:	2903      	cmp	r1, #3
 8001892:	d81a      	bhi.n	80018ca <can_lld_is_tx_empty+0x3a>
 8001894:	e8df f001 	tbb	[pc, r1]
 8001898:	02070c11 	.word	0x02070c11
  case 1:
    return (canp->can->TSR & CAN_TSR_TME0) != 0;
  case 2:
    return (canp->can->TSR & CAN_TSR_TME1) != 0;
  case 3:
    return (canp->can->TSR & CAN_TSR_TME2) != 0;
 800189c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800189e:	6898      	ldr	r0, [r3, #8]
 80018a0:	f3c0 7000 	ubfx	r0, r0, #28, #1
 80018a4:	4770      	bx	lr
    return (canp->can->TSR & CAN_TSR_TME1) != 0;
 80018a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018a8:	6898      	ldr	r0, [r3, #8]
 80018aa:	f3c0 60c0 	ubfx	r0, r0, #27, #1
 80018ae:	4770      	bx	lr
    return (canp->can->TSR & CAN_TSR_TME0) != 0;
 80018b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018b2:	6898      	ldr	r0, [r3, #8]
 80018b4:	f3c0 6080 	ubfx	r0, r0, #26, #1
 80018b8:	4770      	bx	lr
    return (canp->can->TSR & CAN_TSR_TME) != 0;
 80018ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f013 5fe0 	tst.w	r3, #469762048	; 0x1c000000
 80018c2:	bf14      	ite	ne
 80018c4:	2001      	movne	r0, #1
 80018c6:	2000      	moveq	r0, #0
 80018c8:	4770      	bx	lr
  default:
    return false;
 80018ca:	2000      	movs	r0, #0
  }
}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <can_lld_transmit>:
                      const CANTxFrame *ctfp) {
  uint32_t tir;
  CAN_TxMailBox_TypeDef *tmbp;

  /* Pointer to a free transmission mailbox.*/
  switch (mailbox) {
 80018d0:	2903      	cmp	r1, #3
 80018d2:	d833      	bhi.n	800193c <can_lld_transmit+0x6c>
 80018d4:	e8df f001 	tbb	[pc, r1]
 80018d8:	021e2a22 	.word	0x021e2a22
    break;
  case 2:
    tmbp = &canp->can->sTxMailBox[1];
    break;
  case 3:
    tmbp = &canp->can->sTxMailBox[2];
 80018dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80018de:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 80018e2:	7810      	ldrb	r0, [r2, #0]
                      const CANTxFrame *ctfp) {
 80018e4:	b410      	push	{r4}
 80018e6:	f3c0 1300 	ubfx	r3, r0, #4, #1
  default:
    return;
  }

  /* Preparing the message.*/
  if (ctfp->IDE)
 80018ea:	0684      	lsls	r4, r0, #26
 80018ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80018f0:	d520      	bpl.n	8001934 <can_lld_transmit+0x64>
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 80018f2:	6854      	ldr	r4, [r2, #4]
 80018f4:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 80018f8:	f043 0304 	orr.w	r3, r3, #4
          CAN_TI0R_IDE;
  else
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
  tmbp->TDTR = ctfp->DLC;
 80018fc:	f000 000f 	and.w	r0, r0, #15
  tmbp->TDLR = ctfp->data32[0];
  tmbp->TDHR = ctfp->data32[1];
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8001900:	f043 0301 	orr.w	r3, r3, #1
  tmbp->TDHR = ctfp->data32[1];
 8001904:	e9d2 4202 	ldrd	r4, r2, [r2, #8]
  tmbp->TDTR = ctfp->DLC;
 8001908:	6048      	str	r0, [r1, #4]
  tmbp->TDLR = ctfp->data32[0];
 800190a:	608c      	str	r4, [r1, #8]
  tmbp->TDHR = ctfp->data32[1];
 800190c:	60ca      	str	r2, [r1, #12]
}
 800190e:	bc10      	pop	{r4}
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8001910:	600b      	str	r3, [r1, #0]
}
 8001912:	4770      	bx	lr
    tmbp = &canp->can->sTxMailBox[1];
 8001914:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001916:	f501 71c8 	add.w	r1, r1, #400	; 0x190
    break;
 800191a:	e7e2      	b.n	80018e2 <can_lld_transmit+0x12>
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 800191c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800191e:	688b      	ldr	r3, [r1, #8]
 8001920:	f3c3 6301 	ubfx	r3, r3, #24, #2
 8001924:	3318      	adds	r3, #24
 8001926:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    break;
 800192a:	e7da      	b.n	80018e2 <can_lld_transmit+0x12>
    tmbp = &canp->can->sTxMailBox[0];
 800192c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800192e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    break;
 8001932:	e7d6      	b.n	80018e2 <can_lld_transmit+0x12>
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
 8001934:	8894      	ldrh	r4, [r2, #4]
 8001936:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
 800193a:	e7df      	b.n	80018fc <can_lld_transmit+0x2c>
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop

08001940 <can_lld_is_rx_nonempty>:
 *
 * @notapi
 */
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
 8001940:	2901      	cmp	r1, #1
 8001942:	d011      	beq.n	8001968 <can_lld_is_rx_nonempty+0x28>
 8001944:	d30a      	bcc.n	800195c <can_lld_is_rx_nonempty+0x1c>
 8001946:	2902      	cmp	r1, #2
 8001948:	d106      	bne.n	8001958 <can_lld_is_rx_nonempty+0x18>
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
  case 1:
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
  case 2:
    return (canp->can->RF1R & CAN_RF1R_FMP1) != 0;
 800194a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800194c:	6918      	ldr	r0, [r3, #16]
 800194e:	f010 0003 	ands.w	r0, r0, #3
 8001952:	bf18      	it	ne
 8001954:	2001      	movne	r0, #1
 8001956:	4770      	bx	lr
  default:
    return false;
 8001958:	2000      	movs	r0, #0
  }
}
 800195a:	4770      	bx	lr
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 800195c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	0792      	lsls	r2, r2, #30
 8001962:	d0f3      	beq.n	800194c <can_lld_is_rx_nonempty+0xc>
 8001964:	2001      	movs	r0, #1
 8001966:	4770      	bx	lr
    return (canp->can->RF0R & CAN_RF0R_FMP0) != 0;
 8001968:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800196a:	68d8      	ldr	r0, [r3, #12]
 800196c:	f010 0003 	ands.w	r0, r0, #3
 8001970:	bf18      	it	ne
 8001972:	2001      	movne	r0, #1
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
	...

08001980 <can_lld_receive>:
 *
 * @notapi
 */
void can_lld_receive(CANDriver *canp,
                     canmbx_t mailbox,
                     CANRxFrame *crfp) {
 8001980:	b470      	push	{r4, r5, r6}
  uint32_t rir, rdtr;

  if (mailbox == CAN_ANY_MAILBOX) {
 8001982:	bb79      	cbnz	r1, 80019e4 <can_lld_receive+0x64>
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 8001984:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001986:	68d9      	ldr	r1, [r3, #12]
 8001988:	0789      	lsls	r1, r1, #30
 800198a:	d044      	beq.n	8001a16 <can_lld_receive+0x96>
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;

    /* Releases the mailbox.*/
    canp->can->RF0R = CAN_RF0R_RFOM0;
 800198c:	2420      	movs	r4, #32
    rir  = canp->can->sFIFOMailBox[0].RIR;
 800198e:	f8d3 01b0 	ldr.w	r0, [r3, #432]	; 0x1b0
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 8001992:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 8001996:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 800199a:	f8d3 51bc 	ldr.w	r5, [r3, #444]	; 0x1bc
 800199e:	e9c2 6504 	strd	r6, r5, [r2, #16]
    canp->can->RF0R = CAN_RF0R_RFOM0;
 80019a2:	60dc      	str	r4, [r3, #12]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 80019a4:	68dc      	ldr	r4, [r3, #12]
 80019a6:	07a5      	lsls	r5, r4, #30
 80019a8:	d103      	bne.n	80019b2 <can_lld_receive+0x32>
      canp->can->IER |= CAN_IER_FMPIE0;
 80019aa:	695c      	ldr	r4, [r3, #20]
 80019ac:	f044 0402 	orr.w	r4, r4, #2
 80019b0:	615c      	str	r4, [r3, #20]
    /* Should not happen, do nothing.*/
    return;
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 80019b2:	7913      	ldrb	r3, [r2, #4]
 80019b4:	0844      	lsrs	r4, r0, #1
 80019b6:	f364 1304 	bfi	r3, r4, #4, #1
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
 80019ba:	0884      	lsrs	r4, r0, #2
 80019bc:	f364 1345 	bfi	r3, r4, #5, #1
 80019c0:	7113      	strb	r3, [r2, #4]
  if (crfp->IDE)
 80019c2:	069b      	lsls	r3, r3, #26
 80019c4:	d52b      	bpl.n	8001a1e <can_lld_receive+0x9e>
    crfp->EID = rir >> 3;
 80019c6:	6893      	ldr	r3, [r2, #8]
 80019c8:	08c0      	lsrs	r0, r0, #3
 80019ca:	f360 031c 	bfi	r3, r0, #0, #29
 80019ce:	6093      	str	r3, [r2, #8]
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 80019d0:	7913      	ldrb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 80019d2:	0a08      	lsrs	r0, r1, #8
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 80019d4:	f361 0303 	bfi	r3, r1, #0, #4
  crfp->TIME = (uint16_t)(rdtr >> 16);
 80019d8:	0c09      	lsrs	r1, r1, #16
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 80019da:	7113      	strb	r3, [r2, #4]
  crfp->FMI = (uint8_t)(rdtr >> 8);
 80019dc:	7010      	strb	r0, [r2, #0]
  crfp->TIME = (uint16_t)(rdtr >> 16);
 80019de:	8051      	strh	r1, [r2, #2]
}
 80019e0:	bc70      	pop	{r4, r5, r6}
 80019e2:	4770      	bx	lr
  switch (mailbox) {
 80019e4:	2901      	cmp	r1, #1
 80019e6:	d020      	beq.n	8001a2a <can_lld_receive+0xaa>
 80019e8:	2902      	cmp	r1, #2
 80019ea:	d1f9      	bne.n	80019e0 <can_lld_receive+0x60>
 80019ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    canp->can->RF1R = CAN_RF1R_RFOM1;
 80019ee:	2420      	movs	r4, #32
    rir  = canp->can->sFIFOMailBox[1].RIR;
 80019f0:	f8d3 01c0 	ldr.w	r0, [r3, #448]	; 0x1c0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 80019f4:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 80019f8:	f8d3 61c8 	ldr.w	r6, [r3, #456]	; 0x1c8
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 80019fc:	f8d3 51cc 	ldr.w	r5, [r3, #460]	; 0x1cc
 8001a00:	e9c2 6504 	strd	r6, r5, [r2, #16]
    canp->can->RF1R = CAN_RF1R_RFOM1;
 8001a04:	611c      	str	r4, [r3, #16]
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 8001a06:	691c      	ldr	r4, [r3, #16]
 8001a08:	07a4      	lsls	r4, r4, #30
 8001a0a:	d1d2      	bne.n	80019b2 <can_lld_receive+0x32>
      canp->can->IER |= CAN_IER_FMPIE1;
 8001a0c:	695c      	ldr	r4, [r3, #20]
 8001a0e:	f044 0410 	orr.w	r4, r4, #16
 8001a12:	615c      	str	r4, [r3, #20]
 8001a14:	e7cd      	b.n	80019b2 <can_lld_receive+0x32>
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 8001a16:	6919      	ldr	r1, [r3, #16]
 8001a18:	078e      	lsls	r6, r1, #30
 8001a1a:	d1e8      	bne.n	80019ee <can_lld_receive+0x6e>
 8001a1c:	e7e0      	b.n	80019e0 <can_lld_receive+0x60>
    crfp->SID = rir >> 21;
 8001a1e:	8913      	ldrh	r3, [r2, #8]
 8001a20:	0d40      	lsrs	r0, r0, #21
 8001a22:	f360 030a 	bfi	r3, r0, #0, #11
 8001a26:	8113      	strh	r3, [r2, #8]
 8001a28:	e7d2      	b.n	80019d0 <can_lld_receive+0x50>
 8001a2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a2c:	e7ae      	b.n	800198c <can_lld_receive+0xc>
 8001a2e:	bf00      	nop

08001a30 <canSTM32SetFilters>:
 *                      (num == 0)
 *
 * @api
 */
void canSTM32SetFilters(CANDriver *canp, uint32_t can2sb,
                        uint32_t num, const CANFilter *cfp) {
 8001a30:	b430      	push	{r4, r5}
#if STM32_CAN_USE_CAN3
  osalDbgAssert(CAND3.state == CAN_STOP, "invalid state");
#endif

#if STM32_CAN_USE_CAN1
  if(canp == &CAND1) {
 8001a32:	4c06      	ldr	r4, [pc, #24]	; (8001a4c <canSTM32SetFilters+0x1c>)
 8001a34:	4284      	cmp	r4, r0
 8001a36:	d001      	beq.n	8001a3c <canSTM32SetFilters+0xc>
#if STM32_CAN_USE_CAN3
  if(canp == &CAND3) {
    can_lld_set_filters(canp, can2sb, num, cfp);
  }
#endif
}
 8001a38:	bc30      	pop	{r4, r5}
 8001a3a:	4770      	bx	lr
 8001a3c:	460d      	mov	r5, r1
 8001a3e:	4611      	mov	r1, r2
    can_lld_set_filters(canp, can2sb, num, cfp);
 8001a40:	4628      	mov	r0, r5
}
 8001a42:	bc30      	pop	{r4, r5}
    can_lld_set_filters(canp, can2sb, num, cfp);
 8001a44:	461a      	mov	r2, r3
 8001a46:	f7ff bd73 	b.w	8001530 <can_lld_set_filters.constprop.4>
 8001a4a:	bf00      	nop
 8001a4c:	20000830 	.word	0x20000830

08001a50 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001a50:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <Vector6C+0x28>)
 8001a54:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <Vector6C+0x2c>)
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	f001 010e 	and.w	r1, r1, #14
 8001a5e:	420a      	tst	r2, r1
 8001a60:	d005      	beq.n	8001a6e <Vector6C+0x1e>
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <Vector6C+0x30>)
 8001a64:	6059      	str	r1, [r3, #4]
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	b10b      	cbz	r3, 8001a6e <Vector6C+0x1e>
 8001a6a:	6850      	ldr	r0, [r2, #4]
 8001a6c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8001a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8001a72:	f001 b875 	b.w	8002b60 <_port_irq_epilogue>
 8001a76:	bf00      	nop
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020008 	.word	0x40020008
 8001a80:	20000860 	.word	0x20000860
	...

08001a90 <Vector70>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <Vector70+0x30>)
 8001a92:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <Vector70+0x34>)
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	0909      	lsrs	r1, r1, #4
 8001a9a:	f001 010e 	and.w	r1, r1, #14
 8001a9e:	420a      	tst	r2, r1
 8001aa0:	d00b      	beq.n	8001aba <Vector70+0x2a>
 8001aa2:	4809      	ldr	r0, [pc, #36]	; (8001ac8 <Vector70+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001aa4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001aa6:	6884      	ldr	r4, [r0, #8]
 8001aa8:	010a      	lsls	r2, r1, #4
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	b10c      	cbz	r4, 8001ab2 <Vector70+0x22>
 8001aae:	68c0      	ldr	r0, [r0, #12]
 8001ab0:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001ab6:	f001 b853 	b.w	8002b60 <_port_irq_epilogue>
 8001aba:	f001 b851 	b.w	8002b60 <_port_irq_epilogue>
 8001abe:	bf00      	nop
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	4002001c 	.word	0x4002001c
 8001ac8:	20000860 	.word	0x20000860
 8001acc:	00000000 	.word	0x00000000

08001ad0 <Vector74>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <Vector74+0x30>)
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <Vector74+0x34>)
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	0a09      	lsrs	r1, r1, #8
 8001ada:	f001 010e 	and.w	r1, r1, #14
 8001ade:	420a      	tst	r2, r1
 8001ae0:	d00b      	beq.n	8001afa <Vector74+0x2a>
 8001ae2:	4809      	ldr	r0, [pc, #36]	; (8001b08 <Vector74+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8001ae4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8001ae6:	6904      	ldr	r4, [r0, #16]
 8001ae8:	020a      	lsls	r2, r1, #8
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	b10c      	cbz	r4, 8001af2 <Vector74+0x22>
 8001aee:	6940      	ldr	r0, [r0, #20]
 8001af0:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001af6:	f001 b833 	b.w	8002b60 <_port_irq_epilogue>
 8001afa:	f001 b831 	b.w	8002b60 <_port_irq_epilogue>
 8001afe:	bf00      	nop
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40020030 	.word	0x40020030
 8001b08:	20000860 	.word	0x20000860
 8001b0c:	00000000 	.word	0x00000000

08001b10 <Vector78>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <Vector78+0x30>)
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <Vector78+0x34>)
 8001b14:	6819      	ldr	r1, [r3, #0]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	0b09      	lsrs	r1, r1, #12
 8001b1a:	f001 010e 	and.w	r1, r1, #14
 8001b1e:	420a      	tst	r2, r1
 8001b20:	d00b      	beq.n	8001b3a <Vector78+0x2a>
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <Vector78+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001b24:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001b26:	6984      	ldr	r4, [r0, #24]
 8001b28:	030a      	lsls	r2, r1, #12
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	b10c      	cbz	r4, 8001b32 <Vector78+0x22>
 8001b2e:	69c0      	ldr	r0, [r0, #28]
 8001b30:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001b36:	f001 b813 	b.w	8002b60 <_port_irq_epilogue>
 8001b3a:	f001 b811 	b.w	8002b60 <_port_irq_epilogue>
 8001b3e:	bf00      	nop
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020044 	.word	0x40020044
 8001b48:	20000860 	.word	0x20000860
 8001b4c:	00000000 	.word	0x00000000

08001b50 <Vector7C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <Vector7C+0x30>)
 8001b52:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <Vector7C+0x34>)
 8001b54:	6819      	ldr	r1, [r3, #0]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	0c09      	lsrs	r1, r1, #16
 8001b5a:	f001 010e 	and.w	r1, r1, #14
 8001b5e:	420a      	tst	r2, r1
 8001b60:	d00b      	beq.n	8001b7a <Vector7C+0x2a>
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <Vector7C+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001b64:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001b66:	6a04      	ldr	r4, [r0, #32]
 8001b68:	040a      	lsls	r2, r1, #16
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	b10c      	cbz	r4, 8001b72 <Vector7C+0x22>
 8001b6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001b70:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001b76:	f000 bff3 	b.w	8002b60 <_port_irq_epilogue>
 8001b7a:	f000 bff1 	b.w	8002b60 <_port_irq_epilogue>
 8001b7e:	bf00      	nop
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020058 	.word	0x40020058
 8001b88:	20000860 	.word	0x20000860
 8001b8c:	00000000 	.word	0x00000000

08001b90 <Vector80>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <Vector80+0x30>)
 8001b92:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <Vector80+0x34>)
 8001b94:	6819      	ldr	r1, [r3, #0]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	0d09      	lsrs	r1, r1, #20
 8001b9a:	f001 010e 	and.w	r1, r1, #14
 8001b9e:	420a      	tst	r2, r1
 8001ba0:	d00b      	beq.n	8001bba <Vector80+0x2a>
 8001ba2:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <Vector80+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001ba4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001ba6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ba8:	050a      	lsls	r2, r1, #20
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	b10c      	cbz	r4, 8001bb2 <Vector80+0x22>
 8001bae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001bb0:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001bb6:	f000 bfd3 	b.w	8002b60 <_port_irq_epilogue>
 8001bba:	f000 bfd1 	b.w	8002b60 <_port_irq_epilogue>
 8001bbe:	bf00      	nop
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	4002006c 	.word	0x4002006c
 8001bc8:	20000860 	.word	0x20000860
 8001bcc:	00000000 	.word	0x00000000

08001bd0 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <Vector84+0x30>)
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <Vector84+0x34>)
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	0e09      	lsrs	r1, r1, #24
 8001bda:	f001 010e 	and.w	r1, r1, #14
 8001bde:	420a      	tst	r2, r1
 8001be0:	d00b      	beq.n	8001bfa <Vector84+0x2a>
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <Vector84+0x38>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8001be4:	b510      	push	{r4, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8001be6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001be8:	060a      	lsls	r2, r1, #24
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	b10c      	cbz	r4, 8001bf2 <Vector84+0x22>
 8001bee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001bf0:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001bf6:	f000 bfb3 	b.w	8002b60 <_port_irq_epilogue>
 8001bfa:	f000 bfb1 	b.w	8002b60 <_port_irq_epilogue>
 8001bfe:	bf00      	nop
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020080 	.word	0x40020080
 8001c08:	20000860 	.word	0x20000860
 8001c0c:	00000000 	.word	0x00000000

08001c10 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8001c10:	b430      	push	{r4, r5}
  int i;

  dma.streams_mask = 0U;
 8001c12:	2400      	movs	r4, #0
 8001c14:	4d0c      	ldr	r5, [pc, #48]	; (8001c48 <dmaInit+0x38>)
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001c16:	4623      	mov	r3, r4
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001c18:	4621      	mov	r1, r4
  dma.isr_mask = 0U;
 8001c1a:	e9c5 4400 	strd	r4, r4, [r5]
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <dmaInit+0x3c>)
 8001c20:	480b      	ldr	r0, [pc, #44]	; (8001c50 <dmaInit+0x40>)
 8001c22:	4c0c      	ldr	r4, [pc, #48]	; (8001c54 <dmaInit+0x44>)
 8001c24:	e001      	b.n	8001c2a <dmaInit+0x1a>
 8001c26:	f852 0c10 	ldr.w	r0, [r2, #-16]
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001c2a:	6001      	str	r1, [r0, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001c2c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001c30:	3301      	adds	r3, #1
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	f102 0210 	add.w	r2, r2, #16
 8001c38:	d1f5      	bne.n	8001c26 <dmaInit+0x16>
  }
  DMA1->IFCR = 0xFFFFFFFFU;
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
#endif
}
 8001c3a:	bc30      	pop	{r4, r5}
  DMA1->IFCR = 0xFFFFFFFFU;
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <dmaInit+0x48>)
 8001c42:	605a      	str	r2, [r3, #4]
}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000898 	.word	0x20000898
 8001c4c:	08003658 	.word	0x08003658
 8001c50:	40020008 	.word	0x40020008
 8001c54:	20000860 	.word	0x20000860
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	00000000 	.word	0x00000000

08001c60 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 8001c62:	2401      	movs	r4, #1
 8001c64:	4e20      	ldr	r6, [pc, #128]	; (8001ce8 <dmaStreamAllocate+0x88>)
 8001c66:	f890 c00e 	ldrb.w	ip, [r0, #14]
 8001c6a:	6835      	ldr	r5, [r6, #0]
 8001c6c:	fa04 f70c 	lsl.w	r7, r4, ip
 8001c70:	423d      	tst	r5, r7
 8001c72:	d12c      	bne.n	8001cce <dmaStreamAllocate+0x6e>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001c74:	4c1d      	ldr	r4, [pc, #116]	; (8001cec <dmaStreamAllocate+0x8c>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001c76:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8001c7a:	f8ce 3004 	str.w	r3, [lr, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8001c7e:	066b      	lsls	r3, r5, #25
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001c80:	f844 203c 	str.w	r2, [r4, ip, lsl #3]
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8001c84:	d105      	bne.n	8001c92 <dmaStreamAllocate+0x32>
    rccEnableDMA1(true);
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <dmaStreamAllocate+0x90>)
 8001c88:	695c      	ldr	r4, [r3, #20]
 8001c8a:	f044 0401 	orr.w	r4, r4, #1
 8001c8e:	615c      	str	r4, [r3, #20]
 8001c90:	695b      	ldr	r3, [r3, #20]
    rccEnableDMA2(true);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001c92:	240e      	movs	r4, #14
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001c94:	f04f 0e00 	mov.w	lr, #0
  dmaStreamDisable(dmastp);
 8001c98:	6843      	ldr	r3, [r0, #4]
 8001c9a:	f8d3 c000 	ldr.w	ip, [r3]
 8001c9e:	f02c 0c0f 	bic.w	ip, ip, #15
 8001ca2:	f8c3 c000 	str.w	ip, [r3]
 8001ca6:	f890 c00d 	ldrb.w	ip, [r0, #13]
 8001caa:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001cae:	6804      	ldr	r4, [r0, #0]
 8001cb0:	f8c4 c004 	str.w	ip, [r4, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001cb4:	f8c3 e000 	str.w	lr, [r3]

  /* Enables the associated IRQ vector if not already enabled and if a
     callback is defined.*/
  if (func != NULL) {
 8001cb8:	b12a      	cbz	r2, 8001cc6 <dmaStreamAllocate+0x66>
    if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8001cba:	6873      	ldr	r3, [r6, #4]
 8001cbc:	6882      	ldr	r2, [r0, #8]
 8001cbe:	4213      	tst	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <dmaStreamAllocate+0x72>
      nvicEnableVector(dmastp->vector, priority);
    }
    dma.isr_mask |= (1U << dmastp->selfindex);
 8001cc2:	433b      	orrs	r3, r7
 8001cc4:	6073      	str	r3, [r6, #4]
  }

  /* Marks the stream as allocated.*/
  dma.streams_mask |= (1U << dmastp->selfindex);
 8001cc6:	433d      	orrs	r5, r7
 8001cc8:	6035      	str	r5, [r6, #0]

  return false;
 8001cca:	2000      	movs	r0, #0
}
 8001ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
 8001cce:	4620      	mov	r0, r4
}
 8001cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	2701      	movs	r7, #1
      nvicEnableVector(dmastp->vector, priority);
 8001cd6:	7bc0      	ldrb	r0, [r0, #15]
 8001cd8:	f7ff fb6a 	bl	80013b0 <nvicEnableVector>
 8001cdc:	e9d6 5300 	ldrd	r5, r3, [r6]
 8001ce0:	7ba2      	ldrb	r2, [r4, #14]
 8001ce2:	4097      	lsls	r7, r2
 8001ce4:	e7ed      	b.n	8001cc2 <dmaStreamAllocate+0x62>
 8001ce6:	bf00      	nop
 8001ce8:	20000898 	.word	0x20000898
 8001cec:	20000860 	.word	0x20000860
 8001cf0:	40021000 	.word	0x40021000
	...

08001d00 <dmaStreamRelease>:
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.streams_mask & (1 << dmastp->selfindex)) != 0U,
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma.streams_mask &= ~(1U << dmastp->selfindex);
 8001d00:	2301      	movs	r3, #1
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 8001d02:	b570      	push	{r4, r5, r6, lr}
  dma.streams_mask &= ~(1U << dmastp->selfindex);
 8001d04:	7b81      	ldrb	r1, [r0, #14]
 8001d06:	4c12      	ldr	r4, [pc, #72]	; (8001d50 <dmaStreamRelease+0x50>)
 8001d08:	408b      	lsls	r3, r1
 8001d0a:	43db      	mvns	r3, r3
  dma.isr_mask &= ~(1U << dmastp->selfindex);
 8001d0c:	e9d4 2500 	ldrd	r2, r5, [r4]

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 8001d10:	6886      	ldr	r6, [r0, #8]
  dma.streams_mask &= ~(1U << dmastp->selfindex);
 8001d12:	401a      	ands	r2, r3
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 8001d14:	4232      	tst	r2, r6
  dma.isr_mask &= ~(1U << dmastp->selfindex);
 8001d16:	ea03 0305 	and.w	r3, r3, r5
 8001d1a:	e9c4 2300 	strd	r2, r3, [r4]
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 8001d1e:	d00f      	beq.n	8001d40 <dmaStreamRelease+0x40>
    nvicDisableVector(dmastp->vector);
  }

  /* Removes the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 8001d20:	2000      	movs	r0, #0
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <dmaStreamRelease+0x54>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;
 8001d24:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 8001d28:	f843 0031 	str.w	r0, [r3, r1, lsl #3]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8001d2c:	0653      	lsls	r3, r2, #25
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;
 8001d2e:	6060      	str	r0, [r4, #4]
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8001d30:	d105      	bne.n	8001d3e <dmaStreamRelease+0x3e>
    rccDisableDMA1();
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <dmaStreamRelease+0x58>)
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	695b      	ldr	r3, [r3, #20]
#if STM32_DMA2_NUM_CHANNELS > 0
  if ((dma.streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
    rccDisableDMA2();
  }
#endif
}
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
 8001d40:	4605      	mov	r5, r0
    nvicDisableVector(dmastp->vector);
 8001d42:	7bc0      	ldrb	r0, [r0, #15]
 8001d44:	f7ff fb54 	bl	80013f0 <nvicDisableVector>
 8001d48:	7ba9      	ldrb	r1, [r5, #14]
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	e7e8      	b.n	8001d20 <dmaStreamRelease+0x20>
 8001d4e:	bf00      	nop
 8001d50:	20000898 	.word	0x20000898
 8001d54:	20000860 	.word	0x20000860
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	00000000 	.word	0x00000000

08001d60 <_pal_lld_init>:
#endif

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, true);
 8001d60:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <_pal_lld_init+0x5c>)
void _pal_lld_init(const PALConfig *config) {
 8001d62:	b430      	push	{r4, r5}
  rccEnableAPB2(APB2_EN_MASK, true);
 8001d64:	6991      	ldr	r1, [r2, #24]

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <_pal_lld_init+0x60>)
  rccEnableAPB2(APB2_EN_MASK, true);
 8001d68:	f041 017d 	orr.w	r1, r1, #125	; 0x7d
 8001d6c:	6191      	str	r1, [r2, #24]
  GPIOA->ODR = config->PAData.odr;
 8001d6e:	6801      	ldr	r1, [r0, #0]
  rccEnableAPB2(APB2_EN_MASK, true);
 8001d70:	6992      	ldr	r2, [r2, #24]
  GPIOA->ODR = config->PAData.odr;
 8001d72:	60d9      	str	r1, [r3, #12]
  GPIOA->CRH = config->PAData.crh;
 8001d74:	6882      	ldr	r2, [r0, #8]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8001d76:	4c13      	ldr	r4, [pc, #76]	; (8001dc4 <_pal_lld_init+0x64>)
  GPIOA->CRH = config->PAData.crh;
 8001d78:	605a      	str	r2, [r3, #4]
  GPIOA->CRL = config->PAData.crl;
 8001d7a:	6845      	ldr	r5, [r0, #4]
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8001d7c:	4912      	ldr	r1, [pc, #72]	; (8001dc8 <_pal_lld_init+0x68>)
  GPIOA->CRL = config->PAData.crl;
 8001d7e:	601d      	str	r5, [r3, #0]
  GPIOB->ODR = config->PBData.odr;
 8001d80:	68c5      	ldr	r5, [r0, #12]
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <_pal_lld_init+0x6c>)
  GPIOB->ODR = config->PBData.odr;
 8001d84:	60e5      	str	r5, [r4, #12]
  GPIOB->CRH = config->PBData.crh;
 8001d86:	6945      	ldr	r5, [r0, #20]
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8001d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  GPIOB->CRH = config->PBData.crh;
 8001d8c:	6065      	str	r5, [r4, #4]
  GPIOB->CRL = config->PBData.crl;
 8001d8e:	6905      	ldr	r5, [r0, #16]
 8001d90:	6025      	str	r5, [r4, #0]
  GPIOC->ODR = config->PCData.odr;
 8001d92:	6984      	ldr	r4, [r0, #24]
 8001d94:	60cc      	str	r4, [r1, #12]
  GPIOC->CRH = config->PCData.crh;
 8001d96:	6a04      	ldr	r4, [r0, #32]
 8001d98:	604c      	str	r4, [r1, #4]
  GPIOC->CRL = config->PCData.crl;
 8001d9a:	69c4      	ldr	r4, [r0, #28]
 8001d9c:	600c      	str	r4, [r1, #0]
  GPIOD->ODR = config->PDData.odr;
 8001d9e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001da0:	60d1      	str	r1, [r2, #12]
  GPIOD->CRH = config->PDData.crh;
 8001da2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001da4:	6051      	str	r1, [r2, #4]
  GPIOD->CRL = config->PDData.crl;
 8001da6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001da8:	6011      	str	r1, [r2, #0]
  GPIOE->ODR = config->PEData.odr;
 8001daa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001dac:	60da      	str	r2, [r3, #12]
  GPIOE->CRH = config->PEData.crh;
 8001dae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001db0:	605a      	str	r2, [r3, #4]
  GPIOE->CRL = config->PEData.crl;
 8001db2:	6b42      	ldr	r2, [r0, #52]	; 0x34
  GPIOG->CRH = config->PGData.crh;
  GPIOG->CRL = config->PGData.crl;
#endif
#endif
#endif
}
 8001db4:	bc30      	pop	{r4, r5}
  GPIOE->CRL = config->PEData.crl;
 8001db6:	601a      	str	r2, [r3, #0]
}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400

08001dd0 <VectorB0>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	0792      	lsls	r2, r2, #30
 8001dd8:	d401      	bmi.n	8001dde <VectorB0+0xe>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001dda:	f000 bec1 	b.w	8002b60 <_port_irq_epilogue>
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001dde:	b510      	push	{r4, lr}
    STM32_ST_TIM->SR = 0U;
 8001de0:	2400      	movs	r4, #0
 8001de2:	2220      	movs	r2, #32
 8001de4:	611c      	str	r4, [r3, #16]
 8001de6:	f382 8811 	msr	BASEPRI, r2
  chSysTimerHandlerI();
 8001dea:	f000 fa31 	bl	8002250 <chSysTimerHandlerI>
 8001dee:	f384 8811 	msr	BASEPRI, r4
}
 8001df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8001df6:	f000 beb3 	b.w	8002b60 <_port_irq_epilogue>
 8001dfa:	bf00      	nop
 8001dfc:	0000      	movs	r0, r0
	...

08001e00 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8001e00:	b470      	push	{r4, r5, r6}
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001e02:	2401      	movs	r4, #1
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  STM32_ST_TIM->CCMR1  = 0;
 8001e08:	2200      	movs	r2, #0
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001e0a:	f648 469f 	movw	r6, #35999	; 0x8c9f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001e0e:	f64f 75ff 	movw	r5, #65535	; 0xffff
  ST_ENABLE_CLOCK();
 8001e12:	490b      	ldr	r1, [pc, #44]	; (8001e40 <st_lld_init+0x40>)
 8001e14:	69c8      	ldr	r0, [r1, #28]
 8001e16:	4320      	orrs	r0, r4
 8001e18:	61c8      	str	r0, [r1, #28]
  ST_ENABLE_STOP();
 8001e1a:	480a      	ldr	r0, [pc, #40]	; (8001e44 <st_lld_init+0x44>)
  ST_ENABLE_CLOCK();
 8001e1c:	69c9      	ldr	r1, [r1, #28]
  ST_ENABLE_STOP();
 8001e1e:	6841      	ldr	r1, [r0, #4]
 8001e20:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001e24:	6041      	str	r1, [r0, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001e26:	629e      	str	r6, [r3, #40]	; 0x28
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001e28:	2108      	movs	r1, #8
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001e2a:	62dd      	str	r5, [r3, #44]	; 0x2c
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001e2c:	201c      	movs	r0, #28
  STM32_ST_TIM->CCMR1  = 0;
 8001e2e:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001e32:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8001e34:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001e36:	615c      	str	r4, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001e38:	601c      	str	r4, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8001e3a:	bc70      	pop	{r4, r5, r6}
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8001e3c:	f7ff bab8 	b.w	80013b0 <nvicEnableVector>
 8001e40:	40021000 	.word	0x40021000
 8001e44:	e0042000 	.word	0xe0042000
	...

08001e50 <usart_stop>:
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 8001e50:	230e      	movs	r3, #14
  dmaStreamDisable(uartp->dmatx);
  
  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
 8001e52:	2100      	movs	r1, #0
static void usart_stop(UARTDriver *uartp) {
 8001e54:	b430      	push	{r4, r5}
  dmaStreamDisable(uartp->dmarx);
 8001e56:	6905      	ldr	r5, [r0, #16]
 8001e58:	686c      	ldr	r4, [r5, #4]
 8001e5a:	6822      	ldr	r2, [r4, #0]
 8001e5c:	f022 020f 	bic.w	r2, r2, #15
 8001e60:	6022      	str	r2, [r4, #0]
 8001e62:	7b6a      	ldrb	r2, [r5, #13]
  dmaStreamDisable(uartp->dmatx);
 8001e64:	6944      	ldr	r4, [r0, #20]
  dmaStreamDisable(uartp->dmarx);
 8001e66:	682d      	ldr	r5, [r5, #0]
 8001e68:	fa03 f202 	lsl.w	r2, r3, r2
 8001e6c:	606a      	str	r2, [r5, #4]
  dmaStreamDisable(uartp->dmatx);
 8001e6e:	6865      	ldr	r5, [r4, #4]
  uartp->usart->CR1 = 0;
 8001e70:	6882      	ldr	r2, [r0, #8]
  dmaStreamDisable(uartp->dmatx);
 8001e72:	6828      	ldr	r0, [r5, #0]
 8001e74:	f020 000f 	bic.w	r0, r0, #15
 8001e78:	6028      	str	r0, [r5, #0]
 8001e7a:	7b65      	ldrb	r5, [r4, #13]
 8001e7c:	6820      	ldr	r0, [r4, #0]
 8001e7e:	40ab      	lsls	r3, r5
 8001e80:	6043      	str	r3, [r0, #4]
  uartp->usart->CR2 = 0;
  uartp->usart->CR3 = 0;
}
 8001e82:	bc30      	pop	{r4, r5}
  uartp->usart->CR1 = 0;
 8001e84:	60d1      	str	r1, [r2, #12]
  uartp->usart->CR2 = 0;
 8001e86:	6111      	str	r1, [r2, #16]
  uartp->usart->CR3 = 0;
 8001e88:	6151      	str	r1, [r2, #20]
}
 8001e8a:	4770      	bx	lr
 8001e8c:	0000      	movs	r0, r0
	...

08001e90 <uart_lld_serve_tx_end_irq>:
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001e90:	070b      	lsls	r3, r1, #28
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8001e92:	b570      	push	{r4, r5, r6, lr}
 8001e94:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001e96:	d418      	bmi.n	8001eca <uart_lld_serve_tx_end_irq+0x3a>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 8001e98:	230e      	movs	r3, #14

  /* A callback is generated, if enabled, after a completed transfer.*/
  _uart_tx1_isr_code(uartp);
 8001e9a:	2502      	movs	r5, #2
  dmaStreamDisable(uartp->dmatx);
 8001e9c:	6962      	ldr	r2, [r4, #20]
  _uart_tx1_isr_code(uartp);
 8001e9e:	6866      	ldr	r6, [r4, #4]
  dmaStreamDisable(uartp->dmatx);
 8001ea0:	6850      	ldr	r0, [r2, #4]
 8001ea2:	6801      	ldr	r1, [r0, #0]
 8001ea4:	f021 010f 	bic.w	r1, r1, #15
 8001ea8:	6001      	str	r1, [r0, #0]
 8001eaa:	7b50      	ldrb	r0, [r2, #13]
 8001eac:	6811      	ldr	r1, [r2, #0]
  _uart_tx1_isr_code(uartp);
 8001eae:	6832      	ldr	r2, [r6, #0]
  dmaStreamDisable(uartp->dmatx);
 8001eb0:	4083      	lsls	r3, r0
 8001eb2:	604b      	str	r3, [r1, #4]
  _uart_tx1_isr_code(uartp);
 8001eb4:	7065      	strb	r5, [r4, #1]
 8001eb6:	b12a      	cbz	r2, 8001ec4 <uart_lld_serve_tx_end_irq+0x34>
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4790      	blx	r2
 8001ebc:	7863      	ldrb	r3, [r4, #1]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d000      	beq.n	8001ec4 <uart_lld_serve_tx_end_irq+0x34>
}
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
  _uart_tx1_isr_code(uartp);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	7063      	strb	r3, [r4, #1]
}
 8001ec8:	bd70      	pop	{r4, r5, r6, pc}
  chSysHalt(reason);
 8001eca:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <uart_lld_serve_tx_end_irq+0x44>)
 8001ecc:	f000 f9b8 	bl	8002240 <chSysHalt>
 8001ed0:	e7e2      	b.n	8001e98 <uart_lld_serve_tx_end_irq+0x8>
 8001ed2:	bf00      	nop
 8001ed4:	080036b4 	.word	0x080036b4
	...

08001ee0 <uart_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001ee0:	070b      	lsls	r3, r1, #28
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8001ee2:	b570      	push	{r4, r5, r6, lr}
 8001ee4:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001ee6:	d433      	bmi.n	8001f50 <uart_lld_serve_rx_end_irq+0x70>
  if (uartp->rxstate == UART_RX_IDLE) {
 8001ee8:	78a3      	ldrb	r3, [r4, #2]
 8001eea:	6862      	ldr	r2, [r4, #4]
 8001eec:	b93b      	cbnz	r3, 8001efe <uart_lld_serve_rx_end_irq+0x1e>
    _uart_rx_idle_code(uartp);
 8001eee:	68d3      	ldr	r3, [r2, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d02c      	beq.n	8001f4e <uart_lld_serve_rx_end_irq+0x6e>
 8001ef4:	8b21      	ldrh	r1, [r4, #24]
 8001ef6:	4620      	mov	r0, r4
}
 8001ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _uart_rx_idle_code(uartp);
 8001efc:	4718      	bx	r3
    dmaStreamDisable(uartp->dmarx);
 8001efe:	210e      	movs	r1, #14
    _uart_rx_complete_isr_code(uartp);
 8001f00:	2602      	movs	r6, #2
    dmaStreamDisable(uartp->dmarx);
 8001f02:	6920      	ldr	r0, [r4, #16]
 8001f04:	6843      	ldr	r3, [r0, #4]
 8001f06:	681d      	ldr	r5, [r3, #0]
 8001f08:	f025 050f 	bic.w	r5, r5, #15
 8001f0c:	601d      	str	r5, [r3, #0]
 8001f0e:	7b45      	ldrb	r5, [r0, #13]
 8001f10:	6800      	ldr	r0, [r0, #0]
 8001f12:	40a9      	lsls	r1, r5
    _uart_rx_complete_isr_code(uartp);
 8001f14:	6895      	ldr	r5, [r2, #8]
    dmaStreamDisable(uartp->dmarx);
 8001f16:	6041      	str	r1, [r0, #4]
    _uart_rx_complete_isr_code(uartp);
 8001f18:	70a6      	strb	r6, [r4, #2]
 8001f1a:	b13d      	cbz	r5, 8001f2c <uart_lld_serve_rx_end_irq+0x4c>
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	47a8      	blx	r5
 8001f20:	78a3      	ldrb	r3, [r4, #2]
 8001f22:	42b3      	cmp	r3, r6
 8001f24:	d113      	bne.n	8001f4e <uart_lld_serve_rx_end_irq+0x6e>
 8001f26:	6923      	ldr	r3, [r4, #16]
 8001f28:	6862      	ldr	r2, [r4, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2500      	movs	r5, #0
  if (uartp->config->rxchar_cb == NULL)
 8001f2e:	68d2      	ldr	r2, [r2, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001f30:	2101      	movs	r1, #1
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8001f32:	42aa      	cmp	r2, r5
 8001f34:	bf14      	ite	ne
 8001f36:	2222      	movne	r2, #34	; 0x22
 8001f38:	2220      	moveq	r2, #32
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001f3a:	68e0      	ldr	r0, [r4, #12]
    _uart_rx_complete_isr_code(uartp);
 8001f3c:	70a5      	strb	r5, [r4, #2]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001f3e:	4302      	orrs	r2, r0
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8001f40:	3418      	adds	r4, #24
 8001f42:	60dc      	str	r4, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8001f44:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8001f46:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	bd70      	pop	{r4, r5, r6, pc}
 8001f50:	4801      	ldr	r0, [pc, #4]	; (8001f58 <uart_lld_serve_rx_end_irq+0x78>)
 8001f52:	f000 f975 	bl	8002240 <chSysHalt>
 8001f56:	e7c7      	b.n	8001ee8 <uart_lld_serve_rx_end_irq+0x8>
 8001f58:	080036b4 	.word	0x080036b4
 8001f5c:	00000000 	.word	0x00000000

08001f60 <VectorD8>:
/**
 * @brief   USART2 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8001f62:	f240 130f 	movw	r3, #271	; 0x10f
  USART_TypeDef *u = uartp->usart;
 8001f66:	4e1b      	ldr	r6, [pc, #108]	; (8001fd4 <VectorD8+0x74>)
 8001f68:	68b4      	ldr	r4, [r6, #8]
  uint32_t cr1 = u->CR1;
 8001f6a:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 8001f6c:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8001f6e:	6862      	ldr	r2, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 8001f70:	421d      	tst	r5, r3
 8001f72:	d01d      	beq.n	8001fb0 <VectorD8+0x50>
    u->SR = ~USART_SR_LBD;
 8001f74:	f46f 7280 	mvn.w	r2, #256	; 0x100
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8001f78:	6873      	ldr	r3, [r6, #4]
    u->SR = ~USART_SR_LBD;
 8001f7a:	6022      	str	r2, [r4, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	b1ba      	cbz	r2, 8001fb0 <VectorD8+0x50>
  sr = u->SR;   /* SR reset step 1.*/
 8001f80:	b2ab      	uxth	r3, r5
    sts |= UART_OVERRUN_ERROR;
 8001f82:	f013 0f08 	tst.w	r3, #8
 8001f86:	bf0c      	ite	eq
 8001f88:	2100      	moveq	r1, #0
 8001f8a:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 8001f8c:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 8001f8e:	bf48      	it	mi
 8001f90:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 8001f94:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 8001f96:	bf48      	it	mi
 8001f98:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 8001f9c:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 8001f9e:	bf48      	it	mi
 8001fa0:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 8001fa4:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 8001fa6:	bf48      	it	mi
 8001fa8:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8001fac:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <VectorD8+0x74>)
 8001fae:	4790      	blx	r2
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8001fb0:	066a      	lsls	r2, r5, #25
 8001fb2:	d50b      	bpl.n	8001fcc <VectorD8+0x6c>
 8001fb4:	067b      	lsls	r3, r7, #25
 8001fb6:	d509      	bpl.n	8001fcc <VectorD8+0x6c>
    u->SR = ~USART_SR_TC;
 8001fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
    _uart_tx2_isr_code(uartp);
 8001fbc:	6873      	ldr	r3, [r6, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001fbe:	4017      	ands	r7, r2
    _uart_tx2_isr_code(uartp);
 8001fc0:	685b      	ldr	r3, [r3, #4]
    u->SR = ~USART_SR_TC;
 8001fc2:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8001fc4:	60e7      	str	r7, [r4, #12]
    _uart_tx2_isr_code(uartp);
 8001fc6:	b10b      	cbz	r3, 8001fcc <VectorD8+0x6c>
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <VectorD8+0x74>)
 8001fca:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD2);

  OSAL_IRQ_EPILOGUE();
}
 8001fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 8001fd0:	f000 bdc6 	b.w	8002b60 <_port_irq_epilogue>
 8001fd4:	200008a0 	.word	0x200008a0
	...

08001fe0 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8001fe0:	b510      	push	{r4, lr}
  UARTD1.dmarx   = STM32_DMA_STREAM(STM32_UART_USART1_RX_DMA_STREAM);
  UARTD1.dmatx   = STM32_DMA_STREAM(STM32_UART_USART1_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART2
  uartObjectInit(&UARTD2);
 8001fe2:	4c07      	ldr	r4, [pc, #28]	; (8002000 <uart_lld_init+0x20>)
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff f9a3 	bl	8001330 <uartObjectInit>
  UARTD2.usart   = USART2;
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8001fea:	2108      	movs	r1, #8
  UARTD2.dmarx   = STM32_DMA_STREAM(STM32_UART_USART2_RX_DMA_STREAM);
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <uart_lld_init+0x24>)
  UARTD2.usart   = USART2;
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <uart_lld_init+0x28>)
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 8001ff0:	f103 0210 	add.w	r2, r3, #16
  UARTD2.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8001ff4:	e9c4 0102 	strd	r0, r1, [r4, #8]
  UARTD2.dmatx   = STM32_DMA_STREAM(STM32_UART_USART2_TX_DMA_STREAM);
 8001ff8:	e9c4 3204 	strd	r3, r2, [r4, #16]
  uartObjectInit(&UARTD6);
  UARTD6.usart   = USART6;
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
#endif
}
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	bf00      	nop
 8002000:	200008a0 	.word	0x200008a0
 8002004:	08003694 	.word	0x08003694
 8002008:	40004400 	.word	0x40004400
 800200c:	00000000 	.word	0x00000000

08002010 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if (uartp->state == UART_STOP) {
 8002012:	7803      	ldrb	r3, [r0, #0]
void uart_lld_start(UARTDriver *uartp) {
 8002014:	4604      	mov	r4, r0
  if (uartp->state == UART_STOP) {
 8002016:	2b01      	cmp	r3, #1
 8002018:	d032      	beq.n	8002080 <uart_lld_start+0x70>
 800201a:	6885      	ldr	r5, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
    uartp->rxbuf = 0;
  }

  uartp->rxstate = UART_RX_IDLE;
 800201c:	2300      	movs	r3, #0
  usart_stop(uartp);
 800201e:	4620      	mov	r0, r4
  uartp->rxstate = UART_RX_IDLE;
 8002020:	70a3      	strb	r3, [r4, #2]
  uartp->txstate = UART_TX_IDLE;
 8002022:	7063      	strb	r3, [r4, #1]
  usart_stop(uartp);
 8002024:	f7ff ff14 	bl	8001e50 <usart_stop>
    fck = STM32_PCLK2 / uartp->config->speed;
 8002028:	6861      	ldr	r1, [r4, #4]
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <uart_lld_start+0xd0>)
 800202c:	694a      	ldr	r2, [r1, #20]
  u->SR = 0;
 800202e:	2600      	movs	r6, #0
    fck = STM32_PCLK2 / uartp->config->speed;
 8002030:	fbb3 f3f2 	udiv	r3, r3, r2
  if (uartp->config->rxchar_cb == NULL)
 8002034:	68ca      	ldr	r2, [r1, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8002036:	2701      	movs	r7, #1
  if (uartp->config->rxchar_cb == NULL)
 8002038:	2a00      	cmp	r2, #0
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 800203a:	bf14      	ite	ne
 800203c:	2022      	movne	r0, #34	; 0x22
 800203e:	2020      	moveq	r0, #32
  u->BRR = fck;
 8002040:	60ab      	str	r3, [r5, #8]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8002042:	6923      	ldr	r3, [r4, #16]
  u->CR1 = uartp->config->cr1 | cr1;
 8002044:	8b0a      	ldrh	r2, [r1, #24]
  (void)u->SR;  /* SR reset step 1.*/
 8002046:	f8d5 c000 	ldr.w	ip, [r5]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800204a:	685b      	ldr	r3, [r3, #4]
  (void)u->DR;  /* SR reset step 2.*/
 800204c:	f8d5 c004 	ldr.w	ip, [r5, #4]
  u->SR = 0;
 8002050:	602e      	str	r6, [r5, #0]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8002052:	8b4e      	ldrh	r6, [r1, #26]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8002054:	8b89      	ldrh	r1, [r1, #28]
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8002056:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 800205a:	f041 01c1 	orr.w	r1, r1, #193	; 0xc1
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 800205e:	612e      	str	r6, [r5, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8002060:	6169      	str	r1, [r5, #20]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8002062:	68e1      	ldr	r1, [r4, #12]
  u->CR1 = uartp->config->cr1 | cr1;
 8002064:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
 8002068:	f042 020c 	orr.w	r2, r2, #12
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 800206c:	3418      	adds	r4, #24
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800206e:	4301      	orrs	r1, r0
  u->CR1 = uartp->config->cr1 | cr1;
 8002070:	60ea      	str	r2, [r5, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8002072:	60dc      	str	r4, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8002074:	605f      	str	r7, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8002076:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	433a      	orrs	r2, r7
 800207c:	601a      	str	r2, [r3, #0]
  usart_start(uartp);
}
 800207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (&UARTD2 == uartp) {
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <uart_lld_start+0xd4>)
 8002082:	4298      	cmp	r0, r3
 8002084:	d015      	beq.n	80020b2 <uart_lld_start+0xa2>
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M)
 8002086:	6863      	ldr	r3, [r4, #4]
 8002088:	8b1b      	ldrh	r3, [r3, #24]
 800208a:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 800208e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002092:	d103      	bne.n	800209c <uart_lld_start+0x8c>
      uartp->dmamode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002094:	68e3      	ldr	r3, [r4, #12]
 8002096:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800209a:	60e3      	str	r3, [r4, #12]
    uartp->rxbuf = 0;
 800209c:	2200      	movs	r2, #0
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 800209e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 80020a2:	68a5      	ldr	r5, [r4, #8]
 80020a4:	6848      	ldr	r0, [r1, #4]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 80020a6:	6859      	ldr	r1, [r3, #4]
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 80020a8:	1d2b      	adds	r3, r5, #4
 80020aa:	6083      	str	r3, [r0, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 80020ac:	608b      	str	r3, [r1, #8]
    uartp->rxbuf = 0;
 80020ae:	8322      	strh	r2, [r4, #24]
 80020b0:	e7b4      	b.n	800201c <uart_lld_start+0xc>
      b = dmaStreamAllocate(uartp->dmarx,
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <uart_lld_start+0xd8>)
 80020b6:	210c      	movs	r1, #12
 80020b8:	6900      	ldr	r0, [r0, #16]
 80020ba:	f7ff fdd1 	bl	8001c60 <dmaStreamAllocate>
      b = dmaStreamAllocate(uartp->dmatx,
 80020be:	4623      	mov	r3, r4
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <uart_lld_start+0xdc>)
 80020c2:	210c      	movs	r1, #12
 80020c4:	6960      	ldr	r0, [r4, #20]
 80020c6:	f7ff fdcb 	bl	8001c60 <dmaStreamAllocate>
      rccEnableUSART2(true);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <uart_lld_start+0xe0>)
      nvicEnableVector(STM32_USART2_NUMBER, STM32_UART_USART2_IRQ_PRIORITY);
 80020cc:	210c      	movs	r1, #12
      rccEnableUSART2(true);
 80020ce:	69da      	ldr	r2, [r3, #28]
      nvicEnableVector(STM32_USART2_NUMBER, STM32_UART_USART2_IRQ_PRIORITY);
 80020d0:	2026      	movs	r0, #38	; 0x26
      rccEnableUSART2(true);
 80020d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020d6:	61da      	str	r2, [r3, #28]
 80020d8:	69db      	ldr	r3, [r3, #28]
      nvicEnableVector(STM32_USART2_NUMBER, STM32_UART_USART2_IRQ_PRIORITY);
 80020da:	f7ff f969 	bl	80013b0 <nvicEnableVector>
 80020de:	e7d2      	b.n	8002086 <uart_lld_start+0x76>
 80020e0:	02255100 	.word	0x02255100
 80020e4:	200008a0 	.word	0x200008a0
 80020e8:	08001ee1 	.word	0x08001ee1
 80020ec:	08001e91 	.word	0x08001e91
 80020f0:	40021000 	.word	0x40021000
	...

08002100 <uart_lld_start_receive>:
 * @param[in] n         number of data frames to send
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void uart_lld_start_receive(UARTDriver *uartp, size_t n, void *rxbuf) {
 8002100:	b4f0      	push	{r4, r5, r6, r7}

  /* Stopping previous activity (idle state).*/
  dmaStreamDisable(uartp->dmarx);
 8002102:	240e      	movs	r4, #14
 8002104:	6905      	ldr	r5, [r0, #16]

  /* RX DMA channel preparation.*/
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
  dmaStreamSetTransactionSize(uartp->dmarx, n);
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 8002106:	68c0      	ldr	r0, [r0, #12]
  dmaStreamDisable(uartp->dmarx);
 8002108:	686b      	ldr	r3, [r5, #4]
 800210a:	682f      	ldr	r7, [r5, #0]
 800210c:	681e      	ldr	r6, [r3, #0]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 800210e:	f040 0082 	orr.w	r0, r0, #130	; 0x82
  dmaStreamDisable(uartp->dmarx);
 8002112:	f026 060f 	bic.w	r6, r6, #15
 8002116:	601e      	str	r6, [r3, #0]
 8002118:	7b6d      	ldrb	r5, [r5, #13]
 800211a:	40ac      	lsls	r4, r5
 800211c:	607c      	str	r4, [r7, #4]
  dmaStreamSetMemory0(uartp->dmarx, rxbuf);
 800211e:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, n);
 8002120:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode    | STM32_DMA_CR_DIR_P2M |
 8002122:	6018      	str	r0, [r3, #0]
                                 STM32_DMA_CR_MINC | STM32_DMA_CR_TCIE);

  /* Starting transfer.*/
  dmaStreamEnable(uartp->dmarx);
 8002124:	681a      	ldr	r2, [r3, #0]
}
 8002126:	bcf0      	pop	{r4, r5, r6, r7}
  dmaStreamEnable(uartp->dmarx);
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
}
 800212e:	4770      	bx	lr

08002130 <uart_lld_stop_receive>:
  if (uartp->config->rxchar_cb == NULL)
 8002130:	6843      	ldr	r3, [r0, #4]
 * @notapi
 */
size_t uart_lld_stop_receive(UARTDriver *uartp) {
  size_t n;

  dmaStreamDisable(uartp->dmarx);
 8002132:	220e      	movs	r2, #14
  if (uartp->config->rxchar_cb == NULL)
 8002134:	68db      	ldr	r3, [r3, #12]
size_t uart_lld_stop_receive(UARTDriver *uartp) {
 8002136:	b470      	push	{r4, r5, r6}
  if (uartp->config->rxchar_cb == NULL)
 8002138:	2b00      	cmp	r3, #0
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 800213a:	bf0c      	ite	eq
 800213c:	2120      	moveq	r1, #32
 800213e:	2122      	movne	r1, #34	; 0x22
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8002140:	2601      	movs	r6, #1
  dmaStreamDisable(uartp->dmarx);
 8002142:	6904      	ldr	r4, [r0, #16]
 8002144:	6863      	ldr	r3, [r4, #4]
 8002146:	681d      	ldr	r5, [r3, #0]
 8002148:	f025 050f 	bic.w	r5, r5, #15
 800214c:	601d      	str	r5, [r3, #0]
 800214e:	7b65      	ldrb	r5, [r4, #13]
 8002150:	6824      	ldr	r4, [r4, #0]
 8002152:	40aa      	lsls	r2, r5
 8002154:	6062      	str	r2, [r4, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8002156:	68c4      	ldr	r4, [r0, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8002158:	f100 0218 	add.w	r2, r0, #24
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 800215c:	4321      	orrs	r1, r4
  n = dmaStreamGetTransactionSize(uartp->dmarx);
 800215e:	6858      	ldr	r0, [r3, #4]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8002160:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8002162:	605e      	str	r6, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmamode | mode);
 8002164:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4332      	orrs	r2, r6
 800216a:	601a      	str	r2, [r3, #0]
  uart_enter_rx_idle_loop(uartp);

  return n;
}
 800216c:	bc70      	pop	{r4, r5, r6}
 800216e:	4770      	bx	lr

08002170 <__early_init>:
 * This initialization must be performed just after stack setup and before
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8002170:	f7ff b99e 	b.w	80014b0 <stm32_clock_init>
	...

08002180 <boardInit>:
 */
void boardInit(void) {
  /*
  * add pin alternate function remap here
  */
}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
	...

08002190 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8002190:	e7fe      	b.n	8002190 <_idle_thread>
 8002192:	bf00      	nop
	...

080021a0 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80021a2:	4d1e      	ldr	r5, [pc, #120]	; (800221c <chSysInit+0x7c>)
  _scheduler_init();
 80021a4:	f000 f98c 	bl	80024c0 <_scheduler_init>
  _vt_init();
 80021a8:	f000 f8a2 	bl	80022f0 <_vt_init>
  _core_init();
 80021ac:	f000 fc28 	bl	8002a00 <_core_init>
  _heap_init();
 80021b0:	f000 fc7e 	bl	8002ab0 <_heap_init>
  _factory_init();
 80021b4:	f000 fc9c 	bl	8002af0 <_factory_init>
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80021b8:	4628      	mov	r0, r5
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	4918      	ldr	r1, [pc, #96]	; (8002220 <chSysInit+0x80>)
 80021be:	f000 fa4f 	bl	8002660 <_thread_init>
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80021c2:	2301      	movs	r3, #1
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c4:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  currp->wabase = NULL;
 80021c8:	2400      	movs	r4, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	2710      	movs	r7, #16
 80021cc:	2620      	movs	r6, #32
  currp->state = CH_STATE_CURRENT;
 80021ce:	f880 3020 	strb.w	r3, [r0, #32]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <chSysInit+0x84>)
  reg_value  =  (reg_value                                   |
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <chSysInit+0x88>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d6:	68d9      	ldr	r1, [r3, #12]
  currp->wabase = NULL;
 80021d8:	61c4      	str	r4, [r0, #28]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021da:	ea01 010c 	and.w	r1, r1, ip
  reg_value  =  (reg_value                                   |
 80021de:	430a      	orrs	r2, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80021e0:	f10c 4c60 	add.w	ip, ip, #3758096384	; 0xe0000000
  SCB->AIRCR =  reg_value;
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	f6ac 3c0f 	subw	ip, ip, #2831	; 0xb0f
 80021ea:	f8dc 200c 	ldr.w	r2, [ip, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80021ee:	490f      	ldr	r1, [pc, #60]	; (800222c <chSysInit+0x8c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80021f0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80021f4:	f845 0c18 	str.w	r0, [r5, #-24]
 80021f8:	f8cc 200c 	str.w	r2, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80021fc:	680a      	ldr	r2, [r1, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	600a      	str	r2, [r1, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	77df      	strb	r7, [r3, #31]
 8002206:	f883 6022 	strb.w	r6, [r3, #34]	; 0x22
 800220a:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800220e:	b662      	cpsie	i
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 8002210:	4807      	ldr	r0, [pc, #28]	; (8002230 <chSysInit+0x90>)
  }
#endif
}
 8002212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void) chThdCreate(&idle_descriptor);
 8002216:	f000 ba83 	b.w	8002720 <chThdCreate>
 800221a:	bf00      	nop
 800221c:	200009c8 	.word	0x200009c8
 8002220:	08003724 	.word	0x08003724
 8002224:	e000ed00 	.word	0xe000ed00
 8002228:	05fa0300 	.word	0x05fa0300
 800222c:	e0001000 	.word	0xe0001000
 8002230:	080036fc 	.word	0x080036fc
	...

08002240 <chSysHalt>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002240:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8002242:	4b01      	ldr	r3, [pc, #4]	; (8002248 <chSysHalt+0x8>)
 8002244:	62d8      	str	r0, [r3, #44]	; 0x2c
 8002246:	e7fe      	b.n	8002246 <chSysHalt+0x6>
 8002248:	20000998 	.word	0x20000998
 800224c:	00000000 	.word	0x00000000

08002250 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8002250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8002254:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80022e8 <chSysTimerHandlerI+0x98>
  return (systime_t)STM32_ST_TIM->CNT;
 8002258:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 800225c:	464d      	mov	r5, r9
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 800225e:	2600      	movs	r6, #0
  vtp = ch.vtlist.next;
 8002260:	f855 4f1c 	ldr.w	r4, [r5, #28]!
 8002264:	68a3      	ldr	r3, [r4, #8]
 8002266:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800226a:	f8b9 2028 	ldrh.w	r2, [r9, #40]	; 0x28
 800226e:	b280      	uxth	r0, r0
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8002270:	eba0 0a02 	sub.w	sl, r0, r2
 8002274:	fa1f fa8a 	uxth.w	sl, sl
    if (nowdelta < vtp->delta) {
 8002278:	459a      	cmp	sl, r3
 800227a:	d31f      	bcc.n	80022bc <chSysTimerHandlerI+0x6c>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800227c:	2720      	movs	r7, #32
 800227e:	e00c      	b.n	800229a <chSysTimerHandlerI+0x4a>
 8002280:	f386 8811 	msr	BASEPRI, r6
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8002284:	6920      	ldr	r0, [r4, #16]
 8002286:	47d8      	blx	fp
 8002288:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800228c:	f8d9 401c 	ldr.w	r4, [r9, #28]
    }
    while (vtp->delta <= nowdelta);
 8002290:	68a3      	ldr	r3, [r4, #8]
 8002292:	459a      	cmp	sl, r3
 8002294:	d3e7      	bcc.n	8002266 <chSysTimerHandlerI+0x16>
 8002296:	f8b9 2028 	ldrh.w	r2, [r9, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800229a:	6821      	ldr	r1, [r4, #0]
      ch.vtlist.lasttime += vtp->delta;
 800229c:	441a      	add	r2, r3
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800229e:	42a9      	cmp	r1, r5
      ch.vtlist.lasttime += vtp->delta;
 80022a0:	f8a9 2028 	strh.w	r2, [r9, #40]	; 0x28
      fn = vtp->func;
 80022a4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80022a8:	604d      	str	r5, [r1, #4]
      nowdelta -= vtp->delta;
 80022aa:	ebaa 0a03 	sub.w	sl, sl, r3
      ch.vtlist.next = vtp->next;
 80022ae:	f8c9 101c 	str.w	r1, [r9, #28]
      vtp->func = NULL;
 80022b2:	60e6      	str	r6, [r4, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80022b4:	d1e4      	bne.n	8002280 <chSysTimerHandlerI+0x30>
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {

  stStopAlarm();
 80022b6:	f7fe ff9b 	bl	80011f0 <stStopAlarm>
 80022ba:	e7e1      	b.n	8002280 <chSysTimerHandlerI+0x30>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80022bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80022c0:	42ab      	cmp	r3, r5
 80022c2:	d00f      	beq.n	80022e4 <chSysTimerHandlerI+0x94>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 80022c4:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 80022c6:	f8a9 0028 	strh.w	r0, [r9, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 80022ca:	eba2 020a 	sub.w	r2, r2, sl
 80022ce:	609a      	str	r2, [r3, #8]
  return systime + (systime_t)interval;
 80022d0:	8923      	ldrh	r3, [r4, #8]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	bf2c      	ite	cs
 80022d6:	18c0      	addcs	r0, r0, r3
 80022d8:	3002      	addcc	r0, #2
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
  CH_CFG_SYSTEM_TICK_HOOK();
}
 80022da:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80022de:	b280      	uxth	r0, r0
 80022e0:	f7fe bf8e 	b.w	8001200 <stSetAlarm>
 80022e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022e8:	20000998 	.word	0x20000998
 80022ec:	00000000 	.word	0x00000000

080022f0 <_vt_init>:
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 80022f4:	2100      	movs	r1, #0
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <_vt_init+0x18>)
 80022f8:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.delta = (sysinterval_t)-1;
 80022fc:	6258      	str	r0, [r3, #36]	; 0x24
  ch.vtlist.lasttime = (systime_t)0;
 80022fe:	8519      	strh	r1, [r3, #40]	; 0x28
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002300:	e9c3 2207 	strd	r2, r2, [r3, #28]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000998 	.word	0x20000998
 800230c:	00000000 	.word	0x00000000

08002310 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8002310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002312:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002316:	4606      	mov	r6, r0
 8002318:	4f2c      	ldr	r7, [pc, #176]	; (80023cc <chVTDoSetI+0xbc>)
 800231a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800231c:	2901      	cmp	r1, #1
  vtp->func = vtfunc;
 800231e:	e9c6 2303 	strd	r2, r3, [r6, #12]
 8002322:	b280      	uxth	r0, r0
 8002324:	69fd      	ldr	r5, [r7, #28]
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002326:	f107 031c 	add.w	r3, r7, #28
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800232a:	d92b      	bls.n	8002384 <chVTDoSetI+0x74>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800232c:	429d      	cmp	r5, r3
 800232e:	d02d      	beq.n	800238c <chVTDoSetI+0x7c>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8002330:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002332:	68ab      	ldr	r3, [r5, #8]
  return (sysinterval_t)((systime_t)(end - start));
 8002334:	1a80      	subs	r0, r0, r2
 8002336:	b284      	uxth	r4, r0
 8002338:	1864      	adds	r4, r4, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 800233a:	d316      	bcc.n	800236a <chVTDoSetI+0x5a>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 800233c:	682d      	ldr	r5, [r5, #0]
      delta -= p->delta;
 800233e:	1ae4      	subs	r4, r4, r3
 8002340:	68ab      	ldr	r3, [r5, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8002342:	42a3      	cmp	r3, r4
 8002344:	d204      	bcs.n	8002350 <chVTDoSetI+0x40>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8002346:	682d      	ldr	r5, [r5, #0]
    delta -= p->delta;
 8002348:	1ae4      	subs	r4, r4, r3
  while (p->delta < delta) {
 800234a:	68ab      	ldr	r3, [r5, #8]
 800234c:	42a3      	cmp	r3, r4
 800234e:	d3fa      	bcc.n	8002346 <chVTDoSetI+0x36>
  /* Calculate new delta for the following entry.*/
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
  vtp->prev = vtp->next->prev;
 8002354:	686b      	ldr	r3, [r5, #4]
 8002356:	e9c6 5300 	strd	r5, r3, [r6]
  vtp->prev->next = vtp;
 800235a:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 800235c:	606e      	str	r6, [r5, #4]
  vtp->delta = delta;
 800235e:	60b4      	str	r4, [r6, #8]
  p->delta -= delta;
 8002360:	68ab      	ldr	r3, [r5, #8]
 8002362:	1b1c      	subs	r4, r3, r4
 8002364:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002366:	627a      	str	r2, [r7, #36]	; 0x24
}
 8002368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 800236a:	42a3      	cmp	r3, r4
 800236c:	d9e9      	bls.n	8002342 <chVTDoSetI+0x32>
  return systime + (systime_t)interval;
 800236e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002372:	4284      	cmp	r4, r0
 8002374:	bf94      	ite	ls
 8002376:	1910      	addls	r0, r2, r4
 8002378:	1810      	addhi	r0, r2, r0
 800237a:	b280      	uxth	r0, r0
 800237c:	f7fe ff40 	bl	8001200 <stSetAlarm>
 8002380:	68ab      	ldr	r3, [r5, #8]
 8002382:	e7de      	b.n	8002342 <chVTDoSetI+0x32>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002384:	429d      	cmp	r5, r3
 8002386:	d013      	beq.n	80023b0 <chVTDoSetI+0xa0>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002388:	2102      	movs	r1, #2
 800238a:	e7d1      	b.n	8002330 <chVTDoSetI+0x20>
 800238c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002390:	428c      	cmp	r4, r1
 8002392:	bf28      	it	cs
 8002394:	460c      	movcs	r4, r1
 8002396:	b2a4      	uxth	r4, r4
      ch.vtlist.lasttime = now;
 8002398:	8538      	strh	r0, [r7, #40]	; 0x28
 800239a:	4420      	add	r0, r4
      ch.vtlist.prev = vtp;
 800239c:	e9c7 6607 	strd	r6, r6, [r7, #28]
  stStartAlarm(time);
 80023a0:	b280      	uxth	r0, r0
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80023a2:	e9c6 5500 	strd	r5, r5, [r6]
      vtp->delta = delay;
 80023a6:	60b1      	str	r1, [r6, #8]
}
 80023a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80023ac:	f7fe bf18 	b.w	80011e0 <stStartAlarm>
      vtp->delta = delay;
 80023b0:	2302      	movs	r3, #2
 80023b2:	461c      	mov	r4, r3
      ch.vtlist.lasttime = now;
 80023b4:	8538      	strh	r0, [r7, #40]	; 0x28
 80023b6:	4420      	add	r0, r4
      ch.vtlist.prev = vtp;
 80023b8:	e9c7 6607 	strd	r6, r6, [r7, #28]
 80023bc:	b280      	uxth	r0, r0
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80023be:	e9c6 5500 	strd	r5, r5, [r6]
      vtp->delta = delay;
 80023c2:	60b3      	str	r3, [r6, #8]
}
 80023c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80023c8:	f7fe bf0a 	b.w	80011e0 <stStartAlarm>
 80023cc:	20000998 	.word	0x20000998

080023d0 <chVTDoResetI>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80023d0:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <chVTDoResetI+0x78>)
void chVTDoResetI(virtual_timer_t *vtp) {
 80023d2:	b430      	push	{r4, r5}
  if (ch.vtlist.next != vtp) {
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	4282      	cmp	r2, r0
 80023d8:	d00f      	beq.n	80023fa <chVTDoResetI+0x2a>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80023da:	e9d0 2100 	ldrd	r2, r1, [r0]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
 80023de:	2400      	movs	r4, #0
    vtp->prev->next = vtp->next;
 80023e0:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 80023e2:	6802      	ldr	r2, [r0, #0]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80023e4:	331c      	adds	r3, #28
 80023e6:	429a      	cmp	r2, r3
    vtp->next->prev = vtp->prev;
 80023e8:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 80023ea:	60c4      	str	r4, [r0, #12]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80023ec:	d003      	beq.n	80023f6 <chVTDoResetI+0x26>
      vtp->next->delta += vtp->delta;
 80023ee:	6881      	ldr	r1, [r0, #8]
 80023f0:	6893      	ldr	r3, [r2, #8]
 80023f2:	440b      	add	r3, r1
 80023f4:	6093      	str	r3, [r2, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80023f6:	bc30      	pop	{r4, r5}
 80023f8:	4770      	bx	lr
  ch.vtlist.next = vtp->next;
 80023fa:	4618      	mov	r0, r3
  vtp->func = NULL;
 80023fc:	2400      	movs	r4, #0
  ch.vtlist.next = vtp->next;
 80023fe:	6811      	ldr	r1, [r2, #0]
 8002400:	f840 1f1c 	str.w	r1, [r0, #28]!
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002404:	4281      	cmp	r1, r0
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8002406:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8002408:	60d4      	str	r4, [r2, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800240a:	d01a      	beq.n	8002442 <chVTDoResetI+0x72>
 800240c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  ch.vtlist.next->delta += vtp->delta;
 8002410:	6895      	ldr	r5, [r2, #8]
 8002412:	6888      	ldr	r0, [r1, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8002414:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8002416:	4428      	add	r0, r5
 8002418:	6088      	str	r0, [r1, #8]
 800241a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	b29b      	uxth	r3, r3
  if (nowdelta >= ch.vtlist.next->delta) {
 8002420:	4298      	cmp	r0, r3
 8002422:	d9e8      	bls.n	80023f6 <chVTDoResetI+0x26>
  delta = ch.vtlist.next->delta - nowdelta;
 8002424:	1ac1      	subs	r1, r0, r3
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8002426:	2901      	cmp	r1, #1
 8002428:	d909      	bls.n	800243e <chVTDoResetI+0x6e>
 800242a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800242e:	4298      	cmp	r0, r3
 8002430:	bf28      	it	cs
 8002432:	4618      	movcs	r0, r3
}
 8002434:	bc30      	pop	{r4, r5}
  return systime + (systime_t)interval;
 8002436:	4410      	add	r0, r2
  stSetAlarm(time);
 8002438:	b280      	uxth	r0, r0
 800243a:	f7fe bee1 	b.w	8001200 <stSetAlarm>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800243e:	1c98      	adds	r0, r3, #2
 8002440:	e7f8      	b.n	8002434 <chVTDoResetI+0x64>
}
 8002442:	bc30      	pop	{r4, r5}
  stStopAlarm();
 8002444:	f7fe bed4 	b.w	80011f0 <stStopAlarm>
 8002448:	20000998 	.word	0x20000998
 800244c:	00000000 	.word	0x00000000

08002450 <wakeup>:
 8002450:	2320      	movs	r3, #32
 8002452:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8002456:	f890 3020 	ldrb.w	r3, [r0, #32]
 800245a:	2b07      	cmp	r3, #7
 800245c:	d80e      	bhi.n	800247c <wakeup+0x2c>
 800245e:	e8df f003 	tbb	[pc, r3]
 8002462:	0d28      	.short	0x0d28
 8002464:	0408240d 	.word	0x0408240d
 8002468:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800246a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800246c:	6893      	ldr	r3, [r2, #8]
 800246e:	3301      	adds	r3, #1
 8002470:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8002472:	e9d0 2300 	ldrd	r2, r3, [r0]
 8002476:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002478:	6802      	ldr	r2, [r0, #0]
 800247a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800247c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800247e:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8002480:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 8002484:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8002488:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800248a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800248e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	428a      	cmp	r2, r1
 8002494:	d2fb      	bcs.n	800248e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	2100      	movs	r1, #0
 800249a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800249e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80024a0:	6058      	str	r0, [r3, #4]
 80024a2:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80024a6:	bc10      	pop	{r4}
 80024a8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80024aa:	2200      	movs	r2, #0
 80024ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024ae:	601a      	str	r2, [r3, #0]
    break;
 80024b0:	e7e4      	b.n	800247c <wakeup+0x2c>
 80024b2:	2300      	movs	r3, #0
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000998 	.word	0x20000998

080024c0 <_scheduler_init>:
  ch.rlist.prio = NOPRIO;
 80024c0:	2200      	movs	r2, #0
  tqp->next = (thread_t *)tqp;
 80024c2:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <_scheduler_init+0x10>)
 80024c4:	609a      	str	r2, [r3, #8]
  tqp->prev = (thread_t *)tqp;
 80024c6:	e9c3 3300 	strd	r3, r3, [r3]
  ch.rlist.older = (thread_t *)&ch.rlist;
 80024ca:	e9c3 3304 	strd	r3, r3, [r3, #16]
}
 80024ce:	4770      	bx	lr
 80024d0:	20000998 	.word	0x20000998
	...

080024e0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 80024e0:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 80024e2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 80024e6:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 80024e8:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 80024ec:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4282      	cmp	r2, r0
 80024f2:	d2fb      	bcs.n	80024ec <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 80024f4:	685a      	ldr	r2, [r3, #4]
}
 80024f6:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 80024f8:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 80024fc:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80024fe:	6059      	str	r1, [r3, #4]
}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000998 	.word	0x20000998
	...

08002510 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8002510:	b430      	push	{r4, r5}
  currp->state = CH_STATE_CURRENT;
 8002512:	2501      	movs	r5, #1
  thread_t *otp = currp;
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <chSchGoSleepS+0x24>)
 8002516:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8002518:	681a      	ldr	r2, [r3, #0]
  otp->state = newstate;
 800251a:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800251e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
 8002520:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 8002522:	6063      	str	r3, [r4, #4]
  currp->state = CH_STATE_CURRENT;
 8002524:	f882 5020 	strb.w	r5, [r2, #32]
  tqp->next             = tp->queue.next;
 8002528:	601c      	str	r4, [r3, #0]
}
 800252a:	bc30      	pop	{r4, r5}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800252c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800252e:	f7fd be8f 	b.w	8000250 <_port_switch>
 8002532:	bf00      	nop
 8002534:	20000998 	.word	0x20000998
	...

08002540 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002540:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8002542:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002544:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8002546:	d012      	beq.n	800256e <chSchGoSleepTimeoutS+0x2e>
 8002548:	4605      	mov	r5, r0
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 800254a:	4c0c      	ldr	r4, [pc, #48]	; (800257c <chSchGoSleepTimeoutS+0x3c>)
 800254c:	a801      	add	r0, sp, #4
 800254e:	69a3      	ldr	r3, [r4, #24]
 8002550:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <chSchGoSleepTimeoutS+0x40>)
 8002552:	f7ff fedd 	bl	8002310 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8002556:	4628      	mov	r0, r5
 8002558:	f7ff ffda 	bl	8002510 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800255c:	9b04      	ldr	r3, [sp, #16]
 800255e:	b113      	cbz	r3, 8002566 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 8002560:	a801      	add	r0, sp, #4
 8002562:	f7ff ff35 	bl	80023d0 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 8002566:	69a3      	ldr	r3, [r4, #24]
}
 8002568:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800256a:	b007      	add	sp, #28
 800256c:	bd30      	pop	{r4, r5, pc}
    chSchGoSleepS(newstate);
 800256e:	f7ff ffcf 	bl	8002510 <chSchGoSleepS>
 8002572:	4c02      	ldr	r4, [pc, #8]	; (800257c <chSchGoSleepTimeoutS+0x3c>)
  return currp->u.rdymsg;
 8002574:	69a3      	ldr	r3, [r4, #24]
}
 8002576:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002578:	b007      	add	sp, #28
 800257a:	bd30      	pop	{r4, r5, pc}
 800257c:	20000998 	.word	0x20000998
 8002580:	08002451 	.word	0x08002451
	...

08002590 <chSchWakeupS>:
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <chSchWakeupS+0x5c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002592:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8002594:	699e      	ldr	r6, [r3, #24]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8002596:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002598:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
 800259a:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 800259c:	68b0      	ldr	r0, [r6, #8]
 800259e:	4285      	cmp	r5, r0
 80025a0:	d80d      	bhi.n	80025be <chSchWakeupS+0x2e>
  tp->state = CH_STATE_READY;
 80025a2:	2200      	movs	r2, #0
 80025a4:	f884 2020 	strb.w	r2, [r4, #32]
    cp = cp->queue.next;
 80025a8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4295      	cmp	r5, r2
 80025ae:	d9fb      	bls.n	80025a8 <chSchWakeupS+0x18>
  tp->queue.prev             = cp->queue.prev;
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80025b6:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80025b8:	605c      	str	r4, [r3, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 80025ba:	bc70      	pop	{r4, r5, r6}
 80025bc:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 80025be:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
 80025c0:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 80025c2:	f886 1020 	strb.w	r1, [r6, #32]
    cp = cp->queue.next;
 80025c6:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80025c8:	6891      	ldr	r1, [r2, #8]
 80025ca:	4288      	cmp	r0, r1
 80025cc:	d9fb      	bls.n	80025c6 <chSchWakeupS+0x36>
    ntp->state = CH_STATE_CURRENT;
 80025ce:	2001      	movs	r0, #1
  tp->queue.prev             = cp->queue.prev;
 80025d0:	6851      	ldr	r1, [r2, #4]
 80025d2:	e9c6 2100 	strd	r2, r1, [r6]
  tp->queue.prev->queue.next = tp;
 80025d6:	600e      	str	r6, [r1, #0]
  cp->queue.prev             = tp;
 80025d8:	6056      	str	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80025da:	f884 0020 	strb.w	r0, [r4, #32]
    chSysSwitch(ntp, otp);
 80025de:	4631      	mov	r1, r6
 80025e0:	4620      	mov	r0, r4
    currp = ntp;
 80025e2:	619c      	str	r4, [r3, #24]
}
 80025e4:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 80025e6:	f7fd be33 	b.w	8000250 <_port_switch>
 80025ea:	bf00      	nop
 80025ec:	20000998 	.word	0x20000998

080025f0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <chSchIsPreemptionRequired+0x14>)
 80025f2:	681a      	ldr	r2, [r3, #0]
  tprio_t p2 = currp->prio;
 80025f4:	699b      	ldr	r3, [r3, #24]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 80025f6:	6890      	ldr	r0, [r2, #8]
 80025f8:	689b      	ldr	r3, [r3, #8]
#endif
}
 80025fa:	4298      	cmp	r0, r3
 80025fc:	bf94      	ite	ls
 80025fe:	2000      	movls	r0, #0
 8002600:	2001      	movhi	r0, #1
 8002602:	4770      	bx	lr
 8002604:	20000998 	.word	0x20000998
	...

08002610 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8002610:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <chSchDoRescheduleAhead+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002614:	2601      	movs	r6, #1
  tp->state = CH_STATE_READY;
 8002616:	2500      	movs	r5, #0
  cp = (thread_t *)&ch.rlist.queue;
 8002618:	4613      	mov	r3, r2
  thread_t *tp = tqp->next;
 800261a:	6810      	ldr	r0, [r2, #0]
  thread_t *otp = currp;
 800261c:	6994      	ldr	r4, [r2, #24]
  tqp->next             = tp->queue.next;
 800261e:	6801      	ldr	r1, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002620:	604a      	str	r2, [r1, #4]
  currp->state = CH_STATE_CURRENT;
 8002622:	f880 6020 	strb.w	r6, [r0, #32]
  tqp->next             = tp->queue.next;
 8002626:	6011      	str	r1, [r2, #0]
  tp->state = CH_STATE_READY;
 8002628:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 800262c:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800262e:	6190      	str	r0, [r2, #24]
    cp = cp->queue.next;
 8002630:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	4291      	cmp	r1, r2
 8002636:	d3fb      	bcc.n	8002630 <chSchDoRescheduleAhead+0x20>
  tp->queue.prev             = cp->queue.prev;
 8002638:	685a      	ldr	r2, [r3, #4]

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800263a:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 800263c:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 8002640:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002642:	605c      	str	r4, [r3, #4]
}
 8002644:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 8002646:	f7fd be03 	b.w	8000250 <_port_switch>
 800264a:	bf00      	nop
 800264c:	20000998 	.word	0x20000998

08002650 <chSchDoReschedule>:
 8002650:	f7ff bfde 	b.w	8002610 <chSchDoRescheduleAhead>
	...

08002660 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 8002660:	b4f0      	push	{r4, r5, r6, r7}

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002662:	2701      	movs	r7, #1
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8002664:	2600      	movs	r6, #0
  tp->state     = CH_STATE_WTSTART;
 8002666:	f04f 0c02 	mov.w	ip, #2
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800266a:	4c0c      	ldr	r4, [pc, #48]	; (800269c <_thread_init+0x3c>)
  tp->prio      = prio;
 800266c:	6082      	str	r2, [r0, #8]
  REG_INSERT(tp);
 800266e:	6965      	ldr	r5, [r4, #20]
  tp->realprio  = prio;
 8002670:	63c2      	str	r2, [r0, #60]	; 0x3c
  tp->name      = name;
 8002672:	e9c0 5105 	strd	r5, r1, [r0, #20]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8002676:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  list_init(&tp->waiting);
 800267a:	f100 0128 	add.w	r1, r0, #40	; 0x28
  REG_INSERT(tp);
 800267e:	6104      	str	r4, [r0, #16]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002680:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
  tp->epending  = (eventmask_t)0;
 8002684:	e9c0 660d 	strd	r6, r6, [r0, #52]	; 0x34
  tp->state     = CH_STATE_WTSTART;
 8002688:	f8a0 c020 	strh.w	ip, [r0, #32]
  REG_INSERT(tp);
 800268c:	6128      	str	r0, [r5, #16]
 800268e:	6160      	str	r0, [r4, #20]
  tqp->next = (thread_t *)tqp;
 8002690:	e9c0 120a 	strd	r1, r2, [r0, #40]	; 0x28
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
}
 8002694:	bcf0      	pop	{r4, r5, r6, r7}
  tqp->prev = (thread_t *)tqp;
 8002696:	6302      	str	r2, [r0, #48]	; 0x30
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000998 	.word	0x20000998

080026a0 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 80026a0:	b4f0      	push	{r4, r5, r6, r7}
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80026a2:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80026a6:	2100      	movs	r1, #0
  tp->state     = CH_STATE_WTSTART;
 80026a8:	2502      	movs	r5, #2
  tp->refs      = (trefs_t)1;
 80026aa:	2401      	movs	r4, #1
  REG_INSERT(tp);
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <chThdCreateSuspendedI+0x6c>)
  tp->wabase = tdp->wbase;
 80026ae:	f843 6c2c 	str.w	r6, [r3, #-44]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80026b2:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
 80026b6:	e943 761b 	strd	r7, r6, [r3, #-108]	; 0x6c

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 80026ba:	6806      	ldr	r6, [r0, #0]
 80026bc:	68c0      	ldr	r0, [r0, #12]
  tp->state     = CH_STATE_WTSTART;
 80026be:	f803 5c28 	strb.w	r5, [r3, #-40]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80026c2:	f803 1c27 	strb.w	r1, [r3, #-39]
  tp->refs      = (trefs_t)1;
 80026c6:	f803 4c26 	strb.w	r4, [r3, #-38]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80026ca:	4d11      	ldr	r5, [pc, #68]	; (8002710 <chThdCreateSuspendedI+0x70>)
  REG_INSERT(tp);
 80026cc:	6954      	ldr	r4, [r2, #20]
  tp->prio      = prio;
 80026ce:	f843 0c40 	str.w	r0, [r3, #-64]
  tp->realprio  = prio;
 80026d2:	f843 0c0c 	str.w	r0, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80026d6:	f1a3 006c 	sub.w	r0, r3, #108	; 0x6c
 80026da:	f843 0c3c 	str.w	r0, [r3, #-60]
 80026de:	f843 5c4c 	str.w	r5, [r3, #-76]
  tp = (thread_t *)((uint8_t *)tdp->wend -
 80026e2:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  tp->epending  = (eventmask_t)0;
 80026e6:	e943 1105 	strd	r1, r1, [r3, #-20]
  list_init(&tp->waiting);
 80026ea:	f1a3 0520 	sub.w	r5, r3, #32
  queue_init(&tp->msgqueue);
 80026ee:	f1a3 011c 	sub.w	r1, r3, #28
  tp->name      = name;
 80026f2:	f843 6c30 	str.w	r6, [r3, #-48]
  REG_INSERT(tp);
 80026f6:	e943 240e 	strd	r2, r4, [r3, #-56]	; 0x38
 80026fa:	6120      	str	r0, [r4, #16]
 80026fc:	6150      	str	r0, [r2, #20]
  tqp->next = (thread_t *)tqp;
 80026fe:	e943 5108 	strd	r5, r1, [r3, #-32]
}
 8002702:	bcf0      	pop	{r4, r5, r6, r7}
  tqp->prev = (thread_t *)tqp;
 8002704:	f843 1c18 	str.w	r1, [r3, #-24]
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000998 	.word	0x20000998
 8002710:	08000261 	.word	0x08000261
	...

08002720 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8002720:	b510      	push	{r4, lr}
 8002722:	2320      	movs	r3, #32
 8002724:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
 8002728:	f7ff ffba 	bl	80026a0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 800272c:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(tdp);
 800272e:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 8002730:	f7ff ff2e 	bl	8002590 <chSchWakeupS>
 8002734:	2300      	movs	r3, #0
 8002736:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800273a:	4620      	mov	r0, r4
 800273c:	bd10      	pop	{r4, pc}
 800273e:	bf00      	nop

08002740 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	9f06      	ldr	r7, [sp, #24]
 8002744:	2420      	movs	r4, #32
 8002746:	f384 8811 	msr	BASEPRI, r4
  tp->state     = CH_STATE_WTSTART;
 800274a:	f04f 0e02 	mov.w	lr, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 800274e:	f04f 0c01 	mov.w	ip, #1
  tp->mtxlist   = NULL;
 8002752:	2600      	movs	r6, #0
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002754:	3948      	subs	r1, #72	; 0x48
 8002756:	1844      	adds	r4, r0, r1
  REG_INSERT(tp);
 8002758:	4d13      	ldr	r5, [pc, #76]	; (80027a8 <chThdCreateStatic+0x68>)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800275a:	e944 3709 	strd	r3, r7, [r4, #-36]	; 0x24
  tp->prio      = prio;
 800275e:	60a2      	str	r2, [r4, #8]
  tp->realprio  = prio;
 8002760:	63e2      	str	r2, [r4, #60]	; 0x3c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <chThdCreateStatic+0x6c>)
 8002764:	f1a4 0224 	sub.w	r2, r4, #36	; 0x24
 8002768:	60e2      	str	r2, [r4, #12]
  tp->wabase = (stkalign_t *)wsp;
 800276a:	61e0      	str	r0, [r4, #28]
  REG_INSERT(tp);
 800276c:	696a      	ldr	r2, [r5, #20]
  tp->name      = name;
 800276e:	4810      	ldr	r0, [pc, #64]	; (80027b0 <chThdCreateStatic+0x70>)
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002770:	f844 3c04 	str.w	r3, [r4, #-4]
  list_init(&tp->waiting);
 8002774:	f104 0128 	add.w	r1, r4, #40	; 0x28
  queue_init(&tp->msgqueue);
 8002778:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tp->name      = name;
 800277c:	61a0      	str	r0, [r4, #24]
  REG_INSERT(tp);
 800277e:	e9c4 5204 	strd	r5, r2, [r4, #16]
  tp->state     = CH_STATE_WTSTART;
 8002782:	f8a4 e020 	strh.w	lr, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002786:	f884 c022 	strb.w	ip, [r4, #34]	; 0x22
  tp->epending  = (eventmask_t)0;
 800278a:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 800278e:	4620      	mov	r0, r4
  REG_INSERT(tp);
 8002790:	6114      	str	r4, [r2, #16]
  tqp->next = (thread_t *)tqp;
 8002792:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 8002796:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 8002798:	4631      	mov	r1, r6
  REG_INSERT(tp);
 800279a:	616c      	str	r4, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
 800279c:	f7ff fef8 	bl	8002590 <chSchWakeupS>
 80027a0:	f386 8811 	msr	BASEPRI, r6
  chSysUnlock();

  return tp;
}
 80027a4:	4620      	mov	r0, r4
 80027a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a8:	20000998 	.word	0x20000998
 80027ac:	08000261 	.word	0x08000261
 80027b0:	0800371c 	.word	0x0800371c
	...

080027c0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80027c0:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <chThdExitS+0x44>)
 80027c4:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 80027c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 80027c8:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80027cc:	42ab      	cmp	r3, r5
  tp->u.exitcode = msg;
 80027ce:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 80027d0:	d007      	beq.n	80027e2 <chThdExitS+0x22>
  tlp->next = tp->queue.next;
 80027d2:	681a      	ldr	r2, [r3, #0]
    (void) chSchReadyI(list_remove(&tp->waiting));
 80027d4:	4618      	mov	r0, r3
 80027d6:	62a2      	str	r2, [r4, #40]	; 0x28
 80027d8:	f7ff fe82 	bl	80024e0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80027dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80027de:	42ab      	cmp	r3, r5
 80027e0:	d1f7      	bne.n	80027d2 <chThdExitS+0x12>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 80027e2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80027e6:	b943      	cbnz	r3, 80027fa <chThdExitS+0x3a>
 80027e8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80027ec:	079b      	lsls	r3, r3, #30
 80027ee:	d104      	bne.n	80027fa <chThdExitS+0x3a>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 80027f0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	6922      	ldr	r2, [r4, #16]
 80027f8:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 80027fa:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 80027fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8002800:	f7ff be86 	b.w	8002510 <chSchGoSleepS>
 8002804:	20000998 	.word	0x20000998
	...

08002810 <chThdExit>:
 8002810:	2320      	movs	r3, #32
 8002812:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 8002816:	f7ff bfd3 	b.w	80027c0 <chThdExitS>
 800281a:	bf00      	nop
 800281c:	0000      	movs	r0, r0
	...

08002820 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8002820:	b508      	push	{r3, lr}
 8002822:	4601      	mov	r1, r0
 8002824:	2320      	movs	r3, #32
 8002826:	f383 8811 	msr	BASEPRI, r3
 800282a:	2008      	movs	r0, #8
 800282c:	f7ff fe88 	bl	8002540 <chSchGoSleepTimeoutS>
 8002830:	2300      	movs	r3, #0
 8002832:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 8002836:	bd08      	pop	{r3, pc}
	...

08002840 <chThdSuspendTimeoutS>:
  return ch.rlist.current;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <chThdSuspendTimeoutS+0x18>)
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8002842:	4602      	mov	r2, r0
 8002844:	699b      	ldr	r3, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 8002846:	b121      	cbz	r1, 8002852 <chThdSuspendTimeoutS+0x12>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8002848:	6003      	str	r3, [r0, #0]
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800284a:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800284e:	f7ff be77 	b.w	8002540 <chSchGoSleepTimeoutS>
}
 8002852:	f04f 30ff 	mov.w	r0, #4294967295
 8002856:	4770      	bx	lr
 8002858:	20000998 	.word	0x20000998
 800285c:	00000000 	.word	0x00000000

08002860 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8002860:	6803      	ldr	r3, [r0, #0]
 8002862:	b143      	cbz	r3, 8002876 <chThdResumeI+0x16>
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8002864:	b410      	push	{r4}
 8002866:	4602      	mov	r2, r0
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8002868:	2400      	movs	r4, #0
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800286a:	4618      	mov	r0, r3
    *trp = NULL;
 800286c:	6014      	str	r4, [r2, #0]
    tp->u.rdymsg = msg;
 800286e:	6259      	str	r1, [r3, #36]	; 0x24
  }
}
 8002870:	bc10      	pop	{r4}
    (void) chSchReadyI(tp);
 8002872:	f7ff be35 	b.w	80024e0 <chSchReadyI>
 8002876:	4770      	bx	lr
	...

08002880 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8002880:	b161      	cbz	r1, 800289c <chThdEnqueueTimeoutS+0x1c>
 8002882:	4602      	mov	r2, r0
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002886:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8002888:	699b      	ldr	r3, [r3, #24]
  tp->queue.prev             = tqp->prev;
 800288a:	6844      	ldr	r4, [r0, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800288c:	2004      	movs	r0, #4
 800288e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8002892:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8002894:	6053      	str	r3, [r2, #4]
}
 8002896:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002898:	f7ff be52 	b.w	8002540 <chSchGoSleepTimeoutS>
}
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000998 	.word	0x20000998
	...

080028b0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80028b0:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 80028b2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 80028b4:	4298      	cmp	r0, r3
 80028b6:	d00b      	beq.n	80028d0 <chThdDequeueAllI+0x20>
 80028b8:	4604      	mov	r4, r0
 80028ba:	460d      	mov	r5, r1
  tqp->next             = tp->queue.next;
 80028bc:	681a      	ldr	r2, [r3, #0]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  (void) chSchReadyI(tp);
 80028be:	4618      	mov	r0, r3
 80028c0:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80028c2:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
 80028c4:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80028c6:	f7ff fe0b 	bl	80024e0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	429c      	cmp	r4, r3
 80028ce:	d1f5      	bne.n	80028bc <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80028d0:	bd38      	pop	{r3, r4, r5, pc}
 80028d2:	bf00      	nop
	...

080028e0 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80028e0:	2300      	movs	r3, #0
  tqp->prev = (thread_t *)tqp;
 80028e2:	e9c0 0000 	strd	r0, r0, [r0]
 80028e6:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	0000      	movs	r0, r0
	...

080028f0 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 80028f0:	b470      	push	{r4, r5, r6}
 80028f2:	2420      	movs	r4, #32
 80028f4:	f384 8811 	msr	BASEPRI, r4
  chSysLock();
  elp->next     = esp->next;
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
 80028f8:	2400      	movs	r4, #0
  elp->listener = currp;
 80028fa:	4d06      	ldr	r5, [pc, #24]	; (8002914 <chEvtRegisterMaskWithFlags+0x24>)
  elp->next     = esp->next;
 80028fc:	6806      	ldr	r6, [r0, #0]
  elp->listener = currp;
 80028fe:	69ad      	ldr	r5, [r5, #24]
  elp->next     = esp->next;
 8002900:	600e      	str	r6, [r1, #0]
  esp->next     = elp;
 8002902:	6001      	str	r1, [r0, #0]
  elp->events   = events;
 8002904:	e9c1 5201 	strd	r5, r2, [r1, #4]
  elp->flags    = (eventflags_t)0;
 8002908:	e9c1 4303 	strd	r4, r3, [r1, #12]
 800290c:	f384 8811 	msr	BASEPRI, r4
  elp->wflags   = wflags;
  chSysUnlock();
}
 8002910:	bc70      	pop	{r4, r5, r6}
 8002912:	4770      	bx	lr
 8002914:	20000998 	.word	0x20000998
	...

08002920 <chEvtUnregister>:
 8002920:	2320      	movs	r3, #32
 8002922:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 8002926:	4602      	mov	r2, r0
 8002928:	e002      	b.n	8002930 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->next == elp) {
 800292a:	428b      	cmp	r3, r1
 800292c:	d007      	beq.n	800293e <chEvtUnregister+0x1e>
 800292e:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8002930:	6813      	ldr	r3, [r2, #0]
 8002932:	4283      	cmp	r3, r0
 8002934:	d1f9      	bne.n	800292a <chEvtUnregister+0xa>
 8002936:	2300      	movs	r3, #0
 8002938:	f383 8811 	msr	BASEPRI, r3
      break;
    }
    p = p->next;
  }
  chSysUnlock();
}
 800293c:	4770      	bx	lr
      p->next = elp->next;
 800293e:	680b      	ldr	r3, [r1, #0]
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	2300      	movs	r3, #0
 8002944:	f383 8811 	msr	BASEPRI, r3
}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	0000      	movs	r0, r0
	...

08002950 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8002950:	4603      	mov	r3, r0

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8002952:	6b42      	ldr	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002954:	f890 0020 	ldrb.w	r0, [r0, #32]
  tp->epending |= events;
 8002958:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 800295a:	280a      	cmp	r0, #10
  tp->epending |= events;
 800295c:	6359      	str	r1, [r3, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800295e:	d00a      	beq.n	8002976 <chEvtSignalI+0x26>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8002960:	280b      	cmp	r0, #11
 8002962:	d000      	beq.n	8002966 <chEvtSignalI+0x16>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 8002964:	4770      	bx	lr
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8002966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8002968:	438a      	bics	r2, r1
 800296a:	d1fb      	bne.n	8002964 <chEvtSignalI+0x14>
    tp->u.rdymsg = MSG_OK;
 800296c:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
 800296e:	4618      	mov	r0, r3
    tp->u.rdymsg = MSG_OK;
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002972:	f7ff bdb5 	b.w	80024e0 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8002976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002978:	4211      	tst	r1, r2
 800297a:	d1f7      	bne.n	800296c <chEvtSignalI+0x1c>
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002980:	b570      	push	{r4, r5, r6, lr}
  elp = esp->next;
 8002982:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8002984:	42a0      	cmp	r0, r4
 8002986:	d00f      	beq.n	80029a8 <chEvtBroadcastFlagsI+0x28>
 8002988:	4606      	mov	r6, r0
 800298a:	460d      	mov	r5, r1
    elp->flags |= flags;
 800298c:	68e3      	ldr	r3, [r4, #12]
 800298e:	432b      	orrs	r3, r5
 8002990:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8002992:	b115      	cbz	r5, 800299a <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8002994:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8002996:	4213      	tst	r3, r2
 8002998:	d003      	beq.n	80029a2 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->listener, elp->events);
 800299a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800299e:	f7ff ffd7 	bl	8002950 <chEvtSignalI>
    elp = elp->next;
 80029a2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80029a4:	42a6      	cmp	r6, r4
 80029a6:	d1f1      	bne.n	800298c <chEvtBroadcastFlagsI+0xc>
}
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	bf00      	nop
 80029ac:	0000      	movs	r0, r0
	...

080029b0 <chEvtWaitAnyTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <chEvtWaitAnyTimeout+0x44>)
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 80029b2:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 80029b4:	699e      	ldr	r6, [r3, #24]
 80029b6:	2320      	movs	r3, #32
 80029b8:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80029bc:	6b73      	ldr	r3, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80029be:	ea13 0500 	ands.w	r5, r3, r0
 80029c2:	d10e      	bne.n	80029e2 <chEvtWaitAnyTimeout+0x32>
    if (TIME_IMMEDIATE == timeout) {
 80029c4:	b919      	cbnz	r1, 80029ce <chEvtWaitAnyTimeout+0x1e>
 80029c6:	f385 8811 	msr	BASEPRI, r5
  }
  ctp->epending &= ~m;
  chSysUnlock();

  return m;
}
 80029ca:	4628      	mov	r0, r5
 80029cc:	bd70      	pop	{r4, r5, r6, pc}
    ctp->u.ewmask = events;
 80029ce:	6270      	str	r0, [r6, #36]	; 0x24
 80029d0:	4604      	mov	r4, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80029d2:	200a      	movs	r0, #10
 80029d4:	f7ff fdb4 	bl	8002540 <chSchGoSleepTimeoutS>
 80029d8:	2800      	cmp	r0, #0
 80029da:	dbf4      	blt.n	80029c6 <chEvtWaitAnyTimeout+0x16>
    m = ctp->epending & events;
 80029dc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80029de:	ea03 0504 	and.w	r5, r3, r4
  ctp->epending &= ~m;
 80029e2:	ea23 0305 	bic.w	r3, r3, r5
 80029e6:	6373      	str	r3, [r6, #52]	; 0x34
 80029e8:	2300      	movs	r3, #0
 80029ea:	f383 8811 	msr	BASEPRI, r3
}
 80029ee:	4628      	mov	r0, r5
 80029f0:	bd70      	pop	{r4, r5, r6, pc}
 80029f2:	bf00      	nop
 80029f4:	20000998 	.word	0x20000998
	...

08002a00 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <_core_init+0xc>)
 8002a02:	4903      	ldr	r1, [pc, #12]	; (8002a10 <_core_init+0x10>)
  ch_memcore.endmem  = __heap_end__;
 8002a04:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <_core_init+0x14>)
 8002a06:	e9c3 1200 	strd	r1, r2, [r3]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000a0c 	.word	0x20000a0c
 8002a10:	20001430 	.word	0x20001430
 8002a14:	20005000 	.word	0x20005000
	...

08002a20 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8002a20:	b430      	push	{r4, r5}

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a22:	4c0b      	ldr	r4, [pc, #44]	; (8002a50 <chCoreAllocAlignedWithOffsetI+0x30>)
  size = MEM_ALIGN_NEXT(size, align);
 8002a24:	3801      	subs	r0, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a26:	6825      	ldr	r5, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 8002a28:	1843      	adds	r3, r0, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a2a:	18a8      	adds	r0, r5, r2
 8002a2c:	3801      	subs	r0, #1
 8002a2e:	4408      	add	r0, r1
  size = MEM_ALIGN_NEXT(size, align);
 8002a30:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a32:	4008      	ands	r0, r1
  size = MEM_ALIGN_NEXT(size, align);
 8002a34:	4019      	ands	r1, r3
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002a36:	6863      	ldr	r3, [r4, #4]
  next = p + size;
 8002a38:	4401      	add	r1, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002a3a:	428b      	cmp	r3, r1
 8002a3c:	d304      	bcc.n	8002a48 <chCoreAllocAlignedWithOffsetI+0x28>
 8002a3e:	428d      	cmp	r5, r1
 8002a40:	d802      	bhi.n	8002a48 <chCoreAllocAlignedWithOffsetI+0x28>
    return NULL;
  }

  ch_memcore.nextmem = next;
 8002a42:	6021      	str	r1, [r4, #0]

  return p;
}
 8002a44:	bc30      	pop	{r4, r5}
 8002a46:	4770      	bx	lr
    return NULL;
 8002a48:	2000      	movs	r0, #0
}
 8002a4a:	bc30      	pop	{r4, r5}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000a0c 	.word	0x20000a0c
	...

08002a60 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8002a60:	b470      	push	{r4, r5, r6}
 8002a62:	2320      	movs	r3, #32
 8002a64:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a68:	4c0d      	ldr	r4, [pc, #52]	; (8002aa0 <chCoreAllocAlignedWithOffset+0x40>)
 8002a6a:	1e4d      	subs	r5, r1, #1
 8002a6c:	6826      	ldr	r6, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 8002a6e:	1943      	adds	r3, r0, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a70:	18b0      	adds	r0, r6, r2
  size = MEM_ALIGN_NEXT(size, align);
 8002a72:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a74:	4428      	add	r0, r5
  size = MEM_ALIGN_NEXT(size, align);
 8002a76:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8002a78:	4008      	ands	r0, r1
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002a7a:	6862      	ldr	r2, [r4, #4]
  next = p + size;
 8002a7c:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d807      	bhi.n	8002a92 <chCoreAllocAlignedWithOffset+0x32>
 8002a82:	429e      	cmp	r6, r3
 8002a84:	d805      	bhi.n	8002a92 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
 8002a86:	6023      	str	r3, [r4, #0]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 8002a8e:	bc70      	pop	{r4, r5, r6}
 8002a90:	4770      	bx	lr
    return NULL;
 8002a92:	2000      	movs	r0, #0
 8002a94:	2300      	movs	r3, #0
 8002a96:	f383 8811 	msr	BASEPRI, r3
}
 8002a9a:	bc70      	pop	{r4, r5, r6}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000a0c 	.word	0x20000a0c
	...

08002ab0 <_heap_init>:
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
  H_NEXT(&default_heap.header) = NULL;
 8002ab0:	2200      	movs	r2, #0
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <_heap_init+0x14>)
 8002ab4:	4904      	ldr	r1, [pc, #16]	; (8002ac8 <_heap_init+0x18>)
  H_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8002ab6:	f103 000c 	add.w	r0, r3, #12
  H_PAGES(&default_heap.header) = 0;
 8002aba:	e9c3 2201 	strd	r2, r2, [r3, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002abe:	6019      	str	r1, [r3, #0]
  chMtxObjectInit(&default_heap.mtx);
 8002ac0:	f7ff bf0e 	b.w	80028e0 <chMtxObjectInit>
 8002ac4:	20000a14 	.word	0x20000a14
 8002ac8:	08002a61 	.word	0x08002a61
 8002acc:	00000000 	.word	0x00000000

08002ad0 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8002ad0:	b410      	push	{r4}

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8002ad2:	2400      	movs	r4, #0
  mp->object_size = size;
  mp->align = align;
 8002ad4:	e9c0 1201 	strd	r1, r2, [r0, #4]
  mp->next = NULL;
 8002ad8:	6004      	str	r4, [r0, #0]
  mp->provider = provider;
 8002ada:	60c3      	str	r3, [r0, #12]
}
 8002adc:	bc10      	pop	{r4}
 8002ade:	4770      	bx	lr

08002ae0 <chCoreAllocAlignedI>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f7ff bf9d 	b.w	8002a20 <chCoreAllocAlignedWithOffsetI>
 8002ae6:	bf00      	nop
	...

08002af0 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 8002af0:	b570      	push	{r4, r5, r6, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8002af2:	4c11      	ldr	r4, [pc, #68]	; (8002b38 <_factory_init+0x48>)
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 8002af4:	4d11      	ldr	r5, [pc, #68]	; (8002b3c <_factory_init+0x4c>)
 8002af6:	4620      	mov	r0, r4
 8002af8:	f7ff fef2 	bl	80028e0 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 8002afc:	f104 0610 	add.w	r6, r4, #16
 8002b00:	462b      	mov	r3, r5
 8002b02:	f104 0014 	add.w	r0, r4, #20
 8002b06:	2204      	movs	r2, #4
 8002b08:	2114      	movs	r1, #20
 8002b0a:	6126      	str	r6, [r4, #16]
 8002b0c:	f7ff ffe0 	bl	8002ad0 <chPoolObjectInitAligned>
 8002b10:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8002b14:	462b      	mov	r3, r5
 8002b16:	2204      	movs	r2, #4
 8002b18:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002b1c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002b20:	211c      	movs	r1, #28
 8002b22:	e9c4 6509 	strd	r6, r5, [r4, #36]	; 0x24
 8002b26:	f7ff ffd3 	bl	8002ad0 <chPoolObjectInitAligned>
 8002b2a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8002b2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8002b32:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  dyn_list_init(&ch_factory.mbx_list);
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
#endif
}
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	20000a30 	.word	0x20000a30
 8002b3c:	08002ae1 	.word	0x08002ae1

08002b40 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002b40:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8002b44:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002b46:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
	...

08002b60 <_port_irq_epilogue>:
 8002b60:	2320      	movs	r3, #32
 8002b62:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <_port_irq_epilogue+0x44>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002b6e:	d102      	bne.n	8002b76 <_port_irq_epilogue+0x16>
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8002b76:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002b78:	f3ef 8409 	mrs	r4, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8002b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ctxp--;
 8002b80:	f1a4 0320 	sub.w	r3, r4, #32
    ctxp->xpsr = (regarm_t)0x01000000;
 8002b84:	f844 2c04 	str.w	r2, [r4, #-4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002b88:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8002b8c:	f7ff fd30 	bl	80025f0 <chSchIsPreemptionRequired>
 8002b90:	b118      	cbz	r0, 8002b9a <_port_irq_epilogue+0x3a>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <_port_irq_epilogue+0x48>)
 8002b94:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8002b98:	bd10      	pop	{r4, pc}
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <_port_irq_epilogue+0x4c>)
 8002b9c:	f844 3c08 	str.w	r3, [r4, #-8]
}
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	bf00      	nop
 8002ba4:	e000ed00 	.word	0xe000ed00
 8002ba8:	08000271 	.word	0x08000271
 8002bac:	08000274 	.word	0x08000274

08002bb0 <_ZL17pid_control_wheelssPfS_Ps>:

}

static int16_t pid_control_wheel(const int16_t setPoint, const int16_t current,
                           float* error_int, float* error_der,
                           int16_t* previous_error) {
 8002bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb4:	4615      	mov	r5, r2
 8002bb6:	4680      	mov	r8, r0
  int16_t output = 0;
  int16_t error = 0;

  const int dt = 2;

  error = setPoint - current;
 8002bb8:	1a41      	subs	r1, r0, r1
 8002bba:	b20c      	sxth	r4, r1
  *error_int += error * dt;
 8002bbc:	0060      	lsls	r0, r4, #1
                           int16_t* previous_error) {
 8002bbe:	461e      	mov	r6, r3
  *error_int += error * dt;
 8002bc0:	f7fe f85a 	bl	8000c78 <__aeabi_i2f>
 8002bc4:	6829      	ldr	r1, [r5, #0]
 8002bc6:	f7fd ffa3 	bl	8000b10 <__addsf3>
                           int16_t* previous_error) {
 8002bca:	9f08      	ldr	r7, [sp, #32]
  if(setPoint != 0) *error_int *= 0.95;
 8002bcc:	f1b8 0f00 	cmp.w	r8, #0
 8002bd0:	d146      	bne.n	8002c60 <_ZL17pid_control_wheelssPfS_Ps+0xb0>
  *error_int += error * dt;
 8002bd2:	6028      	str	r0, [r5, #0]
  *error_der = (error - *previous_error) / dt;
 8002bd4:	f9b7 0000 	ldrsh.w	r0, [r7]
  output = chassis_kp * error + chassis_ki * *error_int
      + chassis_kd * *error_der; //Proportional controller

  float MAX_ERROR_INT = 10000;

  if (*error_int > MAX_ERROR_INT)
 8002bd8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8002c90 <_ZL17pid_control_wheelssPfS_Ps+0xe0>
  *error_der = (error - *previous_error) / dt;
 8002bdc:	1a20      	subs	r0, r4, r0
 8002bde:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002be2:	1040      	asrs	r0, r0, #1
 8002be4:	f7fe f848 	bl	8000c78 <__aeabi_i2f>
 8002be8:	6030      	str	r0, [r6, #0]
 8002bea:	4682      	mov	sl, r0
  output = chassis_kp * error + chassis_ki * *error_int
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7fe f843 	bl	8000c78 <__aeabi_i2f>
 8002bf2:	4923      	ldr	r1, [pc, #140]	; (8002c80 <_ZL17pid_control_wheelssPfS_Ps+0xd0>)
 8002bf4:	f7fe f894 	bl	8000d20 <__aeabi_fmul>
 8002bf8:	f8d5 9000 	ldr.w	r9, [r5]
 8002bfc:	4606      	mov	r6, r0
 8002bfe:	4921      	ldr	r1, [pc, #132]	; (8002c84 <_ZL17pid_control_wheelssPfS_Ps+0xd4>)
 8002c00:	4648      	mov	r0, r9
 8002c02:	f7fe f88d 	bl	8000d20 <__aeabi_fmul>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4630      	mov	r0, r6
 8002c0a:	f7fd ff81 	bl	8000b10 <__addsf3>
      + chassis_kd * *error_der; //Proportional controller
 8002c0e:	491e      	ldr	r1, [pc, #120]	; (8002c88 <_ZL17pid_control_wheelssPfS_Ps+0xd8>)
  output = chassis_kp * error + chassis_ki * *error_int
 8002c10:	4606      	mov	r6, r0
      + chassis_kd * *error_der; //Proportional controller
 8002c12:	4650      	mov	r0, sl
 8002c14:	f7fe f884 	bl	8000d20 <__aeabi_fmul>
 8002c18:	4601      	mov	r1, r0
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	f7fd ff78 	bl	8000b10 <__addsf3>
  output = chassis_kp * error + chassis_ki * *error_int
 8002c20:	f7fe fa44 	bl	80010ac <__aeabi_f2iz>
  if (*error_int > MAX_ERROR_INT)
 8002c24:	4641      	mov	r1, r8
  output = chassis_kp * error + chassis_ki * *error_int
 8002c26:	b206      	sxth	r6, r0
  if (*error_int > MAX_ERROR_INT)
 8002c28:	4648      	mov	r0, r9
 8002c2a:	f7fe fa35 	bl	8001098 <__aeabi_fcmpgt>
 8002c2e:	b930      	cbnz	r0, 8002c3e <_ZL17pid_control_wheelssPfS_Ps+0x8e>
    *error_int = MAX_ERROR_INT;
  else if (*error_int < -MAX_ERROR_INT)
 8002c30:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8002c94 <_ZL17pid_control_wheelssPfS_Ps+0xe4>
 8002c34:	4648      	mov	r0, r9
 8002c36:	4641      	mov	r1, r8
 8002c38:	f7fe fa10 	bl	800105c <__aeabi_fcmplt>
 8002c3c:	b108      	cbz	r0, 8002c42 <_ZL17pid_control_wheelssPfS_Ps+0x92>
    *error_int = -MAX_ERROR_INT;
 8002c3e:	f8c5 8000 	str.w	r8, [r5]

  chThdSleepMilliseconds(dt);
 8002c42:	2004      	movs	r0, #4
 8002c44:	f7ff fdec 	bl	8002820 <chThdSleep>
 8002c48:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <_ZL17pid_control_wheelssPfS_Ps+0xdc>)
  if (output > 10000)
    output = 10000;
  else if (output < -10000)
    output = -10000;

  return output;
 8002c4a:	f242 7010 	movw	r0, #10000	; 0x2710
 8002c4e:	429e      	cmp	r6, r3
 8002c50:	bfb8      	it	lt
 8002c52:	461e      	movlt	r6, r3
}
 8002c54:	42b0      	cmp	r0, r6
  *previous_error = error;
 8002c56:	803c      	strh	r4, [r7, #0]
}
 8002c58:	bfa8      	it	ge
 8002c5a:	4630      	movge	r0, r6
 8002c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(setPoint != 0) *error_int *= 0.95;
 8002c60:	f7fd fc6e 	bl	8000540 <__aeabi_f2d>
 8002c64:	a304      	add	r3, pc, #16	; (adr r3, 8002c78 <_ZL17pid_control_wheelssPfS_Ps+0xc8>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fcc1 	bl	80005f0 <__aeabi_dmul>
 8002c6e:	f7fd fef9 	bl	8000a64 <__aeabi_d2f>
 8002c72:	6028      	str	r0, [r5, #0]
 8002c74:	e7ae      	b.n	8002bd4 <_ZL17pid_control_wheelssPfS_Ps+0x24>
 8002c76:	bf00      	nop
 8002c78:	66666666 	.word	0x66666666
 8002c7c:	3fee6666 	.word	0x3fee6666
 8002c80:	3f19999a 	.word	0x3f19999a
 8002c84:	3df5c28f 	.word	0x3df5c28f
 8002c88:	3d75c28f 	.word	0x3d75c28f
 8002c8c:	ffffd8f0 	.word	0xffffd8f0
 8002c90:	461c4000 	.word	0x461c4000
 8002c94:	c61c4000 	.word	0xc61c4000
	...

08002ca0 <_ZL17motor_ctrl_threadPv>:

static THD_WORKING_AREA(motor_ctrl_thread_wa,512);
static THD_FUNCTION(motor_ctrl_thread, p) {
 8002ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca4:	b085      	sub	sp, #20
  (void)p;
  int16_t strafe = 0, drive = 0, rotation = 0;   //move direction for chassis
  volatile Encoder_canStruct* encoder = can_getEncoder(); //Pointer to motor encoder feedback
 8002ca6:	f000 fbc3 	bl	8003430 <_Z14can_getEncoderv>
 8002caa:	4d59      	ldr	r5, [pc, #356]	; (8002e10 <_ZL17motor_ctrl_threadPv+0x170>)
 8002cac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8002e20 <_ZL17motor_ctrl_threadPv+0x180>
 8002cb0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002e28 <_ZL17motor_ctrl_threadPv+0x188>
 8002cb4:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002e2c <_ZL17motor_ctrl_threadPv+0x18c>
 8002cb8:	9003      	str	r0, [sp, #12]

  while (true) {

    //NOTE: A special question for you: how we decide this value
    //"12000/1320"
    if ((rc->channel0 - 1024) > -45 && (rc->channel0 - 1024) < 45)
 8002cba:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <_ZL17motor_ctrl_threadPv+0x174>)
 8002cbc:	681e      	ldr	r6, [r3, #0]
 8002cbe:	8830      	ldrh	r0, [r6, #0]
 8002cc0:	f5a0 7375 	sub.w	r3, r0, #980	; 0x3d4
 8002cc4:	2b58      	cmp	r3, #88	; 0x58
 8002cc6:	f240 809e 	bls.w	8002e06 <_ZL17motor_ctrl_threadPv+0x166>
 8002cca:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8002cce:	f7fd ffd3 	bl	8000c78 <__aeabi_i2f>
 8002cd2:	4951      	ldr	r1, [pc, #324]	; (8002e18 <_ZL17motor_ctrl_threadPv+0x178>)
 8002cd4:	f7fe f824 	bl	8000d20 <__aeabi_fmul>
 8002cd8:	4950      	ldr	r1, [pc, #320]	; (8002e1c <_ZL17motor_ctrl_threadPv+0x17c>)
 8002cda:	f7fe f8d5 	bl	8000e88 <__aeabi_fdiv>
 8002cde:	f7fe f9e5 	bl	80010ac <__aeabi_f2iz>
 8002ce2:	b284      	uxth	r4, r0
      rc->channel0 = 1024;
    if ((rc->channel1 - 1024) > -45 && (rc->channel1 - 1024) < 45)
 8002ce4:	8870      	ldrh	r0, [r6, #2]
 8002ce6:	f5a0 7375 	sub.w	r3, r0, #980	; 0x3d4
 8002cea:	2b58      	cmp	r3, #88	; 0x58
 8002cec:	f240 8084 	bls.w	8002df8 <_ZL17motor_ctrl_threadPv+0x158>
 8002cf0:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8002cf4:	f7fd ffc0 	bl	8000c78 <__aeabi_i2f>
 8002cf8:	4947      	ldr	r1, [pc, #284]	; (8002e18 <_ZL17motor_ctrl_threadPv+0x178>)
 8002cfa:	f7fe f811 	bl	8000d20 <__aeabi_fmul>
 8002cfe:	4947      	ldr	r1, [pc, #284]	; (8002e1c <_ZL17motor_ctrl_threadPv+0x17c>)
 8002d00:	f7fe f8c2 	bl	8000e88 <__aeabi_fdiv>
 8002d04:	f7fe f9d2 	bl	80010ac <__aeabi_f2iz>
 8002d08:	fa1f fb80 	uxth.w	fp, r0
 8002d0c:	eb04 000b 	add.w	r0, r4, fp
 8002d10:	b287      	uxth	r7, r0
      rc->channel1 = 1024;
    if ((rc->channel2 - 1024) > -45 && (rc->channel2 - 1024) < 45)
 8002d12:	88b0      	ldrh	r0, [r6, #4]
 8002d14:	f5a0 7375 	sub.w	r3, r0, #980	; 0x3d4
 8002d18:	2b58      	cmp	r3, #88	; 0x58
 8002d1a:	d966      	bls.n	8002dea <_ZL17motor_ctrl_threadPv+0x14a>
 8002d1c:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8002d20:	f7fd ffaa 	bl	8000c78 <__aeabi_i2f>
 8002d24:	493c      	ldr	r1, [pc, #240]	; (8002e18 <_ZL17motor_ctrl_threadPv+0x178>)
 8002d26:	f7fd fffb 	bl	8000d20 <__aeabi_fmul>
 8002d2a:	493c      	ldr	r1, [pc, #240]	; (8002e1c <_ZL17motor_ctrl_threadPv+0x17c>)
 8002d2c:	f7fe f8ac 	bl	8000e88 <__aeabi_fdiv>
 8002d30:	f7fe f9bc 	bl	80010ac <__aeabi_f2iz>
 8002d34:	b282      	uxth	r2, r0
 8002d36:	eb0b 0302 	add.w	r3, fp, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	1abf      	subs	r7, r7, r2
 8002d3e:	18e0      	adds	r0, r4, r3
 8002d40:	4422      	add	r2, r4
 8002d42:	b2b9      	uxth	r1, r7
 8002d44:	b292      	uxth	r2, r2
 8002d46:	b287      	uxth	r7, r0
    rotation = (rc->channel0 - 1024) * 12000.0f / 1320.0f;

    drive_meccanum(strafe, drive, rotation);


    if(rc -> channel3 > 1024){
 8002d48:	88f6      	ldrh	r6, [r6, #6]
  motor_speed_sp[FL_WHEEL] = +drive + strafe + rotation;
 8002d4a:	b238      	sxth	r0, r7
  motor_speed_sp[FR_WHEEL] = -drive + strafe + rotation;
 8002d4c:	eba2 020b 	sub.w	r2, r2, fp
  motor_speed_sp[BR_WHEEL] = -drive - strafe + rotation;
 8002d50:	1ae3      	subs	r3, r4, r3
    if(rc -> channel3 > 1024){
 8002d52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  motor_speed_sp[FL_WHEEL] = +drive + strafe + rotation;
 8002d56:	8028      	strh	r0, [r5, #0]
  motor_speed_sp[FR_WHEEL] = -drive + strafe + rotation;
 8002d58:	806a      	strh	r2, [r5, #2]
  motor_speed_sp[BR_WHEEL] = -drive - strafe + rotation;
 8002d5a:	80ab      	strh	r3, [r5, #4]
  motor_speed_sp[BL_WHEEL] = +drive - strafe + rotation;
 8002d5c:	80e9      	strh	r1, [r5, #6]
    if(rc -> channel3 > 1024){
 8002d5e:	d818      	bhi.n	8002d92 <_ZL17motor_ctrl_threadPv+0xf2>
 8002d60:	2400      	movs	r4, #0
 8002d62:	9e03      	ldr	r6, [sp, #12]
 8002d64:	4f2e      	ldr	r7, [pc, #184]	; (8002e20 <_ZL17motor_ctrl_threadPv+0x180>)
                                    &motor_error_int[i], &motor_error_der[i],
                                    &previous_error[i]);
    }
    else
      for (int i = 0; i < 4; i++)
        motor_output[i] = pid_control_wheel(motor_speed_sp[i], (encoder + i)->speed_rpm,
 8002d66:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <_ZL17motor_ctrl_threadPv+0x184>)
 8002d68:	8871      	ldrh	r1, [r6, #2]
 8002d6a:	eb03 0c04 	add.w	ip, r3, r4
 8002d6e:	0062      	lsls	r2, r4, #1
 8002d70:	eb09 0302 	add.w	r3, r9, r2
 8002d74:	b209      	sxth	r1, r1
 8002d76:	4442      	add	r2, r8
 8002d78:	f8cd c000 	str.w	ip, [sp]
 8002d7c:	f7ff ff18 	bl	8002bb0 <_ZL17pid_control_wheelssPfS_Ps>
 8002d80:	3402      	adds	r4, #2
      for (int i = 0; i < 4; i++)
 8002d82:	2c08      	cmp	r4, #8
 8002d84:	f106 0618 	add.w	r6, r6, #24
        motor_output[i] = pid_control_wheel(motor_speed_sp[i], (encoder + i)->speed_rpm,
 8002d88:	f827 0b02 	strh.w	r0, [r7], #2
      for (int i = 0; i < 4; i++)
 8002d8c:	d01c      	beq.n	8002dc8 <_ZL17motor_ctrl_threadPv+0x128>
 8002d8e:	5f28      	ldrsh	r0, [r5, r4]
 8002d90:	e7e9      	b.n	8002d66 <_ZL17motor_ctrl_threadPv+0xc6>
      gripper::rotate(3);
 8002d92:	2400      	movs	r4, #0
 8002d94:	2003      	movs	r0, #3
 8002d96:	f000 f953 	bl	8003040 <_ZN7gripper6rotateEi>
 8002d9a:	4e22      	ldr	r6, [pc, #136]	; (8002e24 <_ZL17motor_ctrl_threadPv+0x184>)
 8002d9c:	9f03      	ldr	r7, [sp, #12]
 8002d9e:	f8df b080 	ldr.w	fp, [pc, #128]	; 8002e20 <_ZL17motor_ctrl_threadPv+0x180>
        motor_output[i] = pid_control_wheel(0, (encoder + i)->speed_rpm,
 8002da2:	8879      	ldrh	r1, [r7, #2]
 8002da4:	eb09 0304 	add.w	r3, r9, r4
 8002da8:	9600      	str	r6, [sp, #0]
 8002daa:	eb08 0204 	add.w	r2, r8, r4
 8002dae:	b209      	sxth	r1, r1
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7ff fefd 	bl	8002bb0 <_ZL17pid_control_wheelssPfS_Ps>
 8002db6:	3404      	adds	r4, #4
      for (int i = 0; i < 4; i++)
 8002db8:	2c10      	cmp	r4, #16
 8002dba:	f107 0718 	add.w	r7, r7, #24
 8002dbe:	f106 0602 	add.w	r6, r6, #2
        motor_output[i] = pid_control_wheel(0, (encoder + i)->speed_rpm,
 8002dc2:	f82b 0b02 	strh.w	r0, [fp], #2
      for (int i = 0; i < 4; i++)
 8002dc6:	d1ec      	bne.n	8002da2 <_ZL17motor_ctrl_threadPv+0x102>
                                    &motor_error_int[i], &motor_error_der[i],
                                    &previous_error[i]);


    can_motorSetCurrent(0x200, motor_output[FL_WHEEL], motor_output[FR_WHEEL],
 8002dc8:	f9ba 0006 	ldrsh.w	r0, [sl, #6]
 8002dcc:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 8002dd0:	9000      	str	r0, [sp, #0]
 8002dd2:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 8002dd6:	f9ba 1000 	ldrsh.w	r1, [sl]
 8002dda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dde:	f000 fb2f 	bl	8003440 <_Z19can_motorSetCurrenttssss>
                        motor_output[BR_WHEEL], motor_output[BL_WHEEL]);

    chThdSleepMilliseconds(2);
 8002de2:	2004      	movs	r0, #4
 8002de4:	f7ff fd1c 	bl	8002820 <chThdSleep>
  }
 8002de8:	e767      	b.n	8002cba <_ZL17motor_ctrl_threadPv+0x1a>
      rc->channel2 = 1024;
 8002dea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002dee:	4639      	mov	r1, r7
 8002df0:	4622      	mov	r2, r4
 8002df2:	465b      	mov	r3, fp
 8002df4:	80b0      	strh	r0, [r6, #4]
 8002df6:	e7a7      	b.n	8002d48 <_ZL17motor_ctrl_threadPv+0xa8>
      rc->channel1 = 1024;
 8002df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfc:	4627      	mov	r7, r4
 8002dfe:	f04f 0b00 	mov.w	fp, #0
 8002e02:	8073      	strh	r3, [r6, #2]
 8002e04:	e785      	b.n	8002d12 <_ZL17motor_ctrl_threadPv+0x72>
      rc->channel0 = 1024;
 8002e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e0a:	2400      	movs	r4, #0
 8002e0c:	8033      	strh	r3, [r6, #0]
 8002e0e:	e769      	b.n	8002ce4 <_ZL17motor_ctrl_threadPv+0x44>
 8002e10:	20000a7c 	.word	0x20000a7c
 8002e14:	20000d50 	.word	0x20000d50
 8002e18:	463b8000 	.word	0x463b8000
 8002e1c:	44a50000 	.word	0x44a50000
 8002e20:	20000a74 	.word	0x20000a74
 8002e24:	20000d54 	.word	0x20000d54
 8002e28:	20000d5c 	.word	0x20000d5c
 8002e2c:	20000d6c 	.word	0x20000d6c

08002e30 <main>:
}

int main(void) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 8002e34:	f7fe f9b4 	bl	80011a0 <halInit>

  rc = RC_get();



  palSetPad(GPIOA, 0);
 8002e38:	2701      	movs	r7, #1
  chSysInit();
 8002e3a:	f7ff f9b1 	bl	80021a0 <chSysInit>
  palSetPad(GPIOA, 1);
  palSetPad(GPIOA, 2);
  palSetPad(GPIOA, 7);


  chThdCreateStatic(motor_ctrl_thread_wa, sizeof(motor_ctrl_thread_wa),
 8002e3e:	2600      	movs	r6, #0
  RC_init();
 8002e40:	f000 fa26 	bl	8003290 <_Z7RC_initv>
  can_processInit();
 8002e44:	f000 fb34 	bl	80034b0 <_Z15can_processInitv>
  rc = RC_get();
 8002e48:	f000 fa1a 	bl	8003280 <_Z6RC_getv>
  palSetPad(GPIOA, 7);
 8002e4c:	2180      	movs	r1, #128	; 0x80
  palSetPad(GPIOA, 1);
 8002e4e:	2202      	movs	r2, #2
  palSetPad(GPIOA, 2);
 8002e50:	2304      	movs	r3, #4
  palSetPad(GPIOA, 0);
 8002e52:	4d16      	ldr	r5, [pc, #88]	; (8002eac <main+0x7c>)
  rc = RC_get();
 8002e54:	4c16      	ldr	r4, [pc, #88]	; (8002eb0 <main+0x80>)
 8002e56:	6020      	str	r0, [r4, #0]
  palSetPad(GPIOA, 0);
 8002e58:	612f      	str	r7, [r5, #16]
  chThdCreateStatic(motor_ctrl_thread_wa, sizeof(motor_ctrl_thread_wa),
 8002e5a:	4816      	ldr	r0, [pc, #88]	; (8002eb4 <main+0x84>)
  palSetPad(GPIOA, 1);
 8002e5c:	612a      	str	r2, [r5, #16]
  palSetPad(GPIOA, 2);
 8002e5e:	612b      	str	r3, [r5, #16]
  chThdCreateStatic(motor_ctrl_thread_wa, sizeof(motor_ctrl_thread_wa),
 8002e60:	460a      	mov	r2, r1
  palSetPad(GPIOA, 7);
 8002e62:	6129      	str	r1, [r5, #16]
  chThdCreateStatic(motor_ctrl_thread_wa, sizeof(motor_ctrl_thread_wa),
 8002e64:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <main+0x88>)
 8002e66:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8002e6a:	9600      	str	r6, [sp, #0]
 8002e6c:	f7ff fc68 	bl	8002740 <chThdCreateStatic>
  /*
   * Normal main() thread activity
   */

  while (true) {
    palTogglePad(GPIOA, GPIOA_LED);
 8002e70:	68eb      	ldr	r3, [r5, #12]
 8002e72:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8002e76:	60eb      	str	r3, [r5, #12]

    gripper::rotate(rc->s2);
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	7a58      	ldrb	r0, [r3, #9]
 8002e7c:	f000 f8e0 	bl	8003040 <_ZN7gripper6rotateEi>

    gripper::grip(rc->channel3-364);
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	88d8      	ldrh	r0, [r3, #6]
 8002e84:	f5b0 70b6 	subs.w	r0, r0, #364	; 0x16c
 8002e88:	bf18      	it	ne
 8002e8a:	2001      	movne	r0, #1
 8002e8c:	f000 f818 	bl	8002ec0 <_ZN7gripper4gripEb>

    if(rc->s1 != 3) gripper::sub_grip(rc->s1 - 1);
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	7a18      	ldrb	r0, [r3, #8]
 8002e94:	2803      	cmp	r0, #3
 8002e96:	d005      	beq.n	8002ea4 <main+0x74>
 8002e98:	f110 30ff 	adds.w	r0, r0, #4294967295
 8002e9c:	bf18      	it	ne
 8002e9e:	2001      	movne	r0, #1
 8002ea0:	f000 f81e 	bl	8002ee0 <_ZN7gripper8sub_gripEb>

    chThdSleepMilliseconds(2);
 8002ea4:	2004      	movs	r0, #4
 8002ea6:	f7ff fcbb 	bl	8002820 <chThdSleep>
    palTogglePad(GPIOA, GPIOA_LED);
 8002eaa:	e7e1      	b.n	8002e70 <main+0x40>
 8002eac:	40010800 	.word	0x40010800
 8002eb0:	20000d50 	.word	0x20000d50
 8002eb4:	20000a88 	.word	0x20000a88
 8002eb8:	08002ca1 	.word	0x08002ca1
 8002ebc:	00000000 	.word	0x00000000

08002ec0 <_ZN7gripper4gripEb>:

int16_t gripper::motor_output = 0;

void gripper::grip(bool close){
    if(close == 0){     //want the griper to grip sth
      palClearPad(GPIOA, 1);
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <_ZN7gripper4gripEb+0x10>)
    if(close == 0){     //want the griper to grip sth
 8002ec4:	b108      	cbz	r0, 8002eca <_ZN7gripper4gripEb+0xa>
    }
    else{               //relax the griper
      palSetPad(GPIOA, 1);
 8002ec6:	611a      	str	r2, [r3, #16]
    }
}
 8002ec8:	4770      	bx	lr
      palClearPad(GPIOA, 1);
 8002eca:	615a      	str	r2, [r3, #20]
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40010800 	.word	0x40010800
	...

08002ee0 <_ZN7gripper8sub_gripEb>:
      break;
    }
  }
}

void gripper::sub_grip(bool action){
 8002ee0:	b538      	push	{r3, r4, r5, lr}
    if(action == 0){        //action1:down,grip,up
      palClearPad(GPIOA,0);
 8002ee2:	2501      	movs	r5, #1
 8002ee4:	4c0e      	ldr	r4, [pc, #56]	; (8002f20 <_ZN7gripper8sub_gripEb+0x40>)
    if(action == 0){        //action1:down,grip,up
 8002ee6:	b188      	cbz	r0, 8002f0c <_ZN7gripper8sub_gripEb+0x2c>
      palSetPad(GPIOA,0);
      chThdSleepMilliseconds(1000);
    }
    else{                   //action2:down,relax,up
      palClearPad(GPIOA,0);
      chThdSleepMilliseconds(1000);
 8002ee8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
      palClearPad(GPIOA,0);
 8002eec:	6165      	str	r5, [r4, #20]
      chThdSleepMilliseconds(1000);
 8002eee:	f7ff fc97 	bl	8002820 <chThdSleep>
      palClearPad(GPIOA,7);
 8002ef2:	2380      	movs	r3, #128	; 0x80
      chThdSleepMilliseconds(1000);
 8002ef4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
      palClearPad(GPIOA,7);
 8002ef8:	6163      	str	r3, [r4, #20]
      chThdSleepMilliseconds(1000);
 8002efa:	f7ff fc91 	bl	8002820 <chThdSleep>
      palSetPad(GPIOA,0);
 8002efe:	6125      	str	r5, [r4, #16]
      chThdSleepMilliseconds(1000);
 8002f00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    }
}
 8002f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      chThdSleepMilliseconds(1000);
 8002f08:	f7ff bc8a 	b.w	8002820 <chThdSleep>
      chThdSleepMilliseconds(1000);
 8002f0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
      palClearPad(GPIOA,0);
 8002f10:	6165      	str	r5, [r4, #20]
      chThdSleepMilliseconds(1000);
 8002f12:	f7ff fc85 	bl	8002820 <chThdSleep>
      palSetPad(GPIOA,7);
 8002f16:	2380      	movs	r3, #128	; 0x80
      chThdSleepMilliseconds(1000);
 8002f18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
      palSetPad(GPIOA,7);
 8002f1c:	6123      	str	r3, [r4, #16]
 8002f1e:	e7ec      	b.n	8002efa <_ZN7gripper8sub_gripEb+0x1a>
 8002f20:	40010800 	.word	0x40010800
	...

08002f30 <_ZN7gripper11pid_controlEffPfS0_Ps>:

int16_t gripper::pid_control(const float setPoint, const float current,
                           float* error_int, float* error_der,
                           int16_t* previous_error) {
 8002f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f34:	4614      	mov	r4, r2
 8002f36:	461f      	mov	r7, r3
  int16_t output = 0;

  int16_t error = 0;


  error = setPoint - current;
 8002f38:	f7fd fde8 	bl	8000b0c <__aeabi_fsub>
 8002f3c:	f7fe f8b6 	bl	80010ac <__aeabi_f2iz>
 8002f40:	b206      	sxth	r6, r0
  *error_int += error;
 8002f42:	4630      	mov	r0, r6
 8002f44:	f7fd fe98 	bl	8000c78 <__aeabi_i2f>
 8002f48:	6821      	ldr	r1, [r4, #0]
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	f7fd fde0 	bl	8000b10 <__addsf3>
  *error_int *= 0.5;
 8002f50:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002f54:	f7fd fee4 	bl	8000d20 <__aeabi_fmul>
                           int16_t* previous_error) {
 8002f58:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  *error_int *= 0.5;
 8002f5c:	6020      	str	r0, [r4, #0]

  *error_der = (error - *previous_error);
 8002f5e:	f9b9 0000 	ldrsh.w	r0, [r9]
 8002f62:	1a30      	subs	r0, r6, r0
 8002f64:	f7fd fe88 	bl	8000c78 <__aeabi_i2f>

  if(error <= 19*pi/3 && error >= -19*pi/3) gripper_kp = 150;
 8002f68:	4929      	ldr	r1, [pc, #164]	; (8003010 <_ZN7gripper11pid_controlEffPfS0_Ps+0xe0>)
  *error_der = (error - *previous_error);
 8002f6a:	4680      	mov	r8, r0
 8002f6c:	6038      	str	r0, [r7, #0]
  if(error <= 19*pi/3 && error >= -19*pi/3) gripper_kp = 150;
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f7fe f87e 	bl	8001070 <__aeabi_fcmple>
 8002f74:	b128      	cbz	r0, 8002f82 <_ZN7gripper11pid_controlEffPfS0_Ps+0x52>
 8002f76:	4927      	ldr	r1, [pc, #156]	; (8003014 <_ZN7gripper11pid_controlEffPfS0_Ps+0xe4>)
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f7fe f883 	bl	8001084 <__aeabi_fcmpge>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d13e      	bne.n	8003000 <_ZN7gripper11pid_controlEffPfS0_Ps+0xd0>
 8002f82:	4b25      	ldr	r3, [pc, #148]	; (8003018 <_ZN7gripper11pid_controlEffPfS0_Ps+0xe8>)
 8002f84:	f8d3 b000 	ldr.w	fp, [r3]


  output = gripper::gripper_kp * error + gripper::gripper_ki * *error_int
 8002f88:	4b24      	ldr	r3, [pc, #144]	; (800301c <_ZN7gripper11pid_controlEffPfS0_Ps+0xec>)
 8002f8a:	6827      	ldr	r7, [r4, #0]
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	4638      	mov	r0, r7
 8002f90:	f7fd fec6 	bl	8000d20 <__aeabi_fmul>
 8002f94:	4659      	mov	r1, fp
 8002f96:	4682      	mov	sl, r0
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f7fd fec1 	bl	8000d20 <__aeabi_fmul>
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	4650      	mov	r0, sl
 8002fa2:	f7fd fdb5 	bl	8000b10 <__addsf3>
      + gripper::gripper_kd * *error_der; //Proportional controller
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <_ZN7gripper11pid_controlEffPfS0_Ps+0xf0>)
  output = gripper::gripper_kp * error + gripper::gripper_ki * *error_int
 8002fa8:	4605      	mov	r5, r0
      + gripper::gripper_kd * *error_der; //Proportional controller
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	4640      	mov	r0, r8
 8002fae:	f7fd feb7 	bl	8000d20 <__aeabi_fmul>
 8002fb2:	4601      	mov	r1, r0
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f7fd fdab 	bl	8000b10 <__addsf3>
  output = gripper::gripper_kp * error + gripper::gripper_ki * *error_int
 8002fba:	f7fe f877 	bl	80010ac <__aeabi_f2iz>

      //NOTE: Limit your maximum integrated error is often useful
  float MAX_ERROR_INT = 10000000000;

  if (*error_int > MAX_ERROR_INT)
 8002fbe:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800302c <_ZN7gripper11pid_controlEffPfS0_Ps+0xfc>
  output = gripper::gripper_kp * error + gripper::gripper_ki * *error_int
 8002fc2:	b205      	sxth	r5, r0
  if (*error_int > MAX_ERROR_INT)
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	4638      	mov	r0, r7
 8002fc8:	f7fe f866 	bl	8001098 <__aeabi_fcmpgt>
 8002fcc:	b930      	cbnz	r0, 8002fdc <_ZN7gripper11pid_controlEffPfS0_Ps+0xac>
    *error_int = MAX_ERROR_INT;
  else if (*error_int < -MAX_ERROR_INT)
 8002fce:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8003030 <_ZN7gripper11pid_controlEffPfS0_Ps+0x100>
 8002fd2:	4638      	mov	r0, r7
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	f7fe f841 	bl	800105c <__aeabi_fcmplt>
 8002fda:	b108      	cbz	r0, 8002fe0 <_ZN7gripper11pid_controlEffPfS0_Ps+0xb0>
    *error_int = -MAX_ERROR_INT;
 8002fdc:	f8c4 8000 	str.w	r8, [r4]

  chThdSleepMilliseconds(2);
 8002fe0:	2004      	movs	r0, #4
 8002fe2:	f7ff fc1d 	bl	8002820 <chThdSleep>
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <_ZN7gripper11pid_controlEffPfS0_Ps+0xf4>)
  if (output > 5000)
    output = 5000;
  else if (output < -5000)
    output = -5000;

  return output;
 8002fe8:	f241 3088 	movw	r0, #5000	; 0x1388
 8002fec:	429d      	cmp	r5, r3
 8002fee:	bfb8      	it	lt
 8002ff0:	461d      	movlt	r5, r3
}
 8002ff2:	42a8      	cmp	r0, r5
  *previous_error = error;
 8002ff4:	f8a9 6000 	strh.w	r6, [r9]
}
 8002ff8:	bfa8      	it	ge
 8002ffa:	4628      	movge	r0, r5
 8002ffc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(error <= 19*pi/3 && error >= -19*pi/3) gripper_kp = 150;
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <_ZN7gripper11pid_controlEffPfS0_Ps+0xf8>)
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <_ZN7gripper11pid_controlEffPfS0_Ps+0xe8>)
 8003004:	469b      	mov	fp, r3
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	f8d7 8000 	ldr.w	r8, [r7]
 800300c:	e7bc      	b.n	8002f88 <_ZN7gripper11pid_controlEffPfS0_Ps+0x58>
 800300e:	bf00      	nop
 8003010:	419f2c8d 	.word	0x419f2c8d
 8003014:	c19f2c8d 	.word	0xc19f2c8d
 8003018:	20000808 	.word	0x20000808
 800301c:	20000804 	.word	0x20000804
 8003020:	20000800 	.word	0x20000800
 8003024:	ffffec78 	.word	0xffffec78
 8003028:	43160000 	.word	0x43160000
 800302c:	501502f9 	.word	0x501502f9
 8003030:	d01502f9 	.word	0xd01502f9
	...

08003040 <_ZN7gripper6rotateEi>:
void gripper::rotate(int button){
 8003040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003044:	4604      	mov	r4, r0
 8003046:	b083      	sub	sp, #12
      can_motorSetCurrent(0x1FF, 0.25*motor_output, 0, 0, 0);
 8003048:	2600      	movs	r6, #0
 800304a:	4f3f      	ldr	r7, [pc, #252]	; (8003148 <_ZN7gripper6rotateEi+0x108>)
 800304c:	4d3f      	ldr	r5, [pc, #252]	; (800314c <_ZN7gripper6rotateEi+0x10c>)
      palClearPad(GPIOA,2);
 800304e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8003160 <_ZN7gripper6rotateEi+0x120>
      motor_output = pid_control(105*(pi/180)*19+initial_angle,
 8003052:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8003164 <_ZN7gripper6rotateEi+0x124>
 8003056:	e00b      	b.n	8003070 <_ZN7gripper6rotateEi+0x30>
    else if(button == 3){               //rotate the arm backward, meanwhile close the box
 8003058:	2c03      	cmp	r4, #3
 800305a:	d047      	beq.n	80030ec <_ZN7gripper6rotateEi+0xac>
    else if(button == 2){               //maintain the location of the arm, open the box
 800305c:	2c02      	cmp	r4, #2
 800305e:	d068      	beq.n	8003132 <_ZN7gripper6rotateEi+0xf2>
    chThdSleepMilliseconds(2);
 8003060:	2004      	movs	r0, #4
 8003062:	f7ff fbdd 	bl	8002820 <chThdSleep>
    if((encoder)->speed_rpm == 0) {
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	885b      	ldrh	r3, [r3, #2]
 800306a:	b21b      	sxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d032      	beq.n	80030d6 <_ZN7gripper6rotateEi+0x96>
    if(button == 1){                    //rotate the arm forward
 8003070:	2c01      	cmp	r4, #1
 8003072:	d1f1      	bne.n	8003058 <_ZN7gripper6rotateEi+0x18>
      motor_output = pid_control(105*(pi/180)*19+initial_angle,
 8003074:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8003168 <_ZN7gripper6rotateEi+0x128>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	f8da 0000 	ldr.w	r0, [sl]
 800307e:	4641      	mov	r1, r8
                                 (encoder)->radian_angle,
 8003080:	f8d3 b010 	ldr.w	fp, [r3, #16]
      motor_output = pid_control(105*(pi/180)*19+initial_angle,
 8003084:	f7fd fd44 	bl	8000b10 <__addsf3>
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <_ZN7gripper6rotateEi+0x110>)
 800308a:	4a32      	ldr	r2, [pc, #200]	; (8003154 <_ZN7gripper6rotateEi+0x114>)
 800308c:	4659      	mov	r1, fp
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	4b31      	ldr	r3, [pc, #196]	; (8003158 <_ZN7gripper6rotateEi+0x118>)
 8003092:	f7ff ff4d 	bl	8002f30 <_ZN7gripper11pid_controlEffPfS0_Ps>
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <_ZN7gripper6rotateEi+0x11c>)
 8003098:	8018      	strh	r0, [r3, #0]
      can_motorSetCurrent(0x1FF, 0.25*motor_output, 0, 0, 0);
 800309a:	f7fd fa3f 	bl	800051c <__aeabi_i2d>
 800309e:	4632      	mov	r2, r6
 80030a0:	463b      	mov	r3, r7
 80030a2:	f7fd faa5 	bl	80005f0 <__aeabi_dmul>
 80030a6:	f7fd fcb5 	bl	8000a14 <__aeabi_d2iz>
 80030aa:	2300      	movs	r3, #0
 80030ac:	b201      	sxth	r1, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030b6:	f000 f9c3 	bl	8003440 <_Z19can_motorSetCurrenttssss>
      if((encoder)->radian_angle == 105*(pi/180)*19+initial_angle) {
 80030ba:	682b      	ldr	r3, [r5, #0]
 80030bc:	f8da 0000 	ldr.w	r0, [sl]
 80030c0:	4641      	mov	r1, r8
 80030c2:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80030c6:	f7fd fd23 	bl	8000b10 <__addsf3>
 80030ca:	4601      	mov	r1, r0
 80030cc:	4650      	mov	r0, sl
 80030ce:	f7fd ffbb 	bl	8001048 <__aeabi_fcmpeq>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d0c4      	beq.n	8003060 <_ZN7gripper6rotateEi+0x20>
        can_motorSetCurrent(0x1FF, 0, 0, 0, 0);
 80030d6:	2300      	movs	r3, #0
 80030d8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	4619      	mov	r1, r3
 80030e2:	f000 f9ad 	bl	8003440 <_Z19can_motorSetCurrenttssss>
}
 80030e6:	b003      	add	sp, #12
 80030e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      motor_output = pid_control(initial_angle,
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	f8df a078 	ldr.w	sl, [pc, #120]	; 8003168 <_ZN7gripper6rotateEi+0x128>
                                 (encoder)->radian_angle,
 80030f2:	6919      	ldr	r1, [r3, #16]
      motor_output = pid_control(initial_angle,
 80030f4:	4b16      	ldr	r3, [pc, #88]	; (8003150 <_ZN7gripper6rotateEi+0x110>)
 80030f6:	f8da 0000 	ldr.w	r0, [sl]
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <_ZN7gripper6rotateEi+0x114>)
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <_ZN7gripper6rotateEi+0x118>)
 8003100:	f7ff ff16 	bl	8002f30 <_ZN7gripper11pid_controlEffPfS0_Ps>
      can_motorSetCurrent(0x1FF, 15*motor_output, 0, 0, 0);
 8003104:	2300      	movs	r3, #0
      motor_output = pid_control(initial_angle,
 8003106:	f8df c054 	ldr.w	ip, [pc, #84]	; 800315c <_ZN7gripper6rotateEi+0x11c>
      can_motorSetCurrent(0x1FF, 15*motor_output, 0, 0, 0);
 800310a:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
 800310e:	b209      	sxth	r1, r1
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	461a      	mov	r2, r3
      motor_output = pid_control(initial_angle,
 8003114:	f8ac 0000 	strh.w	r0, [ip]
      can_motorSetCurrent(0x1FF, 15*motor_output, 0, 0, 0);
 8003118:	f240 10ff 	movw	r0, #511	; 0x1ff
 800311c:	f000 f990 	bl	8003440 <_Z19can_motorSetCurrenttssss>
      if((encoder)->radian_angle == initial_angle) {
 8003120:	682b      	ldr	r3, [r5, #0]
 8003122:	f8da 1000 	ldr.w	r1, [sl]
 8003126:	6918      	ldr	r0, [r3, #16]
 8003128:	f7fd ff8e 	bl	8001048 <__aeabi_fcmpeq>
 800312c:	2800      	cmp	r0, #0
 800312e:	d097      	beq.n	8003060 <_ZN7gripper6rotateEi+0x20>
 8003130:	e7d1      	b.n	80030d6 <_ZN7gripper6rotateEi+0x96>
      palClearPad(GPIOA,2);
 8003132:	f04f 0a04 	mov.w	sl, #4
      chThdSleepMilliseconds(2000);
 8003136:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
      palClearPad(GPIOA,2);
 800313a:	f8c9 a014 	str.w	sl, [r9, #20]
      chThdSleepMilliseconds(2000);
 800313e:	f7ff fb6f 	bl	8002820 <chThdSleep>
      palSetPad(GPIOA,2);
 8003142:	f8c9 a010 	str.w	sl, [r9, #16]
 8003146:	e78b      	b.n	8003060 <_ZN7gripper6rotateEi+0x20>
 8003148:	3fd00000 	.word	0x3fd00000
 800314c:	20000d90 	.word	0x20000d90
 8003150:	20000d84 	.word	0x20000d84
 8003154:	20000d8c 	.word	0x20000d8c
 8003158:	20000d88 	.word	0x20000d88
 800315c:	20000d7c 	.word	0x20000d7c
 8003160:	40010800 	.word	0x40010800
 8003164:	420b46fb 	.word	0x420b46fb
 8003168:	20000d80 	.word	0x20000d80
 800316c:	00000000 	.word	0x00000000

08003170 <_GLOBAL__sub_I_encoder>:
}
 8003170:	b508      	push	{r3, lr}
volatile Encoder_canStruct* encoder = can_getEncoder(); //Pointer to motor encoder feedback
 8003172:	f000 f95d 	bl	8003430 <_Z14can_getEncoderv>
 8003176:	4b01      	ldr	r3, [pc, #4]	; (800317c <_GLOBAL__sub_I_encoder+0xc>)
 8003178:	6018      	str	r0, [r3, #0]
}
 800317a:	bd08      	pop	{r3, pc}
 800317c:	20000d90 	.word	0x20000d90

08003180 <_ZL16uart_dbus_threadPv>:

#define  DBUS_INIT_WAIT_TIME_MS      4U
#define  DBUS_WAIT_TIME_MS         100U
static THD_WORKING_AREA(uart_dbus_thread_wa, 512);
static THD_FUNCTION(uart_dbus_thread, p)
{
 8003180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8003184:	4e2f      	ldr	r6, [pc, #188]	; (8003244 <_ZL16uart_dbus_threadPv+0xc4>)
 8003186:	4a30      	ldr	r2, [pc, #192]	; (8003248 <_ZL16uart_dbus_threadPv+0xc8>)
 8003188:	69b3      	ldr	r3, [r6, #24]
    systime_t timeout = TIME_MS2I(DBUS_INIT_WAIT_TIME_MS);
    uint32_t count = 0;

    while(!chThdShouldTerminateX())
    {
        uartStopReceive(UART_DBUS);
 800318a:	4d30      	ldr	r5, [pc, #192]	; (800324c <_ZL16uart_dbus_threadPv+0xcc>)
 800318c:	619a      	str	r2, [r3, #24]
        uartStartReceive(UART_DBUS, DBUS_BUFFER_SIZE, rxbuf);
 800318e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003254 <_ZL16uart_dbus_threadPv+0xd4>

        chSysLock();
        chThdSuspendTimeoutS(&uart_dbus_thread_handler, TIME_INFINITE);
 8003192:	4f2f      	ldr	r7, [pc, #188]	; (8003250 <_ZL16uart_dbus_threadPv+0xd0>)
 8003194:	e002      	b.n	800319c <_ZL16uart_dbus_threadPv+0x1c>
        if(rxmsg == MSG_OK)
        {
            if(!rc_state)
            {
                timeout = TIME_MS2I(DBUS_WAIT_TIME_MS);
                rc_state = RC_UNLOCKED;
 8003196:	2203      	movs	r2, #3
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	69b3      	ldr	r3, [r6, #24]
    while(!chThdShouldTerminateX())
 800319c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031a0:	f013 0404 	ands.w	r4, r3, #4
 80031a4:	d14b      	bne.n	800323e <_ZL16uart_dbus_threadPv+0xbe>
        uartStopReceive(UART_DBUS);
 80031a6:	4628      	mov	r0, r5
 80031a8:	f7fe f8ea 	bl	8001380 <uartStopReceive>
        uartStartReceive(UART_DBUS, DBUS_BUFFER_SIZE, rxbuf);
 80031ac:	4a29      	ldr	r2, [pc, #164]	; (8003254 <_ZL16uart_dbus_threadPv+0xd4>)
 80031ae:	2112      	movs	r1, #18
 80031b0:	4628      	mov	r0, r5
 80031b2:	f7fe f8d5 	bl	8001360 <uartStartReceive>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80031b6:	f04f 0920 	mov.w	r9, #32
 80031ba:	f389 8811 	msr	BASEPRI, r9
        chThdSuspendTimeoutS(&uart_dbus_thread_handler, TIME_INFINITE);
 80031be:	f04f 31ff 	mov.w	r1, #4294967295
 80031c2:	4638      	mov	r0, r7
 80031c4:	f7ff fb3c 	bl	8002840 <chThdSuspendTimeoutS>
 80031c8:	f384 8811 	msr	BASEPRI, r4
            if(!rc_state)
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <_ZL16uart_dbus_threadPv+0xd8>)
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	2a00      	cmp	r2, #0
 80031d2:	d0e0      	beq.n	8003196 <_ZL16uart_dbus_threadPv+0x16>
 80031d4:	f389 8811 	msr	BASEPRI, r9
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 80031d8:	f898 1002 	ldrb.w	r1, [r8, #2]
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 80031dc:	f898 0003 	ldrb.w	r0, [r8, #3]
 80031e0:	ea4f 1ca1 	mov.w	ip, r1, asr #6
	RC_Ctl.channel3 = ((rxbuf[4]>>1) | (rxbuf[5]<<7)) & 0x07FF;
 80031e4:	f898 3005 	ldrb.w	r3, [r8, #5]
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 80031e8:	f898 2001 	ldrb.w	r2, [r8, #1]
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 80031ec:	f898 e004 	ldrb.w	lr, [r8, #4]
 80031f0:	ea4c 0c80 	orr.w	ip, ip, r0, lsl #2
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 80031f4:	f898 0000 	ldrb.w	r0, [r8]
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 80031f8:	0149      	lsls	r1, r1, #5
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 80031fa:	4c18      	ldr	r4, [pc, #96]	; (800325c <_ZL16uart_dbus_threadPv+0xdc>)
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 80031fc:	ea4c 2c8e 	orr.w	ip, ip, lr, lsl #10
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 8003200:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 8003204:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	RC_Ctl.channel3 = ((rxbuf[4]>>1) | (rxbuf[5]<<7)) & 0x07FF;
 8003208:	01da      	lsls	r2, r3, #7
 800320a:	ea42 025e 	orr.w	r2, r2, lr, lsr #1
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 800320e:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
	RC_Ctl.channel3 = ((rxbuf[4]>>1) | (rxbuf[5]<<7)) & 0x07FF;
 8003212:	f3c2 020a 	ubfx	r2, r2, #0, #11
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 8003216:	f3c1 010a 	ubfx	r1, r1, #0, #11
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 800321a:	f3c0 000a 	ubfx	r0, r0, #0, #11
	RC_Ctl.channel2 = ((rxbuf[2]>>6) | (rxbuf[3]<<2) | ((uint32_t)rxbuf[4]	<<10)) & 0x07FF;
 800321e:	f8a4 c004 	strh.w	ip, [r4, #4]
	RC_Ctl.s1 = ((rxbuf[5] >> 4)& 0x000C) >> 2;
 8003222:	ea4f 1c93 	mov.w	ip, r3, lsr #6
	RC_Ctl.s2 = ((rxbuf[5] >> 4)& 0x0003);
 8003226:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800322a:	7263      	strb	r3, [r4, #9]
	RC_Ctl.channel3 = ((rxbuf[4]>>1) | (rxbuf[5]<<7)) & 0x07FF;
 800322c:	80e2      	strh	r2, [r4, #6]
	RC_Ctl.channel1 = ((rxbuf[1]>>3) | (rxbuf[2]<<5)) & 0x07FF;
 800322e:	8061      	strh	r1, [r4, #2]
	RC_Ctl.channel0 = ((rxbuf[0]) | (rxbuf[1]<<8)) & 0x07FF;
 8003230:	8020      	strh	r0, [r4, #0]
	RC_Ctl.s1 = ((rxbuf[5] >> 4)& 0x000C) >> 2;
 8003232:	f884 c008 	strb.w	ip, [r4, #8]
 8003236:	2300      	movs	r3, #0
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	e7ad      	b.n	800319a <_ZL16uart_dbus_threadPv+0x1a>
            rc_state = RC_UNCONNECTED;
            RC_reset();
            timeout = TIME_MS2I(DBUS_INIT_WAIT_TIME_MS);
        }
    }
}
 800323e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003242:	bf00      	nop
 8003244:	20000998 	.word	0x20000998
 8003248:	0800373c 	.word	0x0800373c
 800324c:	200008a0 	.word	0x200008a0
 8003250:	20001060 	.word	0x20001060
 8003254:	20001064 	.word	0x20001064
 8003258:	20001082 	.word	0x20001082
 800325c:	20001078 	.word	0x20001078

08003260 <_ZL5rxendP10UARTDriver>:
{
 8003260:	b508      	push	{r3, lr}
 8003262:	2320      	movs	r3, #32
 8003264:	f383 8811 	msr	BASEPRI, r3
    chThdResumeI(&uart_dbus_thread_handler, MSG_OK);
 8003268:	2100      	movs	r1, #0
 800326a:	4803      	ldr	r0, [pc, #12]	; (8003278 <_ZL5rxendP10UARTDriver+0x18>)
 800326c:	f7ff faf8 	bl	8002860 <chThdResumeI>
 8003270:	2300      	movs	r3, #0
 8003272:	f383 8811 	msr	BASEPRI, r3
}
 8003276:	bd08      	pop	{r3, pc}
 8003278:	20001060 	.word	0x20001060
 800327c:	00000000 	.word	0x00000000

08003280 <_Z6RC_getv>:
}
 8003280:	4800      	ldr	r0, [pc, #0]	; (8003284 <_Z6RC_getv+0x4>)
 8003282:	4770      	bx	lr
 8003284:	20001078 	.word	0x20001078
	...

08003290 <_Z7RC_initv>:

/**
 * @brief   Initialize the RC receiver
 */
void RC_init(void)
{
 8003290:	b530      	push	{r4, r5, lr}
    RC_Ctl.channel0 = 1024;
 8003292:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
    RC_Ctl.channel3 = 1024;
 8003296:	2400      	movs	r4, #0
    RC_Ctl.channel0 = 1024;
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <_Z7RC_initv+0x38>)
    RC_reset();

    uartStart(UART_DBUS, &uart_cfg);
 800329a:	4d0c      	ldr	r5, [pc, #48]	; (80032cc <_Z7RC_initv+0x3c>)
{
 800329c:	b083      	sub	sp, #12
    RC_Ctl.channel1 = 1024;
 800329e:	e9c3 2200 	strd	r2, r2, [r3]
    RC_Ctl.channel3 = 1024;
 80032a2:	811c      	strh	r4, [r3, #8]
    uartStart(UART_DBUS, &uart_cfg);
 80032a4:	4628      	mov	r0, r5
 80032a6:	490a      	ldr	r1, [pc, #40]	; (80032d0 <_Z7RC_initv+0x40>)
 80032a8:	f7fe f84a 	bl	8001340 <uartStart>
    dmaStreamRelease(*UART_DBUS.dmatx);
 80032ac:	6968      	ldr	r0, [r5, #20]
 80032ae:	f7fe fd27 	bl	8001d00 <dmaStreamRelease>

    chThdCreateStatic(uart_dbus_thread_wa, sizeof(uart_dbus_thread_wa),
 80032b2:	9400      	str	r4, [sp, #0]
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <_Z7RC_initv+0x44>)
 80032b6:	2287      	movs	r2, #135	; 0x87
 80032b8:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80032bc:	4806      	ldr	r0, [pc, #24]	; (80032d8 <_Z7RC_initv+0x48>)
 80032be:	f7ff fa3f 	bl	8002740 <chThdCreateStatic>
                    NORMALPRIO + 7,
                    uart_dbus_thread, NULL);
}
 80032c2:	b003      	add	sp, #12
 80032c4:	bd30      	pop	{r4, r5, pc}
 80032c6:	bf00      	nop
 80032c8:	20001078 	.word	0x20001078
 80032cc:	200008a0 	.word	0x200008a0
 80032d0:	2000080c 	.word	0x2000080c
 80032d4:	08003181 	.word	0x08003181
 80032d8:	20000d98 	.word	0x20000d98
 80032dc:	00000000 	.word	0x00000000

080032e0 <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame>:

#define CAN_ENCODER_RADIAN_RATIO    7.669904e-4f    // 2*M_PI / 0x2000
static void can_processEncoder
  (volatile Encoder_canStruct* cm, const CANRxFrame* const rxmsg)
{
  uint16_t prev_angle = cm->angle_rotor_raw;
 80032e0:	8802      	ldrh	r2, [r0, #0]
{
 80032e2:	b510      	push	{r4, lr}
  uint16_t prev_angle = cm->angle_rotor_raw;
 80032e4:	b292      	uxth	r2, r2
{
 80032e6:	4604      	mov	r4, r0
 80032e8:	2320      	movs	r3, #32
 80032ea:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  cm->updated = true;
 80032ee:	2301      	movs	r3, #1
 80032f0:	7503      	strb	r3, [r0, #20]
  cm->angle_rotor_raw = (uint16_t)(rxmsg->data8[0]) << 8 | rxmsg->data8[1];
 80032f2:	7c08      	ldrb	r0, [r1, #16]
 80032f4:	7c4b      	ldrb	r3, [r1, #17]
 80032f6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80032fa:	8023      	strh	r3, [r4, #0]
  cm->speed_rpm       = (int16_t)(rxmsg->data8[2]) << 8 | rxmsg->data8[3];
 80032fc:	7c88      	ldrb	r0, [r1, #18]
 80032fe:	7ccb      	ldrb	r3, [r1, #19]
 8003300:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003304:	b21b      	sxth	r3, r3
 8003306:	8063      	strh	r3, [r4, #2]
  cm->current_raw     = (int16_t)(rxmsg->data8[4]) << 8 | rxmsg->data8[5];
 8003308:	7d08      	ldrb	r0, [r1, #20]
 800330a:	7d4b      	ldrb	r3, [r1, #21]
 800330c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003310:	b21b      	sxth	r3, r3
 8003312:	80a3      	strh	r3, [r4, #4]
  cm->temperature     = (uint8_t)rxmsg->data8[6];
 8003314:	7d8b      	ldrb	r3, [r1, #22]
 8003316:	71a3      	strb	r3, [r4, #6]

  if      (cm->angle_rotor_raw - prev_angle >  CAN_ENCODER_RANGE / 2) cm->round_count--;
 8003318:	8823      	ldrh	r3, [r4, #0]
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003320:	dc17      	bgt.n	8003352 <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame+0x72>
  else if (cm->angle_rotor_raw - prev_angle < -CAN_ENCODER_RANGE / 2) cm->round_count++;
 8003322:	8823      	ldrh	r3, [r4, #0]
 8003324:	1a9a      	subs	r2, r3, r2
 8003326:	f512 5f80 	cmn.w	r2, #4096	; 0x1000
 800332a:	da02      	bge.n	8003332 <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame+0x52>
 800332c:	68a3      	ldr	r3, [r4, #8]
 800332e:	3301      	adds	r3, #1
 8003330:	60a3      	str	r3, [r4, #8]

  cm->total_ecd = cm->round_count * CAN_ENCODER_RANGE + cm->angle_rotor_raw;
 8003332:	68a2      	ldr	r2, [r4, #8]
 8003334:	8823      	ldrh	r3, [r4, #0]
 8003336:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 800333a:	60e3      	str	r3, [r4, #12]
  cm->radian_angle = cm->total_ecd * CAN_ENCODER_RADIAN_RATIO;
 800333c:	68e0      	ldr	r0, [r4, #12]
 800333e:	f7fd fc9b 	bl	8000c78 <__aeabi_i2f>
 8003342:	4906      	ldr	r1, [pc, #24]	; (800335c <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame+0x7c>)
 8003344:	f7fd fcec 	bl	8000d20 <__aeabi_fmul>
 8003348:	2300      	movs	r3, #0
 800334a:	6120      	str	r0, [r4, #16]
 800334c:	f383 8811 	msr	BASEPRI, r3

  chSysUnlock();
}
 8003350:	bd10      	pop	{r4, pc}
  if      (cm->angle_rotor_raw - prev_angle >  CAN_ENCODER_RANGE / 2) cm->round_count--;
 8003352:	68a3      	ldr	r3, [r4, #8]
 8003354:	3b01      	subs	r3, #1
 8003356:	60a3      	str	r3, [r4, #8]
 8003358:	e7eb      	b.n	8003332 <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame+0x52>
 800335a:	bf00      	nop
 800335c:	3a490fdb 	.word	0x3a490fdb

08003360 <_ZL6can_rxPv>:

/*
 * Receiver thread.
 */
static THD_WORKING_AREA(can_rx1_wa, 256);
static THD_FUNCTION(can_rx, p) {
 8003360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003364:	4d2c      	ldr	r5, [pc, #176]	; (8003418 <_ZL6can_rxPv+0xb8>)
 8003366:	4a2d      	ldr	r2, [pc, #180]	; (800341c <_ZL6can_rxPv+0xbc>)
 8003368:	69ab      	ldr	r3, [r5, #24]
 800336a:	b08d      	sub	sp, #52	; 0x34
  event_listener_t el;
  CANRxFrame rxmsg;

  (void)p;
  chRegSetThreadName("can receiver");
  chEvtRegister(&canp->rxfull_event, &el, 0);
 800336c:	f100 0918 	add.w	r9, r0, #24
 8003370:	619a      	str	r2, [r3, #24]
static THD_FUNCTION(can_rx, p) {
 8003372:	4604      	mov	r4, r0
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8003374:	a901      	add	r1, sp, #4
 8003376:	4648      	mov	r0, r9
 8003378:	f04f 33ff 	mov.w	r3, #4294967295
 800337c:	2201      	movs	r2, #1
 800337e:	f7ff fab7 	bl	80028f0 <chEvtRegisterMaskWithFlags>
          can_processEncoder(&_encoder[4], rxmsg);
 8003382:	4e27      	ldr	r6, [pc, #156]	; (8003420 <_ZL6can_rxPv+0xc0>)
            can_processEncoder(&_encoder[BR_WHEEL], rxmsg);
 8003384:	f1a6 0830 	sub.w	r8, r6, #48	; 0x30
            can_processEncoder(&_encoder[BL_WHEEL], rxmsg);
 8003388:	f1a6 0718 	sub.w	r7, r6, #24
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800338c:	69ab      	ldr	r3, [r5, #24]
  while(!chThdShouldTerminateX())
 800338e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003392:	0759      	lsls	r1, r3, #29
 8003394:	d435      	bmi.n	8003402 <_ZL6can_rxPv+0xa2>
  {
    if (chEvtWaitAnyTimeout(ALL_EVENTS, TIME_MS2I(100)) == 0)
 8003396:	21c8      	movs	r1, #200	; 0xc8
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	f7ff fb08 	bl	80029b0 <chEvtWaitAnyTimeout>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d0f3      	beq.n	800338c <_ZL6can_rxPv+0x2c>
      continue;
    while (canReceive(canp, CAN_ANY_MAILBOX,
 80033a4:	2300      	movs	r3, #0
 80033a6:	aa06      	add	r2, sp, #24
 80033a8:	4619      	mov	r1, r3
 80033aa:	4620      	mov	r0, r4
 80033ac:	f7fd ff90 	bl	80012d0 <canReceiveTimeout>
                      &rxmsg, TIME_IMMEDIATE) == MSG_OK)
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d1eb      	bne.n	800338c <_ZL6can_rxPv+0x2c>
    switch(rxmsg->SID)
 80033b4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80033b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80033bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c0:	4413      	add	r3, r2
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d8ee      	bhi.n	80033a4 <_ZL6can_rxPv+0x44>
 80033c6:	e8df f003 	tbb	[pc, r3]
 80033ca:	1217      	.short	0x1217
 80033cc:	080d      	.short	0x080d
 80033ce:	03          	.byte	0x03
 80033cf:	00          	.byte	0x00
          can_processEncoder(&_encoder[4], rxmsg);
 80033d0:	a906      	add	r1, sp, #24
 80033d2:	4630      	mov	r0, r6
 80033d4:	f7ff ff84 	bl	80032e0 <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame>
 80033d8:	e7e4      	b.n	80033a4 <_ZL6can_rxPv+0x44>
            can_processEncoder(&_encoder[BL_WHEEL], rxmsg);
 80033da:	a906      	add	r1, sp, #24
 80033dc:	4638      	mov	r0, r7
 80033de:	f7ff ff7f 	bl	80032e0 <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame>
 80033e2:	e7df      	b.n	80033a4 <_ZL6can_rxPv+0x44>
            can_processEncoder(&_encoder[BR_WHEEL], rxmsg);
 80033e4:	a906      	add	r1, sp, #24
 80033e6:	4640      	mov	r0, r8
 80033e8:	f7ff ff7a 	bl	80032e0 <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame>
 80033ec:	e7da      	b.n	80033a4 <_ZL6can_rxPv+0x44>
            can_processEncoder(&_encoder[FR_WHEEL], rxmsg);
 80033ee:	a906      	add	r1, sp, #24
 80033f0:	480c      	ldr	r0, [pc, #48]	; (8003424 <_ZL6can_rxPv+0xc4>)
 80033f2:	f7ff ff75 	bl	80032e0 <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame>
 80033f6:	e7d5      	b.n	80033a4 <_ZL6can_rxPv+0x44>
            can_processEncoder(&_encoder[FL_WHEEL], rxmsg);
 80033f8:	a906      	add	r1, sp, #24
 80033fa:	480b      	ldr	r0, [pc, #44]	; (8003428 <_ZL6can_rxPv+0xc8>)
 80033fc:	f7ff ff70 	bl	80032e0 <_ZL18can_processEncoderPV17Encoder_canStructPK10CANRxFrame>
 8003400:	e7d0      	b.n	80033a4 <_ZL6can_rxPv+0x44>
    {
      can_processEncoderMessage(&rxmsg);
    }
  }
  chEvtUnregister(&canp->rxfull_event, &el);
 8003402:	a901      	add	r1, sp, #4
 8003404:	4648      	mov	r0, r9
 8003406:	f7ff fa8b 	bl	8002920 <chEvtUnregister>
  volatile Encoder_canStruct* encoder = can_getEncoder(); //Pointer to motor encoder feedback

  gripper::initial_angle = (encoder)->radian_angle;
 800340a:	4a07      	ldr	r2, [pc, #28]	; (8003428 <_ZL6can_rxPv+0xc8>)
 800340c:	4b07      	ldr	r3, [pc, #28]	; (800342c <_ZL6can_rxPv+0xcc>)
 800340e:	6912      	ldr	r2, [r2, #16]
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	b00d      	add	sp, #52	; 0x34
 8003414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003418:	20000998 	.word	0x20000998
 800341c:	08003750 	.word	0x08003750
 8003420:	200012b0 	.word	0x200012b0
 8003424:	20001268 	.word	0x20001268
 8003428:	20001250 	.word	0x20001250
 800342c:	20000d80 	.word	0x20000d80

08003430 <_Z14can_getEncoderv>:
}
 8003430:	4800      	ldr	r0, [pc, #0]	; (8003434 <_Z14can_getEncoderv+0x4>)
 8003432:	4770      	bx	lr
 8003434:	20001250 	.word	0x20001250
	...

08003440 <_Z19can_motorSetCurrenttssss>:
  const uint16_t EID,
  const int16_t cm1_iq,
  const int16_t cm2_iq,
  const int16_t cm3_iq,
  const int16_t cm4_iq)
{
 8003440:	b570      	push	{r4, r5, r6, lr}
    CANTxFrame txmsg;

    txmsg.IDE = CAN_IDE_STD;
    txmsg.EID = EID;
    txmsg.RTR = CAN_RTR_DATA;
    txmsg.DLC = 0x08;
 8003442:	2608      	movs	r6, #8
{
 8003444:	b084      	sub	sp, #16
    txmsg.IDE = CAN_IDE_STD;
 8003446:	f89d 4000 	ldrb.w	r4, [sp]
    txmsg.EID = EID;
 800344a:	9d01      	ldr	r5, [sp, #4]
    txmsg.DLC = 0x08;
 800344c:	f004 04cf 	and.w	r4, r4, #207	; 0xcf
 8003450:	f366 0403 	bfi	r4, r6, #0, #4
    txmsg.EID = EID;
 8003454:	f360 051c 	bfi	r5, r0, #0, #29
    txmsg.DLC = 0x08;
 8003458:	f88d 4000 	strb.w	r4, [sp]
    txmsg.EID = EID;
 800345c:	9501      	str	r5, [sp, #4]
{
 800345e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8003462:	2420      	movs	r4, #32
 8003464:	f384 8811 	msr	BASEPRI, r4

    chSysLock();

    //TODO arange data bytes for motor current control
    txmsg.data8[0] = (uint8_t)(cm1_iq >> 8);
 8003468:	fa41 f606 	asr.w	r6, r1, r6
    txmsg.data8[1] = (uint8_t)cm1_iq;

    txmsg.data8[2] = (uint8_t)(cm2_iq >> 8);
 800346c:	1215      	asrs	r5, r2, #8
    txmsg.data8[3] = (uint8_t)cm2_iq;

    txmsg.data8[4] = (uint8_t)(cm3_iq >> 8);
 800346e:	121c      	asrs	r4, r3, #8
    txmsg.data8[1] = (uint8_t)cm1_iq;
 8003470:	f88d 1009 	strb.w	r1, [sp, #9]
    txmsg.data8[5] = (uint8_t)cm3_iq;

    txmsg.data8[6] = (uint8_t)(cm4_iq >> 8);
 8003474:	1201      	asrs	r1, r0, #8
 8003476:	f88d 100e 	strb.w	r1, [sp, #14]
    txmsg.data8[0] = (uint8_t)(cm1_iq >> 8);
 800347a:	f88d 6008 	strb.w	r6, [sp, #8]
    txmsg.data8[3] = (uint8_t)cm2_iq;
 800347e:	f88d 200b 	strb.w	r2, [sp, #11]
    txmsg.data8[2] = (uint8_t)(cm2_iq >> 8);
 8003482:	f88d 500a 	strb.w	r5, [sp, #10]
    txmsg.data8[5] = (uint8_t)cm3_iq;
 8003486:	f88d 300d 	strb.w	r3, [sp, #13]
    txmsg.data8[4] = (uint8_t)(cm3_iq >> 8);
 800348a:	f88d 400c 	strb.w	r4, [sp, #12]
    txmsg.data8[7] = (uint8_t)cm4_iq;
 800348e:	f88d 000f 	strb.w	r0, [sp, #15]
 8003492:	2100      	movs	r1, #0
 8003494:	f381 8811 	msr	BASEPRI, r1

    chSysUnlock();

    canTransmit(&CAND1, CAN_ANY_MAILBOX, &txmsg, TIME_MS2I(100));
 8003498:	23c8      	movs	r3, #200	; 0xc8
 800349a:	466a      	mov	r2, sp
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <_Z19can_motorSetCurrenttssss+0x68>)
 800349e:	f7fd feef 	bl	8001280 <canTransmitTimeout>
}
 80034a2:	b004      	add	sp, #16
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
 80034a6:	bf00      	nop
 80034a8:	20000830 	.word	0x20000830
 80034ac:	00000000 	.word	0x00000000

080034b0 <_Z15can_processInitv>:


void can_processInit(void)
{
 80034b0:	b570      	push	{r4, r5, r6, lr}
  memset((void *)_encoder, 0, sizeof(Encoder_canStruct)*CHASSIS_MOTOR_NUM);
 80034b2:	2290      	movs	r2, #144	; 0x90
 80034b4:	2100      	movs	r1, #0
{
 80034b6:	b082      	sub	sp, #8
  memset((void *)_encoder, 0, sizeof(Encoder_canStruct)*CHASSIS_MOTOR_NUM);
 80034b8:	4817      	ldr	r0, [pc, #92]	; (8003518 <_Z15can_processInitv+0x68>)
 80034ba:	f000 f839 	bl	8003530 <memset>
 80034be:	2200      	movs	r2, #0
 80034c0:	4d16      	ldr	r5, [pc, #88]	; (800351c <_Z15can_processInitv+0x6c>)
  {
    canfilter[i].filter = i;
    canfilter[i].mode = 0; //CAN_FilterMode_IdMask
    canfilter[i].scale = 1; //CAN_FilterScale_32bit
    canfilter[i].assignment = 0;
    canfilter[i].register1 = 0;
 80034c2:	4616      	mov	r6, r2
 80034c4:	4629      	mov	r1, r5
    canfilter[i].filter = i;
 80034c6:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80034ca:	eb05 0084 	add.w	r0, r5, r4, lsl #2
    canfilter[i].mode = 0; //CAN_FilterMode_IdMask
 80034ce:	7883      	ldrb	r3, [r0, #2]
    canfilter[i].filter = i;
 80034d0:	f825 2024 	strh.w	r2, [r5, r4, lsl #2]
    canfilter[i].scale = 1; //CAN_FilterScale_32bit
 80034d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    canfilter[i].assignment = 0;
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	3201      	adds	r2, #1
 80034de:	f36f 0382 	bfc	r3, #2, #1
  for (i = 0; i < CAN_FILTER_NUM; i++)
 80034e2:	2a1c      	cmp	r2, #28
    canfilter[i].assignment = 0;
 80034e4:	7083      	strb	r3, [r0, #2]
    canfilter[i].register2 = 0;
 80034e6:	e9c1 6601 	strd	r6, r6, [r1, #4]
 80034ea:	f101 010c 	add.w	r1, r1, #12
  for (i = 0; i < CAN_FILTER_NUM; i++)
 80034ee:	d1ea      	bne.n	80034c6 <_Z15can_processInitv+0x16>
  }
  canSTM32SetFilters(&CAND1, 14, CAN_FILTER_NUM, canfilter);
 80034f0:	4c0b      	ldr	r4, [pc, #44]	; (8003520 <_Z15can_processInitv+0x70>)
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <_Z15can_processInitv+0x6c>)
 80034f4:	4620      	mov	r0, r4
 80034f6:	210e      	movs	r1, #14
 80034f8:	f7fe fa9a 	bl	8001a30 <canSTM32SetFilters>

  canStart(&CAND1, &cancfg);
 80034fc:	4620      	mov	r0, r4
 80034fe:	4909      	ldr	r1, [pc, #36]	; (8003524 <_Z15can_processInitv+0x74>)
 8003500:	f7fd feae 	bl	8001260 <canStart>
  /*
   * Starting the transmitter and receiver threads.
   */
  chThdCreateStatic(can_rx1_wa, sizeof(can_rx1_wa), NORMALPRIO + 7,
 8003504:	9400      	str	r4, [sp, #0]
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <_Z15can_processInitv+0x78>)
 8003508:	2287      	movs	r2, #135	; 0x87
 800350a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800350e:	4807      	ldr	r0, [pc, #28]	; (800352c <_Z15can_processInitv+0x7c>)
 8003510:	f7ff f916 	bl	8002740 <chThdCreateStatic>
                    can_rx, (void *)&CAND1);
}
 8003514:	b002      	add	sp, #8
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	20001250 	.word	0x20001250
 800351c:	200012e0 	.word	0x200012e0
 8003520:	20000830 	.word	0x20000830
 8003524:	08003760 	.word	0x08003760
 8003528:	08003361 	.word	0x08003361
 800352c:	20001088 	.word	0x20001088

08003530 <memset>:
 8003530:	b4f0      	push	{r4, r5, r6, r7}
 8003532:	0786      	lsls	r6, r0, #30
 8003534:	d043      	beq.n	80035be <memset+0x8e>
 8003536:	1e54      	subs	r4, r2, #1
 8003538:	2a00      	cmp	r2, #0
 800353a:	d03e      	beq.n	80035ba <memset+0x8a>
 800353c:	b2ca      	uxtb	r2, r1
 800353e:	4603      	mov	r3, r0
 8003540:	e002      	b.n	8003548 <memset+0x18>
 8003542:	f114 34ff 	adds.w	r4, r4, #4294967295
 8003546:	d338      	bcc.n	80035ba <memset+0x8a>
 8003548:	f803 2b01 	strb.w	r2, [r3], #1
 800354c:	079d      	lsls	r5, r3, #30
 800354e:	d1f8      	bne.n	8003542 <memset+0x12>
 8003550:	2c03      	cmp	r4, #3
 8003552:	d92b      	bls.n	80035ac <memset+0x7c>
 8003554:	b2cd      	uxtb	r5, r1
 8003556:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800355a:	2c0f      	cmp	r4, #15
 800355c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003560:	d916      	bls.n	8003590 <memset+0x60>
 8003562:	f1a4 0710 	sub.w	r7, r4, #16
 8003566:	093f      	lsrs	r7, r7, #4
 8003568:	f103 0620 	add.w	r6, r3, #32
 800356c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8003570:	f103 0210 	add.w	r2, r3, #16
 8003574:	e942 5504 	strd	r5, r5, [r2, #-16]
 8003578:	e942 5502 	strd	r5, r5, [r2, #-8]
 800357c:	3210      	adds	r2, #16
 800357e:	42b2      	cmp	r2, r6
 8003580:	d1f8      	bne.n	8003574 <memset+0x44>
 8003582:	f004 040f 	and.w	r4, r4, #15
 8003586:	3701      	adds	r7, #1
 8003588:	2c03      	cmp	r4, #3
 800358a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800358e:	d90d      	bls.n	80035ac <memset+0x7c>
 8003590:	461e      	mov	r6, r3
 8003592:	4622      	mov	r2, r4
 8003594:	3a04      	subs	r2, #4
 8003596:	2a03      	cmp	r2, #3
 8003598:	f846 5b04 	str.w	r5, [r6], #4
 800359c:	d8fa      	bhi.n	8003594 <memset+0x64>
 800359e:	1f22      	subs	r2, r4, #4
 80035a0:	f022 0203 	bic.w	r2, r2, #3
 80035a4:	3204      	adds	r2, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	f004 0403 	and.w	r4, r4, #3
 80035ac:	b12c      	cbz	r4, 80035ba <memset+0x8a>
 80035ae:	b2c9      	uxtb	r1, r1
 80035b0:	441c      	add	r4, r3
 80035b2:	f803 1b01 	strb.w	r1, [r3], #1
 80035b6:	429c      	cmp	r4, r3
 80035b8:	d1fb      	bne.n	80035b2 <memset+0x82>
 80035ba:	bcf0      	pop	{r4, r5, r6, r7}
 80035bc:	4770      	bx	lr
 80035be:	4614      	mov	r4, r2
 80035c0:	4603      	mov	r3, r0
 80035c2:	e7c5      	b.n	8003550 <memset+0x20>
